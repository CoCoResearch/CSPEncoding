
package testsFSG.defaul.features80;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import org.chocosolver.solver.ResolutionPolicy;
import org.chocosolver.solver.Solver;
import org.chocosolver.solver.constraints.Constraint;
import org.chocosolver.solver.constraints.IntConstraintFactory;
import org.chocosolver.solver.constraints.LogicalConstraintFactory;
import org.chocosolver.solver.constraints.SatFactory;
import org.chocosolver.solver.constraints.nary.cnf.LogOp;
import org.chocosolver.solver.search.loop.monitors.SMF;
import org.chocosolver.solver.search.strategy.IntStrategyFactory;
import org.chocosolver.solver.search.strategy.strategy.IntStrategy;
import org.chocosolver.solver.trace.Chatterbox;
import org.chocosolver.solver.variables.BoolVar;
import org.chocosolver.solver.variables.IntVar;
import org.chocosolver.solver.variables.Variable;
import org.chocosolver.solver.variables.VariableFactory;
import searchStrategies.Utilities;

public class CoCoModelDefault41 {
	private static Solver solver;
	private static BoolVar root1_root;
	private static BoolVar root1_F1;
	private static BoolVar root1_F64;
	private static BoolVar root1_F2;
	private static BoolVar root1_F3;
	private static BoolVar root1_F4;
	private static BoolVar root1_F5;
	private static BoolVar root1_F6;
	private static BoolVar root1_F33;
	private static BoolVar root1_F34;
	private static BoolVar root1_F35;
	private static BoolVar root1_F36;
	private static BoolVar root1_F47;
	private static BoolVar root1_F37;
	private static BoolVar root1_F38;
	private static BoolVar root1_F39;
	private static BoolVar root1_F7;
	private static BoolVar root1_F12;
	private static BoolVar root1_F13;
	private static BoolVar root1_F65;
	private static BoolVar root1_F66;
	private static BoolVar root1_F67;
	private static BoolVar root1_F68;
	private static BoolVar root1_F69;
	private static BoolVar root1_F70;
	private static BoolVar root1_F71;
	private static BoolVar root1_F72;
	private static BoolVar root1_F73;
	private static BoolVar root1_F14;
	private static BoolVar root1_F48;
	private static BoolVar root1_F15;
	private static BoolVar root1_F32;
	private static BoolVar root1_F16;
	private static BoolVar root1_F58;
	private static BoolVar root1_F59;
	private static BoolVar root1_F60;
	private static BoolVar root1_F61;
	private static BoolVar root1_F62;
	private static BoolVar root1_F63;
	private static BoolVar root1_F79;
	private static BoolVar root1_F17;
	private static BoolVar root1_F18;
	private static BoolVar root1_F19;
	private static BoolVar root1_F20;
	private static BoolVar root1_F40;
	private static BoolVar root1_F41;
	private static BoolVar root1_F42;
	private static BoolVar root1_F43;
	private static BoolVar root1_F44;
	private static BoolVar root1_F45;
	private static BoolVar root1_F46;
	private static BoolVar root1_F21;
	private static BoolVar root1_F8;
	private static BoolVar root1_F10;
	private static BoolVar root1_F11;
	private static BoolVar root1_F9;
	private static BoolVar root1_F22;
	private static BoolVar root1_F23;
	private static BoolVar root1_F24;
	private static BoolVar root1_F74;
	private static BoolVar root1_F75;
	private static BoolVar root1_F76;
	private static BoolVar root1_F77;
	private static BoolVar root1_F78;
	private static BoolVar root1_F25;
	private static BoolVar root1_F49;
	private static BoolVar root1_F50;
	private static BoolVar root1_F51;
	private static BoolVar root1_F52;
	private static BoolVar root1_F53;
	private static BoolVar root1_F54;
	private static BoolVar root1_F55;
	private static BoolVar root1_F56;
	private static BoolVar root1_F57;
	private static BoolVar root1_F26;
	private static BoolVar root1_F27;
	private static BoolVar root1_F28;
	private static BoolVar root1_F29;
	private static BoolVar root1_F30;
	private static BoolVar root1_F31;
	private static BoolVar root2_root;
	private static BoolVar root2_F1;
	private static BoolVar root2_F2;
	private static BoolVar root2_F3;
	private static BoolVar root2_F33;
	private static BoolVar root2_F34;
	private static BoolVar root2_F35;
	private static BoolVar root2_F36;
	private static BoolVar root2_F37;
	private static BoolVar root2_F38;
	private static BoolVar root2_F71;
	private static BoolVar root2_F72;
	private static BoolVar root2_F73;
	private static BoolVar root2_F74;
	private static BoolVar root2_F75;
	private static BoolVar root2_F76;
	private static BoolVar root2_F77;
	private static BoolVar root2_F78;
	private static BoolVar root2_F39;
	private static BoolVar root2_F4;
	private static BoolVar root2_F5;
	private static BoolVar root2_F9;
	private static BoolVar root2_F6;
	private static BoolVar root2_F7;
	private static BoolVar root2_F11;
	private static BoolVar root2_F12;
	private static BoolVar root2_F31;
	private static BoolVar root2_F40;
	private static BoolVar root2_F32;
	private static BoolVar root2_F13;
	private static BoolVar root2_F14;
	private static BoolVar root2_F15;
	private static BoolVar root2_F17;
	private static BoolVar root2_F18;
	private static BoolVar root2_F19;
	private static BoolVar root2_F20;
	private static BoolVar root2_F21;
	private static BoolVar root2_F22;
	private static BoolVar root2_F23;
	private static BoolVar root2_F24;
	private static BoolVar root2_F25;
	private static BoolVar root2_F26;
	private static BoolVar root2_F27;
	private static BoolVar root2_F28;
	private static BoolVar root2_F29;
	private static BoolVar root2_F30;
	private static BoolVar root2_F41;
	private static BoolVar root2_F42;
	private static BoolVar root2_F53;
	private static BoolVar root2_F54;
	private static BoolVar root2_F55;
	private static BoolVar root2_F56;
	private static BoolVar root2_F57;
	private static BoolVar root2_F58;
	private static BoolVar root2_F59;
	private static BoolVar root2_F60;
	private static BoolVar root2_F43;
	private static BoolVar root2_F44;
	private static BoolVar root2_F45;
	private static BoolVar root2_F16;
	private static BoolVar root2_F61;
	private static BoolVar root2_F62;
	private static BoolVar root2_F63;
	private static BoolVar root2_F64;
	private static BoolVar root2_F65;
	private static BoolVar root2_F66;
	private static BoolVar root2_F67;
	private static BoolVar root2_F68;
	private static BoolVar root2_F69;
	private static BoolVar root2_F70;
	private static BoolVar root2_F8;
	private static BoolVar root2_F10;
	private static BoolVar root2_F46;
	private static BoolVar root2_F47;
	private static BoolVar root2_F79;
	private static BoolVar root2_F48;
	private static BoolVar root2_F49;
	private static BoolVar root2_F50;
	private static BoolVar root2_F51;
	private static BoolVar root2_F52;
	private static BoolVar root3_root;
	private static BoolVar root3_F1;
	private static BoolVar root3_F9;
	private static BoolVar root3_F34;
	private static BoolVar root3_F35;
	private static BoolVar root3_F43;
	private static BoolVar root3_F36;
	private static BoolVar root3_F37;
	private static BoolVar root3_F38;
	private static BoolVar root3_F39;
	private static BoolVar root3_F40;
	private static BoolVar root3_F10;
	private static BoolVar root3_F32;
	private static BoolVar root3_F33;
	private static BoolVar root3_F57;
	private static BoolVar root3_F58;
	private static BoolVar root3_F59;
	private static BoolVar root3_F60;
	private static BoolVar root3_F61;
	private static BoolVar root3_F62;
	private static BoolVar root3_F63;
	private static BoolVar root3_F64;
	private static BoolVar root3_F11;
	private static BoolVar root3_F12;
	private static BoolVar root3_F16;
	private static BoolVar root3_F17;
	private static BoolVar root3_F27;
	private static BoolVar root3_F71;
	private static BoolVar root3_F75;
	private static BoolVar root3_F76;
	private static BoolVar root3_F77;
	private static BoolVar root3_F78;
	private static BoolVar root3_F72;
	private static BoolVar root3_F73;
	private static BoolVar root3_F28;
	private static BoolVar root3_F29;
	private static BoolVar root3_F67;
	private static BoolVar root3_F68;
	private static BoolVar root3_F30;
	private static BoolVar root3_F31;
	private static BoolVar root3_F18;
	private static BoolVar root3_F19;
	private static BoolVar root3_F20;
	private static BoolVar root3_F22;
	private static BoolVar root3_F23;
	private static BoolVar root3_F24;
	private static BoolVar root3_F25;
	private static BoolVar root3_F26;
	private static BoolVar root3_F21;
	private static BoolVar root3_F13;
	private static BoolVar root3_F14;
	private static BoolVar root3_F15;
	private static BoolVar root3_F2;
	private static BoolVar root3_F69;
	private static BoolVar root3_F70;
	private static BoolVar root3_F3;
	private static BoolVar root3_F41;
	private static BoolVar root3_F42;
	private static BoolVar root3_F4;
	private static BoolVar root3_F5;
	private static BoolVar root3_F6;
	private static BoolVar root3_F7;
	private static BoolVar root3_F8;
	private static BoolVar root3_F44;
	private static BoolVar root3_F49;
	private static BoolVar root3_F50;
	private static BoolVar root3_F51;
	private static BoolVar root3_F56;
	private static BoolVar root3_F52;
	private static BoolVar root3_F74;
	private static BoolVar root3_F53;
	private static BoolVar root3_F54;
	private static BoolVar root3_F65;
	private static BoolVar root3_F66;
	private static BoolVar root3_F79;
	private static BoolVar root3_F55;
	private static BoolVar root3_F45;
	private static BoolVar root3_F46;
	private static BoolVar root3_F47;
	private static BoolVar root3_F48;
	private static BoolVar root4_root;
	private static BoolVar root4_F1;
	private static BoolVar root4_F2;
	private static BoolVar root4_F31;
	private static BoolVar root4_F3;
	private static BoolVar root4_F7;
	private static BoolVar root4_F8;
	private static BoolVar root4_F21;
	private static BoolVar root4_F22;
	private static BoolVar root4_F23;
	private static BoolVar root4_F53;
	private static BoolVar root4_F24;
	private static BoolVar root4_F41;
	private static BoolVar root4_F42;
	private static BoolVar root4_F43;
	private static BoolVar root4_F44;
	private static BoolVar root4_F45;
	private static BoolVar root4_F46;
	private static BoolVar root4_F47;
	private static BoolVar root4_F25;
	private static BoolVar root4_F32;
	private static BoolVar root4_F33;
	private static BoolVar root4_F34;
	private static BoolVar root4_F35;
	private static BoolVar root4_F36;
	private static BoolVar root4_F37;
	private static BoolVar root4_F38;
	private static BoolVar root4_F39;
	private static BoolVar root4_F40;
	private static BoolVar root4_F26;
	private static BoolVar root4_F27;
	private static BoolVar root4_F30;
	private static BoolVar root4_F50;
	private static BoolVar root4_F51;
	private static BoolVar root4_F52;
	private static BoolVar root4_F28;
	private static BoolVar root4_F29;
	private static BoolVar root4_F9;
	private static BoolVar root4_F10;
	private static BoolVar root4_F13;
	private static BoolVar root4_F14;
	private static BoolVar root4_F48;
	private static BoolVar root4_F49;
	private static BoolVar root4_F15;
	private static BoolVar root4_F16;
	private static BoolVar root4_F17;
	private static BoolVar root4_F18;
	private static BoolVar root4_F70;
	private static BoolVar root4_F19;
	private static BoolVar root4_F20;
	private static BoolVar root4_F11;
	private static BoolVar root4_F12;
	private static BoolVar root4_F4;
	private static BoolVar root4_F5;
	private static BoolVar root4_F54;
	private static BoolVar root4_F61;
	private static BoolVar root4_F62;
	private static BoolVar root4_F63;
	private static BoolVar root4_F64;
	private static BoolVar root4_F65;
	private static BoolVar root4_F66;
	private static BoolVar root4_F67;
	private static BoolVar root4_F68;
	private static BoolVar root4_F69;
	private static BoolVar root4_F55;
	private static BoolVar root4_F56;
	private static BoolVar root4_F57;
	private static BoolVar root4_F58;
	private static BoolVar root4_F59;
	private static BoolVar root4_F60;
	private static BoolVar root4_F6;
	private static BoolVar root4_F71;
	private static BoolVar root4_F72;
	private static BoolVar root4_F73;
	private static BoolVar root4_F74;
	private static BoolVar root4_F75;
	private static BoolVar root4_F76;
	private static BoolVar root4_F77;
	private static BoolVar root4_F78;
	private static BoolVar root4_F79;
	private static BoolVar root5_root;
	private static BoolVar root5_F1;
	private static BoolVar root5_F2;
	private static BoolVar root5_F3;
	private static BoolVar root5_F4;
	private static BoolVar root5_F39;
	private static BoolVar root5_F43;
	private static BoolVar root5_F44;
	private static BoolVar root5_F45;
	private static BoolVar root5_F46;
	private static BoolVar root5_F47;
	private static BoolVar root5_F48;
	private static BoolVar root5_F49;
	private static BoolVar root5_F40;
	private static BoolVar root5_F41;
	private static BoolVar root5_F42;
	private static BoolVar root5_F62;
	private static BoolVar root5_F63;
	private static BoolVar root5_F5;
	private static BoolVar root5_F6;
	private static BoolVar root5_F21;
	private static BoolVar root5_F22;
	private static BoolVar root5_F27;
	private static BoolVar root5_F50;
	private static BoolVar root5_F51;
	private static BoolVar root5_F52;
	private static BoolVar root5_F53;
	private static BoolVar root5_F28;
	private static BoolVar root5_F29;
	private static BoolVar root5_F23;
	private static BoolVar root5_F24;
	private static BoolVar root5_F25;
	private static BoolVar root5_F7;
	private static BoolVar root5_F14;
	private static BoolVar root5_F15;
	private static BoolVar root5_F26;
	private static BoolVar root5_F16;
	private static BoolVar root5_F17;
	private static BoolVar root5_F31;
	private static BoolVar root5_F32;
	private static BoolVar root5_F33;
	private static BoolVar root5_F34;
	private static BoolVar root5_F35;
	private static BoolVar root5_F36;
	private static BoolVar root5_F37;
	private static BoolVar root5_F38;
	private static BoolVar root5_F18;
	private static BoolVar root5_F64;
	private static BoolVar root5_F65;
	private static BoolVar root5_F66;
	private static BoolVar root5_F67;
	private static BoolVar root5_F68;
	private static BoolVar root5_F69;
	private static BoolVar root5_F70;
	private static BoolVar root5_F19;
	private static BoolVar root5_F20;
	private static BoolVar root5_F8;
	private static BoolVar root5_F9;
	private static BoolVar root5_F10;
	private static BoolVar root5_F11;
	private static BoolVar root5_F30;
	private static BoolVar root5_F54;
	private static BoolVar root5_F55;
	private static BoolVar root5_F71;
	private static BoolVar root5_F72;
	private static BoolVar root5_F73;
	private static BoolVar root5_F74;
	private static BoolVar root5_F75;
	private static BoolVar root5_F76;
	private static BoolVar root5_F77;
	private static BoolVar root5_F78;
	private static BoolVar root5_F79;
	private static BoolVar root5_F56;
	private static BoolVar root5_F57;
	private static BoolVar root5_F58;
	private static BoolVar root5_F59;
	private static BoolVar root5_F60;
	private static BoolVar root5_F61;
	private static BoolVar root5_F12;
	private static BoolVar root5_F13;
		private static HashMap<String, IntVar> featureAttrAtribute1;
		private static HashMap<String, IntVar> featureAttrAtribute0;
	
	public static void main(String[] args) {
		solver = new Solver();
		
		//--------------------------------------------
		//Features
		//--------------------------------------------
		initializeVars();
		
		//--------------------------------------------
		//Feature Attributes
		//--------------------------------------------
		initializeFeatureAttributes();
		
		//--------------------------------------------
		//Tree Constraints
		//--------------------------------------------
		Constraint mandatoryroot1_root_root1_F1 = IntConstraintFactory.arithm(root1_root, "=", root1_F1);
		mandatoryroot1_root_root1_F1.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_root_root1_F1);
		Constraint optionalroot1_F1_root1_F64 = IntConstraintFactory.arithm(root1_F64, "<=", root1_F1);
		optionalroot1_F1_root1_F64.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F1_root1_F64);
		Constraint mandatoryroot1_root_root1_F2 = IntConstraintFactory.arithm(root1_root, "=", root1_F2);
		mandatoryroot1_root_root1_F2.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_root_root1_F2);
		Constraint mandatoryroot1_root_root1_F3 = IntConstraintFactory.arithm(root1_root, "=", root1_F3);
		mandatoryroot1_root_root1_F3.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_root_root1_F3);
		Constraint mandatoryroot1_root_root1_F4 = IntConstraintFactory.arithm(root1_root, "=", root1_F4);
		mandatoryroot1_root_root1_F4.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_root_root1_F4);
		Constraint optionalroot1_root_root1_F5 = IntConstraintFactory.arithm(root1_F5, "<=", root1_root);
		optionalroot1_root_root1_F5.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_root_root1_F5);
		IntVar sumOrroot1_root_5 = VariableFactory.enumerated("sumOrroot1_root", 0, 2, solver); 
		BoolVar[] varsOrroot1_root_5 = new BoolVar[2];
		varsOrroot1_root_5[0] = root1_F6;
		varsOrroot1_root_5[1] = root1_F7;
		solver.post(IntConstraintFactory.sum(varsOrroot1_root_5, sumOrroot1_root_5));
		Constraint or1root1_root_5 = IntConstraintFactory.arithm(sumOrroot1_root_5, ">=", 1);
		or1root1_root_5.setName(Utilities.OR_TC);
		
		Constraint or0root1_root_5 = IntConstraintFactory.arithm(sumOrroot1_root_5, "=", 0);
		or0root1_root_5.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_root, or1root1_root_5, or0root1_root_5);
			
		Constraint mandatoryroot1_F6_root1_F33 = IntConstraintFactory.arithm(root1_F6, "=", root1_F33);
		mandatoryroot1_F6_root1_F33.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F6_root1_F33);
		Constraint mandatoryroot1_F6_root1_F34 = IntConstraintFactory.arithm(root1_F6, "=", root1_F34);
		mandatoryroot1_F6_root1_F34.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F6_root1_F34);
		Constraint mandatoryroot1_F6_root1_F35 = IntConstraintFactory.arithm(root1_F6, "=", root1_F35);
		mandatoryroot1_F6_root1_F35.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F6_root1_F35);
		Constraint mandatoryroot1_F6_root1_F36 = IntConstraintFactory.arithm(root1_F6, "=", root1_F36);
		mandatoryroot1_F6_root1_F36.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F6_root1_F36);
		Constraint mandatoryroot1_F36_root1_F47 = IntConstraintFactory.arithm(root1_F36, "=", root1_F47);
		mandatoryroot1_F36_root1_F47.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F36_root1_F47);
		Constraint mandatoryroot1_F6_root1_F37 = IntConstraintFactory.arithm(root1_F6, "=", root1_F37);
		mandatoryroot1_F6_root1_F37.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F6_root1_F37);
		Constraint mandatoryroot1_F6_root1_F38 = IntConstraintFactory.arithm(root1_F6, "=", root1_F38);
		mandatoryroot1_F6_root1_F38.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F6_root1_F38);
		Constraint mandatoryroot1_F6_root1_F39 = IntConstraintFactory.arithm(root1_F6, "=", root1_F39);
		mandatoryroot1_F6_root1_F39.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F6_root1_F39);
		Constraint mandatoryroot1_F7_root1_F12 = IntConstraintFactory.arithm(root1_F7, "=", root1_F12);
		mandatoryroot1_F7_root1_F12.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F7_root1_F12);
		Constraint mandatoryroot1_F7_root1_F13 = IntConstraintFactory.arithm(root1_F7, "=", root1_F13);
		mandatoryroot1_F7_root1_F13.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F7_root1_F13);
		Constraint mandatoryroot1_F13_root1_F65 = IntConstraintFactory.arithm(root1_F13, "=", root1_F65);
		mandatoryroot1_F13_root1_F65.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F13_root1_F65);
		Constraint optionalroot1_F13_root1_F66 = IntConstraintFactory.arithm(root1_F66, "<=", root1_F13);
		optionalroot1_F13_root1_F66.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F13_root1_F66);
		Constraint optionalroot1_F13_root1_F67 = IntConstraintFactory.arithm(root1_F67, "<=", root1_F13);
		optionalroot1_F13_root1_F67.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F13_root1_F67);
		Constraint optionalroot1_F13_root1_F68 = IntConstraintFactory.arithm(root1_F68, "<=", root1_F13);
		optionalroot1_F13_root1_F68.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F13_root1_F68);
		IntVar sumOrroot1_F13_4 = VariableFactory.enumerated("sumOrroot1_F13", 0, 3, solver); 
		BoolVar[] varsOrroot1_F13_4 = new BoolVar[3];
		varsOrroot1_F13_4[0] = root1_F69;
		varsOrroot1_F13_4[1] = root1_F70;
		varsOrroot1_F13_4[2] = root1_F71;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F13_4, sumOrroot1_F13_4));
		Constraint or1root1_F13_4 = IntConstraintFactory.arithm(sumOrroot1_F13_4, ">=", 1);
		or1root1_F13_4.setName(Utilities.OR_TC);
		
		Constraint or0root1_F13_4 = IntConstraintFactory.arithm(sumOrroot1_F13_4, "=", 0);
		or0root1_F13_4.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F13, or1root1_F13_4, or0root1_F13_4);
			
		Constraint mandatoryroot1_F13_root1_F72 = IntConstraintFactory.arithm(root1_F13, "=", root1_F72);
		mandatoryroot1_F13_root1_F72.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F13_root1_F72);
		Constraint mandatoryroot1_F13_root1_F73 = IntConstraintFactory.arithm(root1_F13, "=", root1_F73);
		mandatoryroot1_F13_root1_F73.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F13_root1_F73);
		Constraint optionalroot1_F7_root1_F14 = IntConstraintFactory.arithm(root1_F14, "<=", root1_F7);
		optionalroot1_F7_root1_F14.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F7_root1_F14);
		Constraint mandatoryroot1_F14_root1_F48 = IntConstraintFactory.arithm(root1_F14, "=", root1_F48);
		mandatoryroot1_F14_root1_F48.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F14_root1_F48);
		Constraint mandatoryroot1_F7_root1_F15 = IntConstraintFactory.arithm(root1_F7, "=", root1_F15);
		mandatoryroot1_F7_root1_F15.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F7_root1_F15);
		Constraint optionalroot1_F15_root1_F32 = IntConstraintFactory.arithm(root1_F32, "<=", root1_F15);
		optionalroot1_F15_root1_F32.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F15_root1_F32);
		IntVar sumOrroot1_F7_4 = VariableFactory.enumerated("sumOrroot1_F7", 0, 2, solver); 
		BoolVar[] varsOrroot1_F7_4 = new BoolVar[2];
		varsOrroot1_F7_4[0] = root1_F16;
		varsOrroot1_F7_4[1] = root1_F17;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F7_4, sumOrroot1_F7_4));
		Constraint or1root1_F7_4 = IntConstraintFactory.arithm(sumOrroot1_F7_4, ">=", 1);
		or1root1_F7_4.setName(Utilities.OR_TC);
		
		Constraint or0root1_F7_4 = IntConstraintFactory.arithm(sumOrroot1_F7_4, "=", 0);
		or0root1_F7_4.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F7, or1root1_F7_4, or0root1_F7_4);
			
		Constraint mandatoryroot1_F16_root1_F58 = IntConstraintFactory.arithm(root1_F16, "=", root1_F58);
		mandatoryroot1_F16_root1_F58.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F16_root1_F58);
		Constraint optionalroot1_F16_root1_F59 = IntConstraintFactory.arithm(root1_F59, "<=", root1_F16);
		optionalroot1_F16_root1_F59.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F16_root1_F59);
		Constraint mandatoryroot1_F16_root1_F60 = IntConstraintFactory.arithm(root1_F16, "=", root1_F60);
		mandatoryroot1_F16_root1_F60.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F16_root1_F60);
		IntVar sumOrroot1_F16_3 = VariableFactory.enumerated("sumOrroot1_F16", 0, 3, solver); 
		BoolVar[] varsOrroot1_F16_3 = new BoolVar[3];
		varsOrroot1_F16_3[0] = root1_F61;
		varsOrroot1_F16_3[1] = root1_F62;
		varsOrroot1_F16_3[2] = root1_F63;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F16_3, sumOrroot1_F16_3));
		Constraint or1root1_F16_3 = IntConstraintFactory.arithm(sumOrroot1_F16_3, ">=", 1);
		or1root1_F16_3.setName(Utilities.OR_TC);
		
		Constraint or0root1_F16_3 = IntConstraintFactory.arithm(sumOrroot1_F16_3, "=", 0);
		or0root1_F16_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F16, or1root1_F16_3, or0root1_F16_3);
			
		Constraint optionalroot1_F63_root1_F79 = IntConstraintFactory.arithm(root1_F79, "<=", root1_F63);
		optionalroot1_F63_root1_F79.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F63_root1_F79);
		IntVar sumOrroot1_F7_5 = VariableFactory.enumerated("sumOrroot1_F7", 0, 2, solver); 
		BoolVar[] varsOrroot1_F7_5 = new BoolVar[2];
		varsOrroot1_F7_5[0] = root1_F18;
		varsOrroot1_F7_5[1] = root1_F19;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F7_5, sumOrroot1_F7_5));
		Constraint or1root1_F7_5 = IntConstraintFactory.arithm(sumOrroot1_F7_5, ">=", 1);
		or1root1_F7_5.setName(Utilities.OR_TC);
		
		Constraint or0root1_F7_5 = IntConstraintFactory.arithm(sumOrroot1_F7_5, "=", 0);
		or0root1_F7_5.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F7, or1root1_F7_5, or0root1_F7_5);
			
		Constraint mandatoryroot1_F7_root1_F20 = IntConstraintFactory.arithm(root1_F7, "=", root1_F20);
		mandatoryroot1_F7_root1_F20.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F7_root1_F20);
		Constraint mandatoryroot1_F20_root1_F40 = IntConstraintFactory.arithm(root1_F20, "=", root1_F40);
		mandatoryroot1_F20_root1_F40.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F20_root1_F40);
		Constraint mandatoryroot1_F20_root1_F41 = IntConstraintFactory.arithm(root1_F20, "=", root1_F41);
		mandatoryroot1_F20_root1_F41.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F20_root1_F41);
		Constraint optionalroot1_F20_root1_F42 = IntConstraintFactory.arithm(root1_F42, "<=", root1_F20);
		optionalroot1_F20_root1_F42.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F20_root1_F42);
		Constraint mandatoryroot1_F20_root1_F43 = IntConstraintFactory.arithm(root1_F20, "=", root1_F43);
		mandatoryroot1_F20_root1_F43.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F20_root1_F43);
		Constraint optionalroot1_F20_root1_F44 = IntConstraintFactory.arithm(root1_F44, "<=", root1_F20);
		optionalroot1_F20_root1_F44.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F20_root1_F44);
		IntVar sumOrroot1_F20_5 = VariableFactory.enumerated("sumOrroot1_F20", 0, 2, solver); 
		BoolVar[] varsOrroot1_F20_5 = new BoolVar[2];
		varsOrroot1_F20_5[0] = root1_F45;
		varsOrroot1_F20_5[1] = root1_F46;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F20_5, sumOrroot1_F20_5));
		Constraint or1root1_F20_5 = IntConstraintFactory.arithm(sumOrroot1_F20_5, ">=", 1);
		or1root1_F20_5.setName(Utilities.OR_TC);
		
		Constraint or0root1_F20_5 = IntConstraintFactory.arithm(sumOrroot1_F20_5, "=", 0);
		or0root1_F20_5.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F20, or1root1_F20_5, or0root1_F20_5);
			
		Constraint mandatoryroot1_F7_root1_F21 = IntConstraintFactory.arithm(root1_F7, "=", root1_F21);
		mandatoryroot1_F7_root1_F21.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F7_root1_F21);
		Constraint mandatoryroot1_root_root1_F8 = IntConstraintFactory.arithm(root1_root, "=", root1_F8);
		mandatoryroot1_root_root1_F8.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_root_root1_F8);
		Constraint mandatoryroot1_F8_root1_F10 = IntConstraintFactory.arithm(root1_F8, "=", root1_F10);
		mandatoryroot1_F8_root1_F10.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F8_root1_F10);
		Constraint mandatoryroot1_F8_root1_F11 = IntConstraintFactory.arithm(root1_F8, "=", root1_F11);
		mandatoryroot1_F8_root1_F11.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F8_root1_F11);
		Constraint mandatoryroot1_root_root1_F9 = IntConstraintFactory.arithm(root1_root, "=", root1_F9);
		mandatoryroot1_root_root1_F9.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_root_root1_F9);
		Constraint optionalroot1_F9_root1_F22 = IntConstraintFactory.arithm(root1_F22, "<=", root1_F9);
		optionalroot1_F9_root1_F22.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F9_root1_F22);
		Constraint optionalroot1_F9_root1_F23 = IntConstraintFactory.arithm(root1_F23, "<=", root1_F9);
		optionalroot1_F9_root1_F23.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F9_root1_F23);
		Constraint optionalroot1_F9_root1_F24 = IntConstraintFactory.arithm(root1_F24, "<=", root1_F9);
		optionalroot1_F9_root1_F24.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F9_root1_F24);
		Constraint optionalroot1_F24_root1_F74 = IntConstraintFactory.arithm(root1_F74, "<=", root1_F24);
		optionalroot1_F24_root1_F74.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F24_root1_F74);
		Constraint mandatoryroot1_F24_root1_F75 = IntConstraintFactory.arithm(root1_F24, "=", root1_F75);
		mandatoryroot1_F24_root1_F75.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F24_root1_F75);
		IntVar sumOrroot1_F24_2 = VariableFactory.enumerated("sumOrroot1_F24", 0, 3, solver); 
		BoolVar[] varsOrroot1_F24_2 = new BoolVar[3];
		varsOrroot1_F24_2[0] = root1_F76;
		varsOrroot1_F24_2[1] = root1_F77;
		varsOrroot1_F24_2[2] = root1_F78;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F24_2, sumOrroot1_F24_2));
		Constraint or1root1_F24_2 = IntConstraintFactory.arithm(sumOrroot1_F24_2, ">=", 1);
		or1root1_F24_2.setName(Utilities.OR_TC);
		
		Constraint or0root1_F24_2 = IntConstraintFactory.arithm(sumOrroot1_F24_2, "=", 0);
		or0root1_F24_2.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F24, or1root1_F24_2, or0root1_F24_2);
			
		Constraint mandatoryroot1_F9_root1_F25 = IntConstraintFactory.arithm(root1_F9, "=", root1_F25);
		mandatoryroot1_F9_root1_F25.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F9_root1_F25);
		Constraint mandatoryroot1_F25_root1_F49 = IntConstraintFactory.arithm(root1_F25, "=", root1_F49);
		mandatoryroot1_F25_root1_F49.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F25_root1_F49);
		Constraint mandatoryroot1_F25_root1_F50 = IntConstraintFactory.arithm(root1_F25, "=", root1_F50);
		mandatoryroot1_F25_root1_F50.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F25_root1_F50);
		Constraint optionalroot1_F25_root1_F51 = IntConstraintFactory.arithm(root1_F51, "<=", root1_F25);
		optionalroot1_F25_root1_F51.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F25_root1_F51);
		Constraint optionalroot1_F25_root1_F52 = IntConstraintFactory.arithm(root1_F52, "<=", root1_F25);
		optionalroot1_F25_root1_F52.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F25_root1_F52);
		Constraint optionalroot1_F25_root1_F53 = IntConstraintFactory.arithm(root1_F53, "<=", root1_F25);
		optionalroot1_F25_root1_F53.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F25_root1_F53);
		Constraint mandatoryroot1_F25_root1_F54 = IntConstraintFactory.arithm(root1_F25, "=", root1_F54);
		mandatoryroot1_F25_root1_F54.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F25_root1_F54);
		Constraint mandatoryroot1_F25_root1_F55 = IntConstraintFactory.arithm(root1_F25, "=", root1_F55);
		mandatoryroot1_F25_root1_F55.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F25_root1_F55);
		Constraint mandatoryroot1_F25_root1_F56 = IntConstraintFactory.arithm(root1_F25, "=", root1_F56);
		mandatoryroot1_F25_root1_F56.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F25_root1_F56);
		Constraint mandatoryroot1_F25_root1_F57 = IntConstraintFactory.arithm(root1_F25, "=", root1_F57);
		mandatoryroot1_F25_root1_F57.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F25_root1_F57);
		Constraint mandatoryroot1_F9_root1_F26 = IntConstraintFactory.arithm(root1_F9, "=", root1_F26);
		mandatoryroot1_F9_root1_F26.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F9_root1_F26);
		Constraint optionalroot1_F9_root1_F27 = IntConstraintFactory.arithm(root1_F27, "<=", root1_F9);
		optionalroot1_F9_root1_F27.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F9_root1_F27);
		Constraint mandatoryroot1_F9_root1_F28 = IntConstraintFactory.arithm(root1_F9, "=", root1_F28);
		mandatoryroot1_F9_root1_F28.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F9_root1_F28);
		IntVar sumOrroot1_F9_7 = VariableFactory.enumerated("sumOrroot1_F9", 0, 3, solver); 
		BoolVar[] varsOrroot1_F9_7 = new BoolVar[3];
		varsOrroot1_F9_7[0] = root1_F29;
		varsOrroot1_F9_7[1] = root1_F30;
		varsOrroot1_F9_7[2] = root1_F31;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F9_7, sumOrroot1_F9_7));
		Constraint or1root1_F9_7 = IntConstraintFactory.arithm(sumOrroot1_F9_7, ">=", 1);
		or1root1_F9_7.setName(Utilities.OR_TC);
		
		Constraint or0root1_F9_7 = IntConstraintFactory.arithm(sumOrroot1_F9_7, "=", 0);
		or0root1_F9_7.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F9, or1root1_F9_7, or0root1_F9_7);
			
		Constraint optionalroot2_root_root2_F1 = IntConstraintFactory.arithm(root2_F1, "<=", root2_root);
		optionalroot2_root_root2_F1.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_root_root2_F1);
		Constraint optionalroot2_root_root2_F2 = IntConstraintFactory.arithm(root2_F2, "<=", root2_root);
		optionalroot2_root_root2_F2.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_root_root2_F2);
		IntVar sumOrroot2_root_2 = VariableFactory.enumerated("sumOrroot2_root", 0, 2, solver); 
		BoolVar[] varsOrroot2_root_2 = new BoolVar[2];
		varsOrroot2_root_2[0] = root2_F3;
		varsOrroot2_root_2[1] = root2_F4;
		solver.post(IntConstraintFactory.sum(varsOrroot2_root_2, sumOrroot2_root_2));
		Constraint or1root2_root_2 = IntConstraintFactory.arithm(sumOrroot2_root_2, ">=", 1);
		or1root2_root_2.setName(Utilities.OR_TC);
		
		Constraint or0root2_root_2 = IntConstraintFactory.arithm(sumOrroot2_root_2, "=", 0);
		or0root2_root_2.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root2_root, or1root2_root_2, or0root2_root_2);
			
		Constraint optionalroot2_F3_root2_F33 = IntConstraintFactory.arithm(root2_F33, "<=", root2_F3);
		optionalroot2_F3_root2_F33.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F3_root2_F33);
		Constraint mandatoryroot2_F3_root2_F34 = IntConstraintFactory.arithm(root2_F3, "=", root2_F34);
		mandatoryroot2_F3_root2_F34.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F3_root2_F34);
		Constraint mandatoryroot2_F3_root2_F35 = IntConstraintFactory.arithm(root2_F3, "=", root2_F35);
		mandatoryroot2_F3_root2_F35.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F3_root2_F35);
		Constraint optionalroot2_F3_root2_F36 = IntConstraintFactory.arithm(root2_F36, "<=", root2_F3);
		optionalroot2_F3_root2_F36.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F3_root2_F36);
		Constraint optionalroot2_F3_root2_F37 = IntConstraintFactory.arithm(root2_F37, "<=", root2_F3);
		optionalroot2_F3_root2_F37.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F3_root2_F37);
		Constraint mandatoryroot2_F3_root2_F38 = IntConstraintFactory.arithm(root2_F3, "=", root2_F38);
		mandatoryroot2_F3_root2_F38.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F3_root2_F38);
		Constraint mandatoryroot2_F38_root2_F71 = IntConstraintFactory.arithm(root2_F38, "=", root2_F71);
		mandatoryroot2_F38_root2_F71.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F38_root2_F71);
		Constraint mandatoryroot2_F38_root2_F72 = IntConstraintFactory.arithm(root2_F38, "=", root2_F72);
		mandatoryroot2_F38_root2_F72.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F38_root2_F72);
		Constraint mandatoryroot2_F38_root2_F73 = IntConstraintFactory.arithm(root2_F38, "=", root2_F73);
		mandatoryroot2_F38_root2_F73.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F38_root2_F73);
		Constraint optionalroot2_F38_root2_F74 = IntConstraintFactory.arithm(root2_F74, "<=", root2_F38);
		optionalroot2_F38_root2_F74.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F38_root2_F74);
		Constraint mandatoryroot2_F38_root2_F75 = IntConstraintFactory.arithm(root2_F38, "=", root2_F75);
		mandatoryroot2_F38_root2_F75.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F38_root2_F75);
		Constraint mandatoryroot2_F38_root2_F76 = IntConstraintFactory.arithm(root2_F38, "=", root2_F76);
		mandatoryroot2_F38_root2_F76.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F38_root2_F76);
		Constraint mandatoryroot2_F38_root2_F77 = IntConstraintFactory.arithm(root2_F38, "=", root2_F77);
		mandatoryroot2_F38_root2_F77.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F38_root2_F77);
		Constraint mandatoryroot2_F38_root2_F78 = IntConstraintFactory.arithm(root2_F38, "=", root2_F78);
		mandatoryroot2_F38_root2_F78.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F38_root2_F78);
		Constraint mandatoryroot2_F3_root2_F39 = IntConstraintFactory.arithm(root2_F3, "=", root2_F39);
		mandatoryroot2_F3_root2_F39.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F3_root2_F39);
		IntVar sumOrroot2_root_3 = VariableFactory.enumerated("sumOrroot2_root", 0, 2, solver); 
		BoolVar[] varsOrroot2_root_3 = new BoolVar[2];
		varsOrroot2_root_3[0] = root2_F5;
		varsOrroot2_root_3[1] = root2_F6;
		solver.post(IntConstraintFactory.sum(varsOrroot2_root_3, sumOrroot2_root_3));
		Constraint or1root2_root_3 = IntConstraintFactory.arithm(sumOrroot2_root_3, ">=", 1);
		or1root2_root_3.setName(Utilities.OR_TC);
		
		Constraint or0root2_root_3 = IntConstraintFactory.arithm(sumOrroot2_root_3, "=", 0);
		or0root2_root_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root2_root, or1root2_root_3, or0root2_root_3);
			
		Constraint optionalroot2_F5_root2_F9 = IntConstraintFactory.arithm(root2_F9, "<=", root2_F5);
		optionalroot2_F5_root2_F9.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F5_root2_F9);
		Constraint mandatoryroot2_root_root2_F7 = IntConstraintFactory.arithm(root2_root, "=", root2_F7);
		mandatoryroot2_root_root2_F7.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_root_root2_F7);
		Constraint optionalroot2_F7_root2_F11 = IntConstraintFactory.arithm(root2_F11, "<=", root2_F7);
		optionalroot2_F7_root2_F11.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F7_root2_F11);
		Constraint optionalroot2_F7_root2_F12 = IntConstraintFactory.arithm(root2_F12, "<=", root2_F7);
		optionalroot2_F7_root2_F12.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F7_root2_F12);
		Constraint mandatoryroot2_F12_root2_F31 = IntConstraintFactory.arithm(root2_F12, "=", root2_F31);
		mandatoryroot2_F12_root2_F31.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F12_root2_F31);
		Constraint optionalroot2_F31_root2_F40 = IntConstraintFactory.arithm(root2_F40, "<=", root2_F31);
		optionalroot2_F31_root2_F40.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F31_root2_F40);
		Constraint mandatoryroot2_F12_root2_F32 = IntConstraintFactory.arithm(root2_F12, "=", root2_F32);
		mandatoryroot2_F12_root2_F32.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F12_root2_F32);
		Constraint optionalroot2_F7_root2_F13 = IntConstraintFactory.arithm(root2_F13, "<=", root2_F7);
		optionalroot2_F7_root2_F13.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F7_root2_F13);
		IntVar sumOrroot2_F7_3 = VariableFactory.enumerated("sumOrroot2_F7", 0, 3, solver); 
		BoolVar[] varsOrroot2_F7_3 = new BoolVar[3];
		varsOrroot2_F7_3[0] = root2_F14;
		varsOrroot2_F7_3[1] = root2_F15;
		varsOrroot2_F7_3[2] = root2_F16;
		solver.post(IntConstraintFactory.sum(varsOrroot2_F7_3, sumOrroot2_F7_3));
		Constraint or1root2_F7_3 = IntConstraintFactory.arithm(sumOrroot2_F7_3, ">=", 1);
		or1root2_F7_3.setName(Utilities.OR_TC);
		
		Constraint or0root2_F7_3 = IntConstraintFactory.arithm(sumOrroot2_F7_3, "=", 0);
		or0root2_F7_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root2_F7, or1root2_F7_3, or0root2_F7_3);
			
		Constraint mandatoryroot2_F15_root2_F17 = IntConstraintFactory.arithm(root2_F15, "=", root2_F17);
		mandatoryroot2_F15_root2_F17.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F15_root2_F17);
		Constraint optionalroot2_F15_root2_F18 = IntConstraintFactory.arithm(root2_F18, "<=", root2_F15);
		optionalroot2_F15_root2_F18.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F15_root2_F18);
		Constraint mandatoryroot2_F15_root2_F19 = IntConstraintFactory.arithm(root2_F15, "=", root2_F19);
		mandatoryroot2_F15_root2_F19.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F15_root2_F19);
		IntVar sumOrroot2_F15_3 = VariableFactory.enumerated("sumOrroot2_F15", 0, 3, solver); 
		BoolVar[] varsOrroot2_F15_3 = new BoolVar[3];
		varsOrroot2_F15_3[0] = root2_F20;
		varsOrroot2_F15_3[1] = root2_F21;
		varsOrroot2_F15_3[2] = root2_F22;
		solver.post(IntConstraintFactory.sum(varsOrroot2_F15_3, sumOrroot2_F15_3));
		Constraint or1root2_F15_3 = IntConstraintFactory.arithm(sumOrroot2_F15_3, ">=", 1);
		or1root2_F15_3.setName(Utilities.OR_TC);
		
		Constraint or0root2_F15_3 = IntConstraintFactory.arithm(sumOrroot2_F15_3, "=", 0);
		or0root2_F15_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root2_F15, or1root2_F15_3, or0root2_F15_3);
			
		Constraint mandatoryroot2_F15_root2_F23 = IntConstraintFactory.arithm(root2_F15, "=", root2_F23);
		mandatoryroot2_F15_root2_F23.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F15_root2_F23);
		Constraint mandatoryroot2_F15_root2_F24 = IntConstraintFactory.arithm(root2_F15, "=", root2_F24);
		mandatoryroot2_F15_root2_F24.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F15_root2_F24);
		Constraint mandatoryroot2_F15_root2_F25 = IntConstraintFactory.arithm(root2_F15, "=", root2_F25);
		mandatoryroot2_F15_root2_F25.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F15_root2_F25);
		Constraint mandatoryroot2_F25_root2_F26 = IntConstraintFactory.arithm(root2_F25, "=", root2_F26);
		mandatoryroot2_F25_root2_F26.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F25_root2_F26);
		Constraint mandatoryroot2_F25_root2_F27 = IntConstraintFactory.arithm(root2_F25, "=", root2_F27);
		mandatoryroot2_F25_root2_F27.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F25_root2_F27);
		Constraint optionalroot2_F25_root2_F28 = IntConstraintFactory.arithm(root2_F28, "<=", root2_F25);
		optionalroot2_F25_root2_F28.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F25_root2_F28);
		Constraint mandatoryroot2_F25_root2_F29 = IntConstraintFactory.arithm(root2_F25, "=", root2_F29);
		mandatoryroot2_F25_root2_F29.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F25_root2_F29);
		Constraint mandatoryroot2_F25_root2_F30 = IntConstraintFactory.arithm(root2_F25, "=", root2_F30);
		mandatoryroot2_F25_root2_F30.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F25_root2_F30);
		Constraint mandatoryroot2_F30_root2_F41 = IntConstraintFactory.arithm(root2_F30, "=", root2_F41);
		mandatoryroot2_F30_root2_F41.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F30_root2_F41);
		Constraint optionalroot2_F30_root2_F42 = IntConstraintFactory.arithm(root2_F42, "<=", root2_F30);
		optionalroot2_F30_root2_F42.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F30_root2_F42);
		Constraint mandatoryroot2_F42_root2_F53 = IntConstraintFactory.arithm(root2_F42, "=", root2_F53);
		mandatoryroot2_F42_root2_F53.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F42_root2_F53);
		Constraint mandatoryroot2_F42_root2_F54 = IntConstraintFactory.arithm(root2_F42, "=", root2_F54);
		mandatoryroot2_F42_root2_F54.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F42_root2_F54);
		IntVar sumOrroot2_F42_2 = VariableFactory.enumerated("sumOrroot2_F42", 0, 3, solver); 
		BoolVar[] varsOrroot2_F42_2 = new BoolVar[3];
		varsOrroot2_F42_2[0] = root2_F55;
		varsOrroot2_F42_2[1] = root2_F56;
		varsOrroot2_F42_2[2] = root2_F57;
		solver.post(IntConstraintFactory.sum(varsOrroot2_F42_2, sumOrroot2_F42_2));
		Constraint or1root2_F42_2 = IntConstraintFactory.arithm(sumOrroot2_F42_2, ">=", 1);
		or1root2_F42_2.setName(Utilities.OR_TC);
		
		Constraint or0root2_F42_2 = IntConstraintFactory.arithm(sumOrroot2_F42_2, "=", 0);
		or0root2_F42_2.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root2_F42, or1root2_F42_2, or0root2_F42_2);
			
		Constraint mandatoryroot2_F42_root2_F58 = IntConstraintFactory.arithm(root2_F42, "=", root2_F58);
		mandatoryroot2_F42_root2_F58.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F42_root2_F58);
		Constraint mandatoryroot2_F42_root2_F59 = IntConstraintFactory.arithm(root2_F42, "=", root2_F59);
		mandatoryroot2_F42_root2_F59.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F42_root2_F59);
		Constraint mandatoryroot2_F42_root2_F60 = IntConstraintFactory.arithm(root2_F42, "=", root2_F60);
		mandatoryroot2_F42_root2_F60.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F42_root2_F60);
		Constraint optionalroot2_F30_root2_F43 = IntConstraintFactory.arithm(root2_F43, "<=", root2_F30);
		optionalroot2_F30_root2_F43.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F30_root2_F43);
		Constraint mandatoryroot2_F30_root2_F44 = IntConstraintFactory.arithm(root2_F30, "=", root2_F44);
		mandatoryroot2_F30_root2_F44.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F30_root2_F44);
		Constraint mandatoryroot2_F30_root2_F45 = IntConstraintFactory.arithm(root2_F30, "=", root2_F45);
		mandatoryroot2_F30_root2_F45.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F30_root2_F45);
		Constraint mandatoryroot2_F16_root2_F61 = IntConstraintFactory.arithm(root2_F16, "=", root2_F61);
		mandatoryroot2_F16_root2_F61.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F16_root2_F61);
		Constraint mandatoryroot2_F16_root2_F62 = IntConstraintFactory.arithm(root2_F16, "=", root2_F62);
		mandatoryroot2_F16_root2_F62.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F16_root2_F62);
		Constraint optionalroot2_F16_root2_F63 = IntConstraintFactory.arithm(root2_F63, "<=", root2_F16);
		optionalroot2_F16_root2_F63.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F16_root2_F63);
		Constraint mandatoryroot2_F16_root2_F64 = IntConstraintFactory.arithm(root2_F16, "=", root2_F64);
		mandatoryroot2_F16_root2_F64.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F16_root2_F64);
		Constraint mandatoryroot2_F16_root2_F65 = IntConstraintFactory.arithm(root2_F16, "=", root2_F65);
		mandatoryroot2_F16_root2_F65.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F16_root2_F65);
		IntVar sumOrroot2_F16_5 = VariableFactory.enumerated("sumOrroot2_F16", 0, 2, solver); 
		BoolVar[] varsOrroot2_F16_5 = new BoolVar[2];
		varsOrroot2_F16_5[0] = root2_F66;
		varsOrroot2_F16_5[1] = root2_F67;
		solver.post(IntConstraintFactory.sum(varsOrroot2_F16_5, sumOrroot2_F16_5));
		Constraint or1root2_F16_5 = IntConstraintFactory.arithm(sumOrroot2_F16_5, ">=", 1);
		or1root2_F16_5.setName(Utilities.OR_TC);
		
		Constraint or0root2_F16_5 = IntConstraintFactory.arithm(sumOrroot2_F16_5, "=", 0);
		or0root2_F16_5.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root2_F16, or1root2_F16_5, or0root2_F16_5);
			
		Constraint mandatoryroot2_F16_root2_F68 = IntConstraintFactory.arithm(root2_F16, "=", root2_F68);
		mandatoryroot2_F16_root2_F68.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F16_root2_F68);
		Constraint mandatoryroot2_F16_root2_F69 = IntConstraintFactory.arithm(root2_F16, "=", root2_F69);
		mandatoryroot2_F16_root2_F69.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F16_root2_F69);
		Constraint mandatoryroot2_F16_root2_F70 = IntConstraintFactory.arithm(root2_F16, "=", root2_F70);
		mandatoryroot2_F16_root2_F70.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F16_root2_F70);
		Constraint mandatoryroot2_root_root2_F8 = IntConstraintFactory.arithm(root2_root, "=", root2_F8);
		mandatoryroot2_root_root2_F8.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_root_root2_F8);
		Constraint optionalroot2_F8_root2_F10 = IntConstraintFactory.arithm(root2_F10, "<=", root2_F8);
		optionalroot2_F8_root2_F10.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F8_root2_F10);
		Constraint mandatoryroot2_F10_root2_F46 = IntConstraintFactory.arithm(root2_F10, "=", root2_F46);
		mandatoryroot2_F10_root2_F46.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F10_root2_F46);
		Constraint mandatoryroot2_F10_root2_F47 = IntConstraintFactory.arithm(root2_F10, "=", root2_F47);
		mandatoryroot2_F10_root2_F47.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F10_root2_F47);
		Constraint optionalroot2_F47_root2_F79 = IntConstraintFactory.arithm(root2_F79, "<=", root2_F47);
		optionalroot2_F47_root2_F79.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F47_root2_F79);
		IntVar sumOrroot2_F10_2 = VariableFactory.enumerated("sumOrroot2_F10", 0, 3, solver); 
		BoolVar[] varsOrroot2_F10_2 = new BoolVar[3];
		varsOrroot2_F10_2[0] = root2_F48;
		varsOrroot2_F10_2[1] = root2_F49;
		varsOrroot2_F10_2[2] = root2_F50;
		solver.post(IntConstraintFactory.sum(varsOrroot2_F10_2, sumOrroot2_F10_2));
		Constraint or1root2_F10_2 = IntConstraintFactory.arithm(sumOrroot2_F10_2, ">=", 1);
		or1root2_F10_2.setName(Utilities.OR_TC);
		
		Constraint or0root2_F10_2 = IntConstraintFactory.arithm(sumOrroot2_F10_2, "=", 0);
		or0root2_F10_2.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root2_F10, or1root2_F10_2, or0root2_F10_2);
			
		Constraint mandatoryroot2_F10_root2_F51 = IntConstraintFactory.arithm(root2_F10, "=", root2_F51);
		mandatoryroot2_F10_root2_F51.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F10_root2_F51);
		Constraint mandatoryroot2_F10_root2_F52 = IntConstraintFactory.arithm(root2_F10, "=", root2_F52);
		mandatoryroot2_F10_root2_F52.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F10_root2_F52);
		Constraint optionalroot3_root_root3_F1 = IntConstraintFactory.arithm(root3_F1, "<=", root3_root);
		optionalroot3_root_root3_F1.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_root_root3_F1);
		Constraint mandatoryroot3_F1_root3_F9 = IntConstraintFactory.arithm(root3_F1, "=", root3_F9);
		mandatoryroot3_F1_root3_F9.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F1_root3_F9);
		Constraint optionalroot3_F9_root3_F34 = IntConstraintFactory.arithm(root3_F34, "<=", root3_F9);
		optionalroot3_F9_root3_F34.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F9_root3_F34);
		Constraint mandatoryroot3_F9_root3_F35 = IntConstraintFactory.arithm(root3_F9, "=", root3_F35);
		mandatoryroot3_F9_root3_F35.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F9_root3_F35);
		Constraint mandatoryroot3_F35_root3_F43 = IntConstraintFactory.arithm(root3_F35, "=", root3_F43);
		mandatoryroot3_F35_root3_F43.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F35_root3_F43);
		Constraint optionalroot3_F9_root3_F36 = IntConstraintFactory.arithm(root3_F36, "<=", root3_F9);
		optionalroot3_F9_root3_F36.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F9_root3_F36);
		IntVar sumOrroot3_F9_3 = VariableFactory.enumerated("sumOrroot3_F9", 0, 2, solver); 
		BoolVar[] varsOrroot3_F9_3 = new BoolVar[2];
		varsOrroot3_F9_3[0] = root3_F37;
		varsOrroot3_F9_3[1] = root3_F38;
		solver.post(IntConstraintFactory.sum(varsOrroot3_F9_3, sumOrroot3_F9_3));
		Constraint or1root3_F9_3 = IntConstraintFactory.arithm(sumOrroot3_F9_3, ">=", 1);
		or1root3_F9_3.setName(Utilities.OR_TC);
		
		Constraint or0root3_F9_3 = IntConstraintFactory.arithm(sumOrroot3_F9_3, "=", 0);
		or0root3_F9_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root3_F9, or1root3_F9_3, or0root3_F9_3);
			
		Constraint mandatoryroot3_F9_root3_F39 = IntConstraintFactory.arithm(root3_F9, "=", root3_F39);
		mandatoryroot3_F9_root3_F39.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F9_root3_F39);
		Constraint mandatoryroot3_F9_root3_F40 = IntConstraintFactory.arithm(root3_F9, "=", root3_F40);
		mandatoryroot3_F9_root3_F40.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F9_root3_F40);
		Constraint optionalroot3_F1_root3_F10 = IntConstraintFactory.arithm(root3_F10, "<=", root3_F1);
		optionalroot3_F1_root3_F10.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F1_root3_F10);
		Constraint optionalroot3_F10_root3_F32 = IntConstraintFactory.arithm(root3_F32, "<=", root3_F10);
		optionalroot3_F10_root3_F32.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F10_root3_F32);
		Constraint mandatoryroot3_F10_root3_F33 = IntConstraintFactory.arithm(root3_F10, "=", root3_F33);
		mandatoryroot3_F10_root3_F33.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F10_root3_F33);
		Constraint optionalroot3_F33_root3_F57 = IntConstraintFactory.arithm(root3_F57, "<=", root3_F33);
		optionalroot3_F33_root3_F57.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F33_root3_F57);
		Constraint optionalroot3_F33_root3_F58 = IntConstraintFactory.arithm(root3_F58, "<=", root3_F33);
		optionalroot3_F33_root3_F58.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F33_root3_F58);
		Constraint mandatoryroot3_F33_root3_F59 = IntConstraintFactory.arithm(root3_F33, "=", root3_F59);
		mandatoryroot3_F33_root3_F59.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F33_root3_F59);
		Constraint optionalroot3_F33_root3_F60 = IntConstraintFactory.arithm(root3_F60, "<=", root3_F33);
		optionalroot3_F33_root3_F60.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F33_root3_F60);
		IntVar sumOrroot3_F33_4 = VariableFactory.enumerated("sumOrroot3_F33", 0, 2, solver); 
		BoolVar[] varsOrroot3_F33_4 = new BoolVar[2];
		varsOrroot3_F33_4[0] = root3_F61;
		varsOrroot3_F33_4[1] = root3_F62;
		solver.post(IntConstraintFactory.sum(varsOrroot3_F33_4, sumOrroot3_F33_4));
		Constraint or1root3_F33_4 = IntConstraintFactory.arithm(sumOrroot3_F33_4, ">=", 1);
		or1root3_F33_4.setName(Utilities.OR_TC);
		
		Constraint or0root3_F33_4 = IntConstraintFactory.arithm(sumOrroot3_F33_4, "=", 0);
		or0root3_F33_4.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root3_F33, or1root3_F33_4, or0root3_F33_4);
			
		Constraint mandatoryroot3_F33_root3_F63 = IntConstraintFactory.arithm(root3_F33, "=", root3_F63);
		mandatoryroot3_F33_root3_F63.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F33_root3_F63);
		Constraint mandatoryroot3_F33_root3_F64 = IntConstraintFactory.arithm(root3_F33, "=", root3_F64);
		mandatoryroot3_F33_root3_F64.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F33_root3_F64);
		Constraint mandatoryroot3_F1_root3_F11 = IntConstraintFactory.arithm(root3_F1, "=", root3_F11);
		mandatoryroot3_F1_root3_F11.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F1_root3_F11);
		IntVar sumOrroot3_F1_3 = VariableFactory.enumerated("sumOrroot3_F1", 0, 2, solver); 
		BoolVar[] varsOrroot3_F1_3 = new BoolVar[2];
		varsOrroot3_F1_3[0] = root3_F12;
		varsOrroot3_F1_3[1] = root3_F13;
		solver.post(IntConstraintFactory.sum(varsOrroot3_F1_3, sumOrroot3_F1_3));
		Constraint or1root3_F1_3 = IntConstraintFactory.arithm(sumOrroot3_F1_3, ">=", 1);
		or1root3_F1_3.setName(Utilities.OR_TC);
		
		Constraint or0root3_F1_3 = IntConstraintFactory.arithm(sumOrroot3_F1_3, "=", 0);
		or0root3_F1_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root3_F1, or1root3_F1_3, or0root3_F1_3);
			
		Constraint mandatoryroot3_F12_root3_F16 = IntConstraintFactory.arithm(root3_F12, "=", root3_F16);
		mandatoryroot3_F12_root3_F16.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F12_root3_F16);
		Constraint optionalroot3_F12_root3_F17 = IntConstraintFactory.arithm(root3_F17, "<=", root3_F12);
		optionalroot3_F12_root3_F17.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F12_root3_F17);
		Constraint mandatoryroot3_F17_root3_F27 = IntConstraintFactory.arithm(root3_F17, "=", root3_F27);
		mandatoryroot3_F17_root3_F27.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F17_root3_F27);
		Constraint mandatoryroot3_F27_root3_F71 = IntConstraintFactory.arithm(root3_F27, "=", root3_F71);
		mandatoryroot3_F27_root3_F71.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F27_root3_F71);
		Constraint mandatoryroot3_F71_root3_F75 = IntConstraintFactory.arithm(root3_F71, "=", root3_F75);
		mandatoryroot3_F71_root3_F75.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F71_root3_F75);
		Constraint optionalroot3_F71_root3_F76 = IntConstraintFactory.arithm(root3_F76, "<=", root3_F71);
		optionalroot3_F71_root3_F76.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F71_root3_F76);
		IntVar sumOrroot3_F71_2 = VariableFactory.enumerated("sumOrroot3_F71", 0, 2, solver); 
		BoolVar[] varsOrroot3_F71_2 = new BoolVar[2];
		varsOrroot3_F71_2[0] = root3_F77;
		varsOrroot3_F71_2[1] = root3_F78;
		solver.post(IntConstraintFactory.sum(varsOrroot3_F71_2, sumOrroot3_F71_2));
		Constraint or1root3_F71_2 = IntConstraintFactory.arithm(sumOrroot3_F71_2, ">=", 1);
		or1root3_F71_2.setName(Utilities.OR_TC);
		
		Constraint or0root3_F71_2 = IntConstraintFactory.arithm(sumOrroot3_F71_2, "=", 0);
		or0root3_F71_2.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root3_F71, or1root3_F71_2, or0root3_F71_2);
			
		Constraint mandatoryroot3_F27_root3_F72 = IntConstraintFactory.arithm(root3_F27, "=", root3_F72);
		mandatoryroot3_F27_root3_F72.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F27_root3_F72);
		Constraint optionalroot3_F27_root3_F73 = IntConstraintFactory.arithm(root3_F73, "<=", root3_F27);
		optionalroot3_F27_root3_F73.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F27_root3_F73);
		Constraint optionalroot3_F17_root3_F28 = IntConstraintFactory.arithm(root3_F28, "<=", root3_F17);
		optionalroot3_F17_root3_F28.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F17_root3_F28);
		Constraint optionalroot3_F17_root3_F29 = IntConstraintFactory.arithm(root3_F29, "<=", root3_F17);
		optionalroot3_F17_root3_F29.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F17_root3_F29);
		Constraint optionalroot3_F29_root3_F67 = IntConstraintFactory.arithm(root3_F67, "<=", root3_F29);
		optionalroot3_F29_root3_F67.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F29_root3_F67);
		Constraint optionalroot3_F29_root3_F68 = IntConstraintFactory.arithm(root3_F68, "<=", root3_F29);
		optionalroot3_F29_root3_F68.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F29_root3_F68);
		IntVar sumOrroot3_F17_3 = VariableFactory.enumerated("sumOrroot3_F17", 0, 2, solver); 
		BoolVar[] varsOrroot3_F17_3 = new BoolVar[2];
		varsOrroot3_F17_3[0] = root3_F30;
		varsOrroot3_F17_3[1] = root3_F31;
		solver.post(IntConstraintFactory.sum(varsOrroot3_F17_3, sumOrroot3_F17_3));
		Constraint or1root3_F17_3 = IntConstraintFactory.arithm(sumOrroot3_F17_3, ">=", 1);
		or1root3_F17_3.setName(Utilities.OR_TC);
		
		Constraint or0root3_F17_3 = IntConstraintFactory.arithm(sumOrroot3_F17_3, "=", 0);
		or0root3_F17_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root3_F17, or1root3_F17_3, or0root3_F17_3);
			
		IntVar sumOrroot3_F12_2 = VariableFactory.enumerated("sumOrroot3_F12", 0, 2, solver); 
		BoolVar[] varsOrroot3_F12_2 = new BoolVar[2];
		varsOrroot3_F12_2[0] = root3_F18;
		varsOrroot3_F12_2[1] = root3_F19;
		solver.post(IntConstraintFactory.sum(varsOrroot3_F12_2, sumOrroot3_F12_2));
		Constraint or1root3_F12_2 = IntConstraintFactory.arithm(sumOrroot3_F12_2, ">=", 1);
		or1root3_F12_2.setName(Utilities.OR_TC);
		
		Constraint or0root3_F12_2 = IntConstraintFactory.arithm(sumOrroot3_F12_2, "=", 0);
		or0root3_F12_2.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root3_F12, or1root3_F12_2, or0root3_F12_2);
			
		Constraint mandatoryroot3_F12_root3_F20 = IntConstraintFactory.arithm(root3_F12, "=", root3_F20);
		mandatoryroot3_F12_root3_F20.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F12_root3_F20);
		Constraint mandatoryroot3_F20_root3_F22 = IntConstraintFactory.arithm(root3_F20, "=", root3_F22);
		mandatoryroot3_F20_root3_F22.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F20_root3_F22);
		IntVar sumOrroot3_F20_1 = VariableFactory.enumerated("sumOrroot3_F20", 0, 2, solver); 
		BoolVar[] varsOrroot3_F20_1 = new BoolVar[2];
		varsOrroot3_F20_1[0] = root3_F23;
		varsOrroot3_F20_1[1] = root3_F24;
		solver.post(IntConstraintFactory.sum(varsOrroot3_F20_1, sumOrroot3_F20_1));
		Constraint or1root3_F20_1 = IntConstraintFactory.arithm(sumOrroot3_F20_1, ">=", 1);
		or1root3_F20_1.setName(Utilities.OR_TC);
		
		Constraint or0root3_F20_1 = IntConstraintFactory.arithm(sumOrroot3_F20_1, "=", 0);
		or0root3_F20_1.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root3_F20, or1root3_F20_1, or0root3_F20_1);
			
		Constraint optionalroot3_F24_root3_F25 = IntConstraintFactory.arithm(root3_F25, "<=", root3_F24);
		optionalroot3_F24_root3_F25.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F24_root3_F25);
		Constraint optionalroot3_F24_root3_F26 = IntConstraintFactory.arithm(root3_F26, "<=", root3_F24);
		optionalroot3_F24_root3_F26.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F24_root3_F26);
		Constraint mandatoryroot3_F12_root3_F21 = IntConstraintFactory.arithm(root3_F12, "=", root3_F21);
		mandatoryroot3_F12_root3_F21.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F12_root3_F21);
		Constraint mandatoryroot3_F1_root3_F14 = IntConstraintFactory.arithm(root3_F1, "=", root3_F14);
		mandatoryroot3_F1_root3_F14.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F1_root3_F14);
		Constraint mandatoryroot3_F1_root3_F15 = IntConstraintFactory.arithm(root3_F1, "=", root3_F15);
		mandatoryroot3_F1_root3_F15.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F1_root3_F15);
		Constraint mandatoryroot3_root_root3_F2 = IntConstraintFactory.arithm(root3_root, "=", root3_F2);
		mandatoryroot3_root_root3_F2.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_root_root3_F2);
		Constraint optionalroot3_F2_root3_F69 = IntConstraintFactory.arithm(root3_F69, "<=", root3_F2);
		optionalroot3_F2_root3_F69.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F2_root3_F69);
		Constraint optionalroot3_F2_root3_F70 = IntConstraintFactory.arithm(root3_F70, "<=", root3_F2);
		optionalroot3_F2_root3_F70.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F2_root3_F70);
		Constraint optionalroot3_root_root3_F3 = IntConstraintFactory.arithm(root3_F3, "<=", root3_root);
		optionalroot3_root_root3_F3.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_root_root3_F3);
		Constraint mandatoryroot3_F3_root3_F41 = IntConstraintFactory.arithm(root3_F3, "=", root3_F41);
		mandatoryroot3_F3_root3_F41.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F3_root3_F41);
		Constraint mandatoryroot3_F3_root3_F42 = IntConstraintFactory.arithm(root3_F3, "=", root3_F42);
		mandatoryroot3_F3_root3_F42.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F3_root3_F42);
		Constraint mandatoryroot3_root_root3_F4 = IntConstraintFactory.arithm(root3_root, "=", root3_F4);
		mandatoryroot3_root_root3_F4.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_root_root3_F4);
		Constraint optionalroot3_root_root3_F5 = IntConstraintFactory.arithm(root3_F5, "<=", root3_root);
		optionalroot3_root_root3_F5.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_root_root3_F5);
		Constraint mandatoryroot3_root_root3_F6 = IntConstraintFactory.arithm(root3_root, "=", root3_F6);
		mandatoryroot3_root_root3_F6.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_root_root3_F6);
		Constraint mandatoryroot3_root_root3_F7 = IntConstraintFactory.arithm(root3_root, "=", root3_F7);
		mandatoryroot3_root_root3_F7.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_root_root3_F7);
		Constraint mandatoryroot3_root_root3_F8 = IntConstraintFactory.arithm(root3_root, "=", root3_F8);
		mandatoryroot3_root_root3_F8.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_root_root3_F8);
		Constraint mandatoryroot3_F8_root3_F44 = IntConstraintFactory.arithm(root3_F8, "=", root3_F44);
		mandatoryroot3_F8_root3_F44.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F8_root3_F44);
		Constraint mandatoryroot3_F44_root3_F49 = IntConstraintFactory.arithm(root3_F44, "=", root3_F49);
		mandatoryroot3_F44_root3_F49.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F44_root3_F49);
		Constraint optionalroot3_F44_root3_F50 = IntConstraintFactory.arithm(root3_F50, "<=", root3_F44);
		optionalroot3_F44_root3_F50.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F44_root3_F50);
		Constraint optionalroot3_F44_root3_F51 = IntConstraintFactory.arithm(root3_F51, "<=", root3_F44);
		optionalroot3_F44_root3_F51.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F44_root3_F51);
		Constraint optionalroot3_F51_root3_F56 = IntConstraintFactory.arithm(root3_F56, "<=", root3_F51);
		optionalroot3_F51_root3_F56.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F51_root3_F56);
		IntVar sumOrroot3_F44_3 = VariableFactory.enumerated("sumOrroot3_F44", 0, 2, solver); 
		BoolVar[] varsOrroot3_F44_3 = new BoolVar[2];
		varsOrroot3_F44_3[0] = root3_F52;
		varsOrroot3_F44_3[1] = root3_F53;
		solver.post(IntConstraintFactory.sum(varsOrroot3_F44_3, sumOrroot3_F44_3));
		Constraint or1root3_F44_3 = IntConstraintFactory.arithm(sumOrroot3_F44_3, ">=", 1);
		or1root3_F44_3.setName(Utilities.OR_TC);
		
		Constraint or0root3_F44_3 = IntConstraintFactory.arithm(sumOrroot3_F44_3, "=", 0);
		or0root3_F44_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root3_F44, or1root3_F44_3, or0root3_F44_3);
			
		Constraint mandatoryroot3_F52_root3_F74 = IntConstraintFactory.arithm(root3_F52, "=", root3_F74);
		mandatoryroot3_F52_root3_F74.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F52_root3_F74);
		Constraint mandatoryroot3_F44_root3_F54 = IntConstraintFactory.arithm(root3_F44, "=", root3_F54);
		mandatoryroot3_F44_root3_F54.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F44_root3_F54);
		Constraint optionalroot3_F54_root3_F65 = IntConstraintFactory.arithm(root3_F65, "<=", root3_F54);
		optionalroot3_F54_root3_F65.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F54_root3_F65);
		Constraint mandatoryroot3_F54_root3_F66 = IntConstraintFactory.arithm(root3_F54, "=", root3_F66);
		mandatoryroot3_F54_root3_F66.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F54_root3_F66);
		Constraint optionalroot3_F66_root3_F79 = IntConstraintFactory.arithm(root3_F79, "<=", root3_F66);
		optionalroot3_F66_root3_F79.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F66_root3_F79);
		Constraint mandatoryroot3_F44_root3_F55 = IntConstraintFactory.arithm(root3_F44, "=", root3_F55);
		mandatoryroot3_F44_root3_F55.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F44_root3_F55);
		Constraint mandatoryroot3_F8_root3_F45 = IntConstraintFactory.arithm(root3_F8, "=", root3_F45);
		mandatoryroot3_F8_root3_F45.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F8_root3_F45);
		Constraint mandatoryroot3_F8_root3_F46 = IntConstraintFactory.arithm(root3_F8, "=", root3_F46);
		mandatoryroot3_F8_root3_F46.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F8_root3_F46);
		Constraint mandatoryroot3_F8_root3_F47 = IntConstraintFactory.arithm(root3_F8, "=", root3_F47);
		mandatoryroot3_F8_root3_F47.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F8_root3_F47);
		Constraint mandatoryroot3_F8_root3_F48 = IntConstraintFactory.arithm(root3_F8, "=", root3_F48);
		mandatoryroot3_F8_root3_F48.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F8_root3_F48);
		Constraint optionalroot4_root_root4_F1 = IntConstraintFactory.arithm(root4_F1, "<=", root4_root);
		optionalroot4_root_root4_F1.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_root_root4_F1);
		Constraint optionalroot4_root_root4_F2 = IntConstraintFactory.arithm(root4_F2, "<=", root4_root);
		optionalroot4_root_root4_F2.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_root_root4_F2);
		Constraint mandatoryroot4_F2_root4_F31 = IntConstraintFactory.arithm(root4_F2, "=", root4_F31);
		mandatoryroot4_F2_root4_F31.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F2_root4_F31);
		Constraint mandatoryroot4_root_root4_F3 = IntConstraintFactory.arithm(root4_root, "=", root4_F3);
		mandatoryroot4_root_root4_F3.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_root_root4_F3);
		Constraint mandatoryroot4_F3_root4_F7 = IntConstraintFactory.arithm(root4_F3, "=", root4_F7);
		mandatoryroot4_F3_root4_F7.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F3_root4_F7);
		Constraint mandatoryroot4_F3_root4_F8 = IntConstraintFactory.arithm(root4_F3, "=", root4_F8);
		mandatoryroot4_F3_root4_F8.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F3_root4_F8);
		Constraint optionalroot4_F8_root4_F21 = IntConstraintFactory.arithm(root4_F21, "<=", root4_F8);
		optionalroot4_F8_root4_F21.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F8_root4_F21);
		Constraint mandatoryroot4_F8_root4_F22 = IntConstraintFactory.arithm(root4_F8, "=", root4_F22);
		mandatoryroot4_F8_root4_F22.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F8_root4_F22);
		Constraint mandatoryroot4_F8_root4_F23 = IntConstraintFactory.arithm(root4_F8, "=", root4_F23);
		mandatoryroot4_F8_root4_F23.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F8_root4_F23);
		Constraint mandatoryroot4_F23_root4_F53 = IntConstraintFactory.arithm(root4_F23, "=", root4_F53);
		mandatoryroot4_F23_root4_F53.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F23_root4_F53);
		Constraint mandatoryroot4_F8_root4_F24 = IntConstraintFactory.arithm(root4_F8, "=", root4_F24);
		mandatoryroot4_F8_root4_F24.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F8_root4_F24);
		Constraint optionalroot4_F24_root4_F41 = IntConstraintFactory.arithm(root4_F41, "<=", root4_F24);
		optionalroot4_F24_root4_F41.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F24_root4_F41);
		Constraint optionalroot4_F24_root4_F42 = IntConstraintFactory.arithm(root4_F42, "<=", root4_F24);
		optionalroot4_F24_root4_F42.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F24_root4_F42);
		IntVar sumOrroot4_F24_2 = VariableFactory.enumerated("sumOrroot4_F24", 0, 3, solver); 
		BoolVar[] varsOrroot4_F24_2 = new BoolVar[3];
		varsOrroot4_F24_2[0] = root4_F43;
		varsOrroot4_F24_2[1] = root4_F44;
		varsOrroot4_F24_2[2] = root4_F45;
		solver.post(IntConstraintFactory.sum(varsOrroot4_F24_2, sumOrroot4_F24_2));
		Constraint or1root4_F24_2 = IntConstraintFactory.arithm(sumOrroot4_F24_2, ">=", 1);
		or1root4_F24_2.setName(Utilities.OR_TC);
		
		Constraint or0root4_F24_2 = IntConstraintFactory.arithm(sumOrroot4_F24_2, "=", 0);
		or0root4_F24_2.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root4_F24, or1root4_F24_2, or0root4_F24_2);
			
		Constraint mandatoryroot4_F24_root4_F46 = IntConstraintFactory.arithm(root4_F24, "=", root4_F46);
		mandatoryroot4_F24_root4_F46.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F24_root4_F46);
		Constraint mandatoryroot4_F24_root4_F47 = IntConstraintFactory.arithm(root4_F24, "=", root4_F47);
		mandatoryroot4_F24_root4_F47.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F24_root4_F47);
		Constraint optionalroot4_F8_root4_F25 = IntConstraintFactory.arithm(root4_F25, "<=", root4_F8);
		optionalroot4_F8_root4_F25.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F8_root4_F25);
		Constraint mandatoryroot4_F25_root4_F32 = IntConstraintFactory.arithm(root4_F25, "=", root4_F32);
		mandatoryroot4_F25_root4_F32.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F25_root4_F32);
		Constraint optionalroot4_F25_root4_F33 = IntConstraintFactory.arithm(root4_F33, "<=", root4_F25);
		optionalroot4_F25_root4_F33.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F25_root4_F33);
		Constraint optionalroot4_F25_root4_F34 = IntConstraintFactory.arithm(root4_F34, "<=", root4_F25);
		optionalroot4_F25_root4_F34.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F25_root4_F34);
		Constraint mandatoryroot4_F25_root4_F35 = IntConstraintFactory.arithm(root4_F25, "=", root4_F35);
		mandatoryroot4_F25_root4_F35.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F25_root4_F35);
		Constraint mandatoryroot4_F25_root4_F36 = IntConstraintFactory.arithm(root4_F25, "=", root4_F36);
		mandatoryroot4_F25_root4_F36.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F25_root4_F36);
		Constraint mandatoryroot4_F25_root4_F37 = IntConstraintFactory.arithm(root4_F25, "=", root4_F37);
		mandatoryroot4_F25_root4_F37.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F25_root4_F37);
		Constraint mandatoryroot4_F25_root4_F38 = IntConstraintFactory.arithm(root4_F25, "=", root4_F38);
		mandatoryroot4_F25_root4_F38.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F25_root4_F38);
		Constraint mandatoryroot4_F25_root4_F39 = IntConstraintFactory.arithm(root4_F25, "=", root4_F39);
		mandatoryroot4_F25_root4_F39.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F25_root4_F39);
		Constraint mandatoryroot4_F25_root4_F40 = IntConstraintFactory.arithm(root4_F25, "=", root4_F40);
		mandatoryroot4_F25_root4_F40.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F25_root4_F40);
		IntVar sumOrroot4_F8_5 = VariableFactory.enumerated("sumOrroot4_F8", 0, 2, solver); 
		BoolVar[] varsOrroot4_F8_5 = new BoolVar[2];
		varsOrroot4_F8_5[0] = root4_F26;
		varsOrroot4_F8_5[1] = root4_F27;
		solver.post(IntConstraintFactory.sum(varsOrroot4_F8_5, sumOrroot4_F8_5));
		Constraint or1root4_F8_5 = IntConstraintFactory.arithm(sumOrroot4_F8_5, ">=", 1);
		or1root4_F8_5.setName(Utilities.OR_TC);
		
		Constraint or0root4_F8_5 = IntConstraintFactory.arithm(sumOrroot4_F8_5, "=", 0);
		or0root4_F8_5.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root4_F8, or1root4_F8_5, or0root4_F8_5);
			
		Constraint optionalroot4_F27_root4_F30 = IntConstraintFactory.arithm(root4_F30, "<=", root4_F27);
		optionalroot4_F27_root4_F30.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F27_root4_F30);
		Constraint mandatoryroot4_F30_root4_F50 = IntConstraintFactory.arithm(root4_F30, "=", root4_F50);
		mandatoryroot4_F30_root4_F50.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F30_root4_F50);
		Constraint mandatoryroot4_F30_root4_F51 = IntConstraintFactory.arithm(root4_F30, "=", root4_F51);
		mandatoryroot4_F30_root4_F51.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F30_root4_F51);
		Constraint mandatoryroot4_F30_root4_F52 = IntConstraintFactory.arithm(root4_F30, "=", root4_F52);
		mandatoryroot4_F30_root4_F52.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F30_root4_F52);
		Constraint mandatoryroot4_F8_root4_F28 = IntConstraintFactory.arithm(root4_F8, "=", root4_F28);
		mandatoryroot4_F8_root4_F28.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F8_root4_F28);
		Constraint mandatoryroot4_F8_root4_F29 = IntConstraintFactory.arithm(root4_F8, "=", root4_F29);
		mandatoryroot4_F8_root4_F29.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F8_root4_F29);
		Constraint mandatoryroot4_F3_root4_F9 = IntConstraintFactory.arithm(root4_F3, "=", root4_F9);
		mandatoryroot4_F3_root4_F9.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F3_root4_F9);
		IntVar sumOrroot4_F3_3 = VariableFactory.enumerated("sumOrroot4_F3", 0, 3, solver); 
		BoolVar[] varsOrroot4_F3_3 = new BoolVar[3];
		varsOrroot4_F3_3[0] = root4_F10;
		varsOrroot4_F3_3[1] = root4_F11;
		varsOrroot4_F3_3[2] = root4_F12;
		solver.post(IntConstraintFactory.sum(varsOrroot4_F3_3, sumOrroot4_F3_3));
		Constraint or1root4_F3_3 = IntConstraintFactory.arithm(sumOrroot4_F3_3, ">=", 1);
		or1root4_F3_3.setName(Utilities.OR_TC);
		
		Constraint or0root4_F3_3 = IntConstraintFactory.arithm(sumOrroot4_F3_3, "=", 0);
		or0root4_F3_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root4_F3, or1root4_F3_3, or0root4_F3_3);
			
		Constraint optionalroot4_F10_root4_F13 = IntConstraintFactory.arithm(root4_F13, "<=", root4_F10);
		optionalroot4_F10_root4_F13.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F10_root4_F13);
		Constraint optionalroot4_F10_root4_F14 = IntConstraintFactory.arithm(root4_F14, "<=", root4_F10);
		optionalroot4_F10_root4_F14.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F10_root4_F14);
		Constraint mandatoryroot4_F14_root4_F48 = IntConstraintFactory.arithm(root4_F14, "=", root4_F48);
		mandatoryroot4_F14_root4_F48.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F14_root4_F48);
		Constraint mandatoryroot4_F14_root4_F49 = IntConstraintFactory.arithm(root4_F14, "=", root4_F49);
		mandatoryroot4_F14_root4_F49.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F14_root4_F49);
		Constraint optionalroot4_F10_root4_F15 = IntConstraintFactory.arithm(root4_F15, "<=", root4_F10);
		optionalroot4_F10_root4_F15.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F10_root4_F15);
		Constraint mandatoryroot4_F10_root4_F16 = IntConstraintFactory.arithm(root4_F10, "=", root4_F16);
		mandatoryroot4_F10_root4_F16.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F10_root4_F16);
		IntVar sumOrroot4_F10_4 = VariableFactory.enumerated("sumOrroot4_F10", 0, 2, solver); 
		BoolVar[] varsOrroot4_F10_4 = new BoolVar[2];
		varsOrroot4_F10_4[0] = root4_F17;
		varsOrroot4_F10_4[1] = root4_F18;
		solver.post(IntConstraintFactory.sum(varsOrroot4_F10_4, sumOrroot4_F10_4));
		Constraint or1root4_F10_4 = IntConstraintFactory.arithm(sumOrroot4_F10_4, ">=", 1);
		or1root4_F10_4.setName(Utilities.OR_TC);
		
		Constraint or0root4_F10_4 = IntConstraintFactory.arithm(sumOrroot4_F10_4, "=", 0);
		or0root4_F10_4.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root4_F10, or1root4_F10_4, or0root4_F10_4);
			
		Constraint mandatoryroot4_F18_root4_F70 = IntConstraintFactory.arithm(root4_F18, "=", root4_F70);
		mandatoryroot4_F18_root4_F70.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F18_root4_F70);
		IntVar sumOrroot4_F10_5 = VariableFactory.enumerated("sumOrroot4_F10", 0, 2, solver); 
		BoolVar[] varsOrroot4_F10_5 = new BoolVar[2];
		varsOrroot4_F10_5[0] = root4_F19;
		varsOrroot4_F10_5[1] = root4_F20;
		solver.post(IntConstraintFactory.sum(varsOrroot4_F10_5, sumOrroot4_F10_5));
		Constraint or1root4_F10_5 = IntConstraintFactory.arithm(sumOrroot4_F10_5, ">=", 1);
		or1root4_F10_5.setName(Utilities.OR_TC);
		
		Constraint or0root4_F10_5 = IntConstraintFactory.arithm(sumOrroot4_F10_5, "=", 0);
		or0root4_F10_5.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root4_F10, or1root4_F10_5, or0root4_F10_5);
			
		Constraint mandatoryroot4_root_root4_F4 = IntConstraintFactory.arithm(root4_root, "=", root4_F4);
		mandatoryroot4_root_root4_F4.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_root_root4_F4);
		Constraint optionalroot4_root_root4_F5 = IntConstraintFactory.arithm(root4_F5, "<=", root4_root);
		optionalroot4_root_root4_F5.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_root_root4_F5);
		Constraint mandatoryroot4_F5_root4_F54 = IntConstraintFactory.arithm(root4_F5, "=", root4_F54);
		mandatoryroot4_F5_root4_F54.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F5_root4_F54);
		Constraint mandatoryroot4_F54_root4_F61 = IntConstraintFactory.arithm(root4_F54, "=", root4_F61);
		mandatoryroot4_F54_root4_F61.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F54_root4_F61);
		Constraint mandatoryroot4_F61_root4_F62 = IntConstraintFactory.arithm(root4_F61, "=", root4_F62);
		mandatoryroot4_F61_root4_F62.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F61_root4_F62);
		Constraint mandatoryroot4_F61_root4_F63 = IntConstraintFactory.arithm(root4_F61, "=", root4_F63);
		mandatoryroot4_F61_root4_F63.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F61_root4_F63);
		Constraint optionalroot4_F61_root4_F64 = IntConstraintFactory.arithm(root4_F64, "<=", root4_F61);
		optionalroot4_F61_root4_F64.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F61_root4_F64);
		IntVar sumOrroot4_F61_3 = VariableFactory.enumerated("sumOrroot4_F61", 0, 3, solver); 
		BoolVar[] varsOrroot4_F61_3 = new BoolVar[3];
		varsOrroot4_F61_3[0] = root4_F65;
		varsOrroot4_F61_3[1] = root4_F66;
		varsOrroot4_F61_3[2] = root4_F67;
		solver.post(IntConstraintFactory.sum(varsOrroot4_F61_3, sumOrroot4_F61_3));
		Constraint or1root4_F61_3 = IntConstraintFactory.arithm(sumOrroot4_F61_3, ">=", 1);
		or1root4_F61_3.setName(Utilities.OR_TC);
		
		Constraint or0root4_F61_3 = IntConstraintFactory.arithm(sumOrroot4_F61_3, "=", 0);
		or0root4_F61_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root4_F61, or1root4_F61_3, or0root4_F61_3);
			
		Constraint mandatoryroot4_F61_root4_F68 = IntConstraintFactory.arithm(root4_F61, "=", root4_F68);
		mandatoryroot4_F61_root4_F68.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F61_root4_F68);
		Constraint mandatoryroot4_F61_root4_F69 = IntConstraintFactory.arithm(root4_F61, "=", root4_F69);
		mandatoryroot4_F61_root4_F69.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F61_root4_F69);
		IntVar sumOrroot4_F5_1 = VariableFactory.enumerated("sumOrroot4_F5", 0, 2, solver); 
		BoolVar[] varsOrroot4_F5_1 = new BoolVar[2];
		varsOrroot4_F5_1[0] = root4_F55;
		varsOrroot4_F5_1[1] = root4_F56;
		solver.post(IntConstraintFactory.sum(varsOrroot4_F5_1, sumOrroot4_F5_1));
		Constraint or1root4_F5_1 = IntConstraintFactory.arithm(sumOrroot4_F5_1, ">=", 1);
		or1root4_F5_1.setName(Utilities.OR_TC);
		
		Constraint or0root4_F5_1 = IntConstraintFactory.arithm(sumOrroot4_F5_1, "=", 0);
		or0root4_F5_1.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root4_F5, or1root4_F5_1, or0root4_F5_1);
			
		IntVar sumOrroot4_F5_2 = VariableFactory.enumerated("sumOrroot4_F5", 0, 2, solver); 
		BoolVar[] varsOrroot4_F5_2 = new BoolVar[2];
		varsOrroot4_F5_2[0] = root4_F57;
		varsOrroot4_F5_2[1] = root4_F58;
		solver.post(IntConstraintFactory.sum(varsOrroot4_F5_2, sumOrroot4_F5_2));
		Constraint or1root4_F5_2 = IntConstraintFactory.arithm(sumOrroot4_F5_2, ">=", 1);
		or1root4_F5_2.setName(Utilities.OR_TC);
		
		Constraint or0root4_F5_2 = IntConstraintFactory.arithm(sumOrroot4_F5_2, "=", 0);
		or0root4_F5_2.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root4_F5, or1root4_F5_2, or0root4_F5_2);
			
		Constraint mandatoryroot4_F5_root4_F59 = IntConstraintFactory.arithm(root4_F5, "=", root4_F59);
		mandatoryroot4_F5_root4_F59.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F5_root4_F59);
		Constraint mandatoryroot4_F5_root4_F60 = IntConstraintFactory.arithm(root4_F5, "=", root4_F60);
		mandatoryroot4_F5_root4_F60.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F5_root4_F60);
		Constraint mandatoryroot4_root_root4_F6 = IntConstraintFactory.arithm(root4_root, "=", root4_F6);
		mandatoryroot4_root_root4_F6.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_root_root4_F6);
		Constraint mandatoryroot4_F6_root4_F71 = IntConstraintFactory.arithm(root4_F6, "=", root4_F71);
		mandatoryroot4_F6_root4_F71.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F6_root4_F71);
		Constraint mandatoryroot4_F6_root4_F72 = IntConstraintFactory.arithm(root4_F6, "=", root4_F72);
		mandatoryroot4_F6_root4_F72.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F6_root4_F72);
		IntVar sumOrroot4_F6_2 = VariableFactory.enumerated("sumOrroot4_F6", 0, 2, solver); 
		BoolVar[] varsOrroot4_F6_2 = new BoolVar[2];
		varsOrroot4_F6_2[0] = root4_F73;
		varsOrroot4_F6_2[1] = root4_F74;
		solver.post(IntConstraintFactory.sum(varsOrroot4_F6_2, sumOrroot4_F6_2));
		Constraint or1root4_F6_2 = IntConstraintFactory.arithm(sumOrroot4_F6_2, ">=", 1);
		or1root4_F6_2.setName(Utilities.OR_TC);
		
		Constraint or0root4_F6_2 = IntConstraintFactory.arithm(sumOrroot4_F6_2, "=", 0);
		or0root4_F6_2.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root4_F6, or1root4_F6_2, or0root4_F6_2);
			
		IntVar sumOrroot4_F6_3 = VariableFactory.enumerated("sumOrroot4_F6", 0, 2, solver); 
		BoolVar[] varsOrroot4_F6_3 = new BoolVar[2];
		varsOrroot4_F6_3[0] = root4_F75;
		varsOrroot4_F6_3[1] = root4_F76;
		solver.post(IntConstraintFactory.sum(varsOrroot4_F6_3, sumOrroot4_F6_3));
		Constraint or1root4_F6_3 = IntConstraintFactory.arithm(sumOrroot4_F6_3, ">=", 1);
		or1root4_F6_3.setName(Utilities.OR_TC);
		
		Constraint or0root4_F6_3 = IntConstraintFactory.arithm(sumOrroot4_F6_3, "=", 0);
		or0root4_F6_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root4_F6, or1root4_F6_3, or0root4_F6_3);
			
		Constraint mandatoryroot4_F6_root4_F77 = IntConstraintFactory.arithm(root4_F6, "=", root4_F77);
		mandatoryroot4_F6_root4_F77.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F6_root4_F77);
		Constraint mandatoryroot4_F6_root4_F78 = IntConstraintFactory.arithm(root4_F6, "=", root4_F78);
		mandatoryroot4_F6_root4_F78.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F6_root4_F78);
		Constraint mandatoryroot4_F6_root4_F79 = IntConstraintFactory.arithm(root4_F6, "=", root4_F79);
		mandatoryroot4_F6_root4_F79.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F6_root4_F79);
		Constraint optionalroot5_root_root5_F1 = IntConstraintFactory.arithm(root5_F1, "<=", root5_root);
		optionalroot5_root_root5_F1.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_root_root5_F1);
		Constraint optionalroot5_root_root5_F2 = IntConstraintFactory.arithm(root5_F2, "<=", root5_root);
		optionalroot5_root_root5_F2.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_root_root5_F2);
		Constraint mandatoryroot5_F2_root5_F3 = IntConstraintFactory.arithm(root5_F2, "=", root5_F3);
		mandatoryroot5_F2_root5_F3.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F2_root5_F3);
		Constraint optionalroot5_F3_root5_F4 = IntConstraintFactory.arithm(root5_F4, "<=", root5_F3);
		optionalroot5_F3_root5_F4.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_F3_root5_F4);
		Constraint mandatoryroot5_F4_root5_F39 = IntConstraintFactory.arithm(root5_F4, "=", root5_F39);
		mandatoryroot5_F4_root5_F39.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F4_root5_F39);
		Constraint mandatoryroot5_F39_root5_F43 = IntConstraintFactory.arithm(root5_F39, "=", root5_F43);
		mandatoryroot5_F39_root5_F43.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F39_root5_F43);
		Constraint mandatoryroot5_F39_root5_F44 = IntConstraintFactory.arithm(root5_F39, "=", root5_F44);
		mandatoryroot5_F39_root5_F44.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F39_root5_F44);
		Constraint mandatoryroot5_F39_root5_F45 = IntConstraintFactory.arithm(root5_F39, "=", root5_F45);
		mandatoryroot5_F39_root5_F45.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F39_root5_F45);
		Constraint mandatoryroot5_F39_root5_F46 = IntConstraintFactory.arithm(root5_F39, "=", root5_F46);
		mandatoryroot5_F39_root5_F46.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F39_root5_F46);
		Constraint optionalroot5_F39_root5_F47 = IntConstraintFactory.arithm(root5_F47, "<=", root5_F39);
		optionalroot5_F39_root5_F47.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_F39_root5_F47);
		Constraint mandatoryroot5_F39_root5_F48 = IntConstraintFactory.arithm(root5_F39, "=", root5_F48);
		mandatoryroot5_F39_root5_F48.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F39_root5_F48);
		Constraint mandatoryroot5_F39_root5_F49 = IntConstraintFactory.arithm(root5_F39, "=", root5_F49);
		mandatoryroot5_F39_root5_F49.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F39_root5_F49);
		Constraint optionalroot5_F4_root5_F40 = IntConstraintFactory.arithm(root5_F40, "<=", root5_F4);
		optionalroot5_F4_root5_F40.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_F4_root5_F40);
		IntVar sumOrroot5_F4_2 = VariableFactory.enumerated("sumOrroot5_F4", 0, 2, solver); 
		BoolVar[] varsOrroot5_F4_2 = new BoolVar[2];
		varsOrroot5_F4_2[0] = root5_F41;
		varsOrroot5_F4_2[1] = root5_F42;
		solver.post(IntConstraintFactory.sum(varsOrroot5_F4_2, sumOrroot5_F4_2));
		Constraint or1root5_F4_2 = IntConstraintFactory.arithm(sumOrroot5_F4_2, ">=", 1);
		or1root5_F4_2.setName(Utilities.OR_TC);
		
		Constraint or0root5_F4_2 = IntConstraintFactory.arithm(sumOrroot5_F4_2, "=", 0);
		or0root5_F4_2.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root5_F4, or1root5_F4_2, or0root5_F4_2);
			
		Constraint mandatoryroot5_F42_root5_F62 = IntConstraintFactory.arithm(root5_F42, "=", root5_F62);
		mandatoryroot5_F42_root5_F62.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F42_root5_F62);
		Constraint optionalroot5_F42_root5_F63 = IntConstraintFactory.arithm(root5_F63, "<=", root5_F42);
		optionalroot5_F42_root5_F63.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_F42_root5_F63);
		Constraint optionalroot5_F3_root5_F5 = IntConstraintFactory.arithm(root5_F5, "<=", root5_F3);
		optionalroot5_F3_root5_F5.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_F3_root5_F5);
		Constraint optionalroot5_F3_root5_F6 = IntConstraintFactory.arithm(root5_F6, "<=", root5_F3);
		optionalroot5_F3_root5_F6.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_F3_root5_F6);
		Constraint optionalroot5_F6_root5_F21 = IntConstraintFactory.arithm(root5_F21, "<=", root5_F6);
		optionalroot5_F6_root5_F21.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_F6_root5_F21);
		Constraint optionalroot5_F6_root5_F22 = IntConstraintFactory.arithm(root5_F22, "<=", root5_F6);
		optionalroot5_F6_root5_F22.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_F6_root5_F22);
		Constraint optionalroot5_F22_root5_F27 = IntConstraintFactory.arithm(root5_F27, "<=", root5_F22);
		optionalroot5_F22_root5_F27.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_F22_root5_F27);
		Constraint optionalroot5_F27_root5_F50 = IntConstraintFactory.arithm(root5_F50, "<=", root5_F27);
		optionalroot5_F27_root5_F50.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_F27_root5_F50);
		Constraint optionalroot5_F27_root5_F51 = IntConstraintFactory.arithm(root5_F51, "<=", root5_F27);
		optionalroot5_F27_root5_F51.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_F27_root5_F51);
		IntVar sumOrroot5_F27_2 = VariableFactory.enumerated("sumOrroot5_F27", 0, 2, solver); 
		BoolVar[] varsOrroot5_F27_2 = new BoolVar[2];
		varsOrroot5_F27_2[0] = root5_F52;
		varsOrroot5_F27_2[1] = root5_F53;
		solver.post(IntConstraintFactory.sum(varsOrroot5_F27_2, sumOrroot5_F27_2));
		Constraint or1root5_F27_2 = IntConstraintFactory.arithm(sumOrroot5_F27_2, ">=", 1);
		or1root5_F27_2.setName(Utilities.OR_TC);
		
		Constraint or0root5_F27_2 = IntConstraintFactory.arithm(sumOrroot5_F27_2, "=", 0);
		or0root5_F27_2.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root5_F27, or1root5_F27_2, or0root5_F27_2);
			
		Constraint optionalroot5_F22_root5_F28 = IntConstraintFactory.arithm(root5_F28, "<=", root5_F22);
		optionalroot5_F22_root5_F28.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_F22_root5_F28);
		Constraint optionalroot5_F22_root5_F29 = IntConstraintFactory.arithm(root5_F29, "<=", root5_F22);
		optionalroot5_F22_root5_F29.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_F22_root5_F29);
		Constraint mandatoryroot5_F6_root5_F23 = IntConstraintFactory.arithm(root5_F6, "=", root5_F23);
		mandatoryroot5_F6_root5_F23.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F6_root5_F23);
		Constraint mandatoryroot5_F6_root5_F24 = IntConstraintFactory.arithm(root5_F6, "=", root5_F24);
		mandatoryroot5_F6_root5_F24.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F6_root5_F24);
		Constraint mandatoryroot5_F6_root5_F25 = IntConstraintFactory.arithm(root5_F6, "=", root5_F25);
		mandatoryroot5_F6_root5_F25.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F6_root5_F25);
		Constraint optionalroot5_F3_root5_F7 = IntConstraintFactory.arithm(root5_F7, "<=", root5_F3);
		optionalroot5_F3_root5_F7.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_F3_root5_F7);
		Constraint optionalroot5_F7_root5_F14 = IntConstraintFactory.arithm(root5_F14, "<=", root5_F7);
		optionalroot5_F7_root5_F14.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_F7_root5_F14);
		Constraint optionalroot5_F7_root5_F15 = IntConstraintFactory.arithm(root5_F15, "<=", root5_F7);
		optionalroot5_F7_root5_F15.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_F7_root5_F15);
		Constraint mandatoryroot5_F15_root5_F26 = IntConstraintFactory.arithm(root5_F15, "=", root5_F26);
		mandatoryroot5_F15_root5_F26.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F15_root5_F26);
		Constraint optionalroot5_F7_root5_F16 = IntConstraintFactory.arithm(root5_F16, "<=", root5_F7);
		optionalroot5_F7_root5_F16.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_F7_root5_F16);
		Constraint optionalroot5_F7_root5_F17 = IntConstraintFactory.arithm(root5_F17, "<=", root5_F7);
		optionalroot5_F7_root5_F17.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_F7_root5_F17);
		Constraint optionalroot5_F17_root5_F31 = IntConstraintFactory.arithm(root5_F31, "<=", root5_F17);
		optionalroot5_F17_root5_F31.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_F17_root5_F31);
		Constraint mandatoryroot5_F17_root5_F32 = IntConstraintFactory.arithm(root5_F17, "=", root5_F32);
		mandatoryroot5_F17_root5_F32.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F17_root5_F32);
		Constraint optionalroot5_F17_root5_F33 = IntConstraintFactory.arithm(root5_F33, "<=", root5_F17);
		optionalroot5_F17_root5_F33.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_F17_root5_F33);
		Constraint mandatoryroot5_F17_root5_F34 = IntConstraintFactory.arithm(root5_F17, "=", root5_F34);
		mandatoryroot5_F17_root5_F34.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F17_root5_F34);
		Constraint optionalroot5_F17_root5_F35 = IntConstraintFactory.arithm(root5_F35, "<=", root5_F17);
		optionalroot5_F17_root5_F35.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_F17_root5_F35);
		Constraint mandatoryroot5_F17_root5_F36 = IntConstraintFactory.arithm(root5_F17, "=", root5_F36);
		mandatoryroot5_F17_root5_F36.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F17_root5_F36);
		IntVar sumOrroot5_F17_6 = VariableFactory.enumerated("sumOrroot5_F17", 0, 2, solver); 
		BoolVar[] varsOrroot5_F17_6 = new BoolVar[2];
		varsOrroot5_F17_6[0] = root5_F37;
		varsOrroot5_F17_6[1] = root5_F38;
		solver.post(IntConstraintFactory.sum(varsOrroot5_F17_6, sumOrroot5_F17_6));
		Constraint or1root5_F17_6 = IntConstraintFactory.arithm(sumOrroot5_F17_6, ">=", 1);
		or1root5_F17_6.setName(Utilities.OR_TC);
		
		Constraint or0root5_F17_6 = IntConstraintFactory.arithm(sumOrroot5_F17_6, "=", 0);
		or0root5_F17_6.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root5_F17, or1root5_F17_6, or0root5_F17_6);
			
		Constraint mandatoryroot5_F7_root5_F18 = IntConstraintFactory.arithm(root5_F7, "=", root5_F18);
		mandatoryroot5_F7_root5_F18.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F7_root5_F18);
		Constraint mandatoryroot5_F18_root5_F64 = IntConstraintFactory.arithm(root5_F18, "=", root5_F64);
		mandatoryroot5_F18_root5_F64.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F18_root5_F64);
		Constraint mandatoryroot5_F18_root5_F65 = IntConstraintFactory.arithm(root5_F18, "=", root5_F65);
		mandatoryroot5_F18_root5_F65.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F18_root5_F65);
		Constraint optionalroot5_F18_root5_F66 = IntConstraintFactory.arithm(root5_F66, "<=", root5_F18);
		optionalroot5_F18_root5_F66.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_F18_root5_F66);
		Constraint mandatoryroot5_F18_root5_F67 = IntConstraintFactory.arithm(root5_F18, "=", root5_F67);
		mandatoryroot5_F18_root5_F67.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F18_root5_F67);
		Constraint mandatoryroot5_F18_root5_F68 = IntConstraintFactory.arithm(root5_F18, "=", root5_F68);
		mandatoryroot5_F18_root5_F68.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F18_root5_F68);
		Constraint mandatoryroot5_F18_root5_F69 = IntConstraintFactory.arithm(root5_F18, "=", root5_F69);
		mandatoryroot5_F18_root5_F69.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F18_root5_F69);
		Constraint mandatoryroot5_F18_root5_F70 = IntConstraintFactory.arithm(root5_F18, "=", root5_F70);
		mandatoryroot5_F18_root5_F70.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F18_root5_F70);
		Constraint mandatoryroot5_F7_root5_F19 = IntConstraintFactory.arithm(root5_F7, "=", root5_F19);
		mandatoryroot5_F7_root5_F19.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F7_root5_F19);
		Constraint mandatoryroot5_F7_root5_F20 = IntConstraintFactory.arithm(root5_F7, "=", root5_F20);
		mandatoryroot5_F7_root5_F20.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F7_root5_F20);
		IntVar sumOrroot5_F3_4 = VariableFactory.enumerated("sumOrroot5_F3", 0, 2, solver); 
		BoolVar[] varsOrroot5_F3_4 = new BoolVar[2];
		varsOrroot5_F3_4[0] = root5_F8;
		varsOrroot5_F3_4[1] = root5_F9;
		solver.post(IntConstraintFactory.sum(varsOrroot5_F3_4, sumOrroot5_F3_4));
		Constraint or1root5_F3_4 = IntConstraintFactory.arithm(sumOrroot5_F3_4, ">=", 1);
		or1root5_F3_4.setName(Utilities.OR_TC);
		
		Constraint or0root5_F3_4 = IntConstraintFactory.arithm(sumOrroot5_F3_4, "=", 0);
		or0root5_F3_4.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root5_F3, or1root5_F3_4, or0root5_F3_4);
			
		Constraint mandatoryroot5_F3_root5_F10 = IntConstraintFactory.arithm(root5_F3, "=", root5_F10);
		mandatoryroot5_F3_root5_F10.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F3_root5_F10);
		Constraint mandatoryroot5_F3_root5_F11 = IntConstraintFactory.arithm(root5_F3, "=", root5_F11);
		mandatoryroot5_F3_root5_F11.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F3_root5_F11);
		Constraint mandatoryroot5_F11_root5_F30 = IntConstraintFactory.arithm(root5_F11, "=", root5_F30);
		mandatoryroot5_F11_root5_F30.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F11_root5_F30);
		Constraint mandatoryroot5_F30_root5_F54 = IntConstraintFactory.arithm(root5_F30, "=", root5_F54);
		mandatoryroot5_F30_root5_F54.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F30_root5_F54);
		Constraint mandatoryroot5_F30_root5_F55 = IntConstraintFactory.arithm(root5_F30, "=", root5_F55);
		mandatoryroot5_F30_root5_F55.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F30_root5_F55);
		Constraint optionalroot5_F55_root5_F71 = IntConstraintFactory.arithm(root5_F71, "<=", root5_F55);
		optionalroot5_F55_root5_F71.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_F55_root5_F71);
		Constraint optionalroot5_F55_root5_F72 = IntConstraintFactory.arithm(root5_F72, "<=", root5_F55);
		optionalroot5_F55_root5_F72.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_F55_root5_F72);
		Constraint optionalroot5_F55_root5_F73 = IntConstraintFactory.arithm(root5_F73, "<=", root5_F55);
		optionalroot5_F55_root5_F73.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_F55_root5_F73);
		IntVar sumOrroot5_F55_3 = VariableFactory.enumerated("sumOrroot5_F55", 0, 2, solver); 
		BoolVar[] varsOrroot5_F55_3 = new BoolVar[2];
		varsOrroot5_F55_3[0] = root5_F74;
		varsOrroot5_F55_3[1] = root5_F75;
		solver.post(IntConstraintFactory.sum(varsOrroot5_F55_3, sumOrroot5_F55_3));
		Constraint or1root5_F55_3 = IntConstraintFactory.arithm(sumOrroot5_F55_3, ">=", 1);
		or1root5_F55_3.setName(Utilities.OR_TC);
		
		Constraint or0root5_F55_3 = IntConstraintFactory.arithm(sumOrroot5_F55_3, "=", 0);
		or0root5_F55_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root5_F55, or1root5_F55_3, or0root5_F55_3);
			
		IntVar sumOrroot5_F55_4 = VariableFactory.enumerated("sumOrroot5_F55", 0, 2, solver); 
		BoolVar[] varsOrroot5_F55_4 = new BoolVar[2];
		varsOrroot5_F55_4[0] = root5_F76;
		varsOrroot5_F55_4[1] = root5_F77;
		solver.post(IntConstraintFactory.sum(varsOrroot5_F55_4, sumOrroot5_F55_4));
		Constraint or1root5_F55_4 = IntConstraintFactory.arithm(sumOrroot5_F55_4, ">=", 1);
		or1root5_F55_4.setName(Utilities.OR_TC);
		
		Constraint or0root5_F55_4 = IntConstraintFactory.arithm(sumOrroot5_F55_4, "=", 0);
		or0root5_F55_4.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root5_F55, or1root5_F55_4, or0root5_F55_4);
			
		Constraint mandatoryroot5_F55_root5_F78 = IntConstraintFactory.arithm(root5_F55, "=", root5_F78);
		mandatoryroot5_F55_root5_F78.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F55_root5_F78);
		Constraint mandatoryroot5_F55_root5_F79 = IntConstraintFactory.arithm(root5_F55, "=", root5_F79);
		mandatoryroot5_F55_root5_F79.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F55_root5_F79);
		Constraint mandatoryroot5_F30_root5_F56 = IntConstraintFactory.arithm(root5_F30, "=", root5_F56);
		mandatoryroot5_F30_root5_F56.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F30_root5_F56);
		Constraint optionalroot5_F30_root5_F57 = IntConstraintFactory.arithm(root5_F57, "<=", root5_F30);
		optionalroot5_F30_root5_F57.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_F30_root5_F57);
		IntVar sumOrroot5_F30_4 = VariableFactory.enumerated("sumOrroot5_F30", 0, 2, solver); 
		BoolVar[] varsOrroot5_F30_4 = new BoolVar[2];
		varsOrroot5_F30_4[0] = root5_F58;
		varsOrroot5_F30_4[1] = root5_F59;
		solver.post(IntConstraintFactory.sum(varsOrroot5_F30_4, sumOrroot5_F30_4));
		Constraint or1root5_F30_4 = IntConstraintFactory.arithm(sumOrroot5_F30_4, ">=", 1);
		or1root5_F30_4.setName(Utilities.OR_TC);
		
		Constraint or0root5_F30_4 = IntConstraintFactory.arithm(sumOrroot5_F30_4, "=", 0);
		or0root5_F30_4.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root5_F30, or1root5_F30_4, or0root5_F30_4);
			
		IntVar sumOrroot5_F30_5 = VariableFactory.enumerated("sumOrroot5_F30", 0, 2, solver); 
		BoolVar[] varsOrroot5_F30_5 = new BoolVar[2];
		varsOrroot5_F30_5[0] = root5_F60;
		varsOrroot5_F30_5[1] = root5_F61;
		solver.post(IntConstraintFactory.sum(varsOrroot5_F30_5, sumOrroot5_F30_5));
		Constraint or1root5_F30_5 = IntConstraintFactory.arithm(sumOrroot5_F30_5, ">=", 1);
		or1root5_F30_5.setName(Utilities.OR_TC);
		
		Constraint or0root5_F30_5 = IntConstraintFactory.arithm(sumOrroot5_F30_5, "=", 0);
		or0root5_F30_5.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root5_F30, or1root5_F30_5, or0root5_F30_5);
			
		Constraint mandatoryroot5_F3_root5_F12 = IntConstraintFactory.arithm(root5_F3, "=", root5_F12);
		mandatoryroot5_F3_root5_F12.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F3_root5_F12);
		Constraint mandatoryroot5_F3_root5_F13 = IntConstraintFactory.arithm(root5_F3, "=", root5_F13);
		mandatoryroot5_F3_root5_F13.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F3_root5_F13);
		
		//--------------------------------------------
		//Cross-Tree Constraints
		//--------------------------------------------
		Constraint excludesroot1_F64_root1_F64 = IntConstraintFactory.arithm(root1_F64, "+", root1_F16, "<=", 1);
		excludesroot1_F64_root1_F64.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot1_F64_root1_F64);
		Constraint excludesroot1_F61_root1_F61 = IntConstraintFactory.arithm(root1_F61, "+", root1_F1, "<=", 1);
		excludesroot1_F61_root1_F61.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot1_F61_root1_F61);
		Constraint excludesroot1_F8_root1_F8 = IntConstraintFactory.arithm(root1_F8, "+", root1_F59, "<=", 1);
		excludesroot1_F8_root1_F8.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot1_F8_root1_F8);
		Constraint excludesroot1_F43_root1_F43 = IntConstraintFactory.arithm(root1_F43, "+", root1_F48, "<=", 1);
		excludesroot1_F43_root1_F43.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot1_F43_root1_F43);
		Constraint requiresroot1_F5_root1_F60 = IntConstraintFactory.arithm(root1_F5, "<=", root1_F60);
		requiresroot1_F5_root1_F60.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot1_F5_root1_F60);
		Constraint requiresroot1_F40_root1_F12 = IntConstraintFactory.arithm(root1_F40, "<=", root1_F12);
		requiresroot1_F40_root1_F12.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot1_F40_root1_F12);
		Constraint requiresroot1_F30_root1_F14 = IntConstraintFactory.arithm(root1_F30, "<=", root1_F14);
		requiresroot1_F30_root1_F14.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot1_F30_root1_F14);
		Constraint excludesroot1_F33_root1_F33 = IntConstraintFactory.arithm(root1_F33, "+", root1_F4, "<=", 1);
		excludesroot1_F33_root1_F33.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot1_F33_root1_F33);
		Constraint excludesroot2_F43_root2_F43 = IntConstraintFactory.arithm(root2_F43, "+", root2_F6, "<=", 1);
		excludesroot2_F43_root2_F43.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot2_F43_root2_F43);
		Constraint requiresroot2_F15_root2_F49 = IntConstraintFactory.arithm(root2_F15, "<=", root2_F49);
		requiresroot2_F15_root2_F49.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot2_F15_root2_F49);
		Constraint excludesroot2_F36_root2_F36 = IntConstraintFactory.arithm(root2_F36, "+", root2_F73, "<=", 1);
		excludesroot2_F36_root2_F36.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot2_F36_root2_F36);
		Constraint requiresroot2_F7_root2_F6 = IntConstraintFactory.arithm(root2_F7, "<=", root2_F6);
		requiresroot2_F7_root2_F6.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot2_F7_root2_F6);
		Constraint excludesroot2_F28_root2_F28 = IntConstraintFactory.arithm(root2_F28, "+", root2_F41, "<=", 1);
		excludesroot2_F28_root2_F28.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot2_F28_root2_F28);
		Constraint excludesroot2_F33_root2_F33 = IntConstraintFactory.arithm(root2_F33, "+", root2_F20, "<=", 1);
		excludesroot2_F33_root2_F33.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot2_F33_root2_F33);
		Constraint requiresroot2_F54_root2_F50 = IntConstraintFactory.arithm(root2_F54, "<=", root2_F50);
		requiresroot2_F54_root2_F50.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot2_F54_root2_F50);
		Constraint excludesroot2_F37_root2_F37 = IntConstraintFactory.arithm(root2_F37, "+", root2_F73, "<=", 1);
		excludesroot2_F37_root2_F37.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot2_F37_root2_F37);
		Constraint requiresroot3_F40_root3_F70 = IntConstraintFactory.arithm(root3_F40, "<=", root3_F70);
		requiresroot3_F40_root3_F70.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot3_F40_root3_F70);
		Constraint requiresroot3_F15_root3_F61 = IntConstraintFactory.arithm(root3_F15, "<=", root3_F61);
		requiresroot3_F15_root3_F61.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot3_F15_root3_F61);
		Constraint requiresroot3_F50_root3_F57 = IntConstraintFactory.arithm(root3_F50, "<=", root3_F57);
		requiresroot3_F50_root3_F57.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot3_F50_root3_F57);
		Constraint requiresroot3_F25_root3_F49 = IntConstraintFactory.arithm(root3_F25, "<=", root3_F49);
		requiresroot3_F25_root3_F49.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot3_F25_root3_F49);
		Constraint excludesroot3_F41_root3_F41 = IntConstraintFactory.arithm(root3_F41, "+", root3_F72, "<=", 1);
		excludesroot3_F41_root3_F41.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot3_F41_root3_F41);
		Constraint excludesroot3_F47_root3_F47 = IntConstraintFactory.arithm(root3_F47, "+", root3_F12, "<=", 1);
		excludesroot3_F47_root3_F47.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot3_F47_root3_F47);
		Constraint excludesroot3_F20_root3_F20 = IntConstraintFactory.arithm(root3_F20, "+", root3_F62, "<=", 1);
		excludesroot3_F20_root3_F20.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot3_F20_root3_F20);
		Constraint excludesroot3_F47_root3_F70 = IntConstraintFactory.arithm(root3_F47, "+", root3_F70, "<=", 1);
		excludesroot3_F47_root3_F70.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot3_F47_root3_F70);
		Constraint requiresroot4_F17_root4_F63 = IntConstraintFactory.arithm(root4_F17, "<=", root4_F63);
		requiresroot4_F17_root4_F63.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot4_F17_root4_F63);
		Constraint excludesroot4_F13_root4_F13 = IntConstraintFactory.arithm(root4_F13, "+", root4_F35, "<=", 1);
		excludesroot4_F13_root4_F13.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot4_F13_root4_F13);
		Constraint excludesroot4_F15_root4_F15 = IntConstraintFactory.arithm(root4_F15, "+", root4_F48, "<=", 1);
		excludesroot4_F15_root4_F15.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot4_F15_root4_F15);
		Constraint excludesroot4_F13_root4_F36 = IntConstraintFactory.arithm(root4_F13, "+", root4_F36, "<=", 1);
		excludesroot4_F13_root4_F36.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot4_F13_root4_F36);
		Constraint requiresroot4_F42_root4_F58 = IntConstraintFactory.arithm(root4_F42, "<=", root4_F58);
		requiresroot4_F42_root4_F58.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot4_F42_root4_F58);
		Constraint requiresroot4_F3_root4_F2 = IntConstraintFactory.arithm(root4_F3, "<=", root4_F2);
		requiresroot4_F3_root4_F2.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot4_F3_root4_F2);
		Constraint requiresroot4_F23_root4_F60 = IntConstraintFactory.arithm(root4_F23, "<=", root4_F60);
		requiresroot4_F23_root4_F60.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot4_F23_root4_F60);
		Constraint requiresroot4_F32_root4_F42 = IntConstraintFactory.arithm(root4_F32, "<=", root4_F42);
		requiresroot4_F32_root4_F42.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot4_F32_root4_F42);
		Constraint requiresroot5_F5_root5_F64 = IntConstraintFactory.arithm(root5_F5, "<=", root5_F64);
		requiresroot5_F5_root5_F64.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot5_F5_root5_F64);
		Constraint requiresroot5_F25_root5_F4 = IntConstraintFactory.arithm(root5_F25, "<=", root5_F4);
		requiresroot5_F25_root5_F4.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot5_F25_root5_F4);
		Constraint requiresroot5_F52_root5_F58 = IntConstraintFactory.arithm(root5_F52, "<=", root5_F58);
		requiresroot5_F52_root5_F58.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot5_F52_root5_F58);
		Constraint excludesroot5_F18_root5_F18 = IntConstraintFactory.arithm(root5_F18, "+", root5_F1, "<=", 1);
		excludesroot5_F18_root5_F18.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot5_F18_root5_F18);
		Constraint requiresroot5_F50_root5_F72 = IntConstraintFactory.arithm(root5_F50, "<=", root5_F72);
		requiresroot5_F50_root5_F72.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot5_F50_root5_F72);
		Constraint requiresroot5_F75_root5_F77 = IntConstraintFactory.arithm(root5_F75, "<=", root5_F77);
		requiresroot5_F75_root5_F77.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot5_F75_root5_F77);
		Constraint excludesroot5_F17_root5_F17 = IntConstraintFactory.arithm(root5_F17, "+", root5_F75, "<=", 1);
		excludesroot5_F17_root5_F17.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot5_F17_root5_F17);
		Constraint requiresroot5_F10_root5_F58 = IntConstraintFactory.arithm(root5_F10, "<=", root5_F58);
		requiresroot5_F10_root5_F58.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot5_F10_root5_F58);
		
		//--------------------------------------------
		//Cross-Model Constraints
		//--------------------------------------------
		Constraint requiresroot4_F73_root3_F64 = IntConstraintFactory.arithm(root4_F73, "<=", root3_F64);
		requiresroot4_F73_root3_F64.setName(Utilities.REQUIRES_CMC);
		solver.post(requiresroot4_F73_root3_F64);
		Constraint requiresroot2_F47_root3_F6 = IntConstraintFactory.arithm(root2_F47, "<=", root3_F6);
		requiresroot2_F47_root3_F6.setName(Utilities.REQUIRES_CMC);
		solver.post(requiresroot2_F47_root3_F6);
		Constraint excludesroot4_F78_root4_F78 = IntConstraintFactory.arithm(root4_F78, "+", root1_F23, "<=", 1);
		excludesroot4_F78_root4_F78.setName(Utilities.EXCLUDES_CMC);
		solver.post(excludesroot4_F78_root4_F78);
		Constraint requiresroot4_F57_root5_F28 = IntConstraintFactory.arithm(root4_F57, "<=", root5_F28);
		requiresroot4_F57_root5_F28.setName(Utilities.REQUIRES_CMC);
		solver.post(requiresroot4_F57_root5_F28);
		Constraint excludesroot3_F50_root3_F50 = IntConstraintFactory.arithm(root3_F50, "+", root5_F42, "<=", 1);
		excludesroot3_F50_root3_F50.setName(Utilities.EXCLUDES_CMC);
		solver.post(excludesroot3_F50_root3_F50);
		Constraint excludesroot3_F35_root3_F35 = IntConstraintFactory.arithm(root3_F35, "+", root2_F35, "<=", 1);
		excludesroot3_F35_root3_F35.setName(Utilities.EXCLUDES_CMC);
		solver.post(excludesroot3_F35_root3_F35);
		Constraint excludesroot1_F50_root1_F50 = IntConstraintFactory.arithm(root1_F50, "+", root5_F66, "<=", 1);
		excludesroot1_F50_root1_F50.setName(Utilities.EXCLUDES_CMC);
		solver.post(excludesroot1_F50_root1_F50);
		Constraint requiresroot1_F78_root4_F59 = IntConstraintFactory.arithm(root1_F78, "<=", root4_F59);
		requiresroot1_F78_root4_F59.setName(Utilities.REQUIRES_CMC);
		solver.post(requiresroot1_F78_root4_F59);
		Constraint excludesroot4_F75_root4_F75 = IntConstraintFactory.arithm(root4_F75, "+", root1_F68, "<=", 1);
		excludesroot4_F75_root4_F75.setName(Utilities.EXCLUDES_CMC);
		solver.post(excludesroot4_F75_root4_F75);
		Constraint requiresroot5_F65_root3_F67 = IntConstraintFactory.arithm(root5_F65, "<=", root3_F67);
		requiresroot5_F65_root3_F67.setName(Utilities.REQUIRES_CMC);
		solver.post(requiresroot5_F65_root3_F67);
		Constraint excludesroot2_F49_root2_F49 = IntConstraintFactory.arithm(root2_F49, "+", root3_F64, "<=", 1);
		excludesroot2_F49_root2_F49.setName(Utilities.EXCLUDES_CMC);
		solver.post(excludesroot2_F49_root2_F49);
		Constraint requiresroot5_F14_root2_F40 = IntConstraintFactory.arithm(root5_F14, "<=", root2_F40);
		requiresroot5_F14_root2_F40.setName(Utilities.REQUIRES_CMC);
		solver.post(requiresroot5_F14_root2_F40);
		Constraint requiresroot3_F50_root1_F39 = IntConstraintFactory.arithm(root3_F50, "<=", root1_F39);
		requiresroot3_F50_root1_F39.setName(Utilities.REQUIRES_CMC);
		solver.post(requiresroot3_F50_root1_F39);
		Constraint excludesroot4_F50_root4_F50 = IntConstraintFactory.arithm(root4_F50, "+", root2_F43, "<=", 1);
		excludesroot4_F50_root4_F50.setName(Utilities.EXCLUDES_CMC);
		solver.post(excludesroot4_F50_root4_F50);
		Constraint excludesroot3_F77_root3_F77 = IntConstraintFactory.arithm(root3_F77, "+", root1_F26, "<=", 1);
		excludesroot3_F77_root3_F77.setName(Utilities.EXCLUDES_CMC);
		solver.post(excludesroot3_F77_root3_F77);
		Constraint requiresroot1_F34_root2_F48 = IntConstraintFactory.arithm(root1_F34, "<=", root2_F48);
		requiresroot1_F34_root2_F48.setName(Utilities.REQUIRES_CMC);
		solver.post(requiresroot1_F34_root2_F48);
		Constraint requiresroot1_F75_root5_F3 = IntConstraintFactory.arithm(root1_F75, "<=", root5_F3);
		requiresroot1_F75_root5_F3.setName(Utilities.REQUIRES_CMC);
		solver.post(requiresroot1_F75_root5_F3);
		Constraint requiresroot5_F38_root4_F32 = IntConstraintFactory.arithm(root5_F38, "<=", root4_F32);
		requiresroot5_F38_root4_F32.setName(Utilities.REQUIRES_CMC);
		solver.post(requiresroot5_F38_root4_F32);
		Constraint requiresroot4_F10_root3_F50 = IntConstraintFactory.arithm(root4_F10, "<=", root3_F50);
		requiresroot4_F10_root3_F50.setName(Utilities.REQUIRES_CMC);
		solver.post(requiresroot4_F10_root3_F50);
		Constraint excludesroot4_F11_root4_F11 = IntConstraintFactory.arithm(root4_F11, "+", root1_F68, "<=", 1);
		excludesroot4_F11_root4_F11.setName(Utilities.EXCLUDES_CMC);
		solver.post(excludesroot4_F11_root4_F11);
		
		//--------------------------------------------
		//Solve
		//--------------------------------------------
		long start = System.currentTimeMillis();
		System.out.println("Started at: " + start);
		
		List<IntVar> varsAtribute0List = new ArrayList<IntVar>(featureAttrAtribute0.values());
		IntVar[] varsAtribute0 = new IntVar[featureAttrAtribute0.values().size()];
			
		for(int i = 0; i < varsAtribute0List.size(); i++) {
		varsAtribute0[i] = (IntVar) varsAtribute0List.get(i);
		}
		
		List<IntVar> varsAtribute1List = new ArrayList<IntVar>(featureAttrAtribute1.values());
		IntVar[] varsAtribute1 = new IntVar[featureAttrAtribute1.values().size()];
			
		for(int i = 0; i < varsAtribute1List.size(); i++) {
		varsAtribute1[i] = VariableFactory.minus(varsAtribute1List.get(i));
		}
		
		IntVar totalAtribute0 = VariableFactory.bounded("totalAtribute0", 0, 1000000, solver);
		solver.post(IntConstraintFactory.sum(varsAtribute0, totalAtribute0));
		IntVar totalAtribute1 = VariableFactory.bounded("totalAtribute1", -1000000, 0, solver);
		solver.post(IntConstraintFactory.sum(varsAtribute1, totalAtribute1));
		
		//SMF.limitSolution(solver, 10);
		//Chatterbox.showSolutions(solver);
		solver.findParetoFront(ResolutionPolicy.MINIMIZE, totalAtribute0, totalAtribute1);
		Chatterbox.printStatistics(solver);
		
		
		long end = System.currentTimeMillis();
		System.out.println("Ended at: " + end);
		System.out.println("Total time: " + (end - start));
	}
	
	private static void initializeVars(){
		int contFeatures = 400;
			
		root1_root = (BoolVar) VariableFactory.fixed("feature_root1_root", 1, solver);
		root1_F1 = VariableFactory.bool("feature_root1_F1", solver);
		root1_F64 = VariableFactory.bool("feature_root1_F64", solver);
		root1_F2 = VariableFactory.bool("feature_root1_F2", solver);
		root1_F3 = VariableFactory.bool("feature_root1_F3", solver);
		root1_F4 = VariableFactory.bool("feature_root1_F4", solver);
		root1_F5 = VariableFactory.bool("feature_root1_F5", solver);
		root1_F6 = VariableFactory.bool("feature_root1_F6", solver);
		root1_F33 = VariableFactory.bool("feature_root1_F33", solver);
		root1_F34 = VariableFactory.bool("feature_root1_F34", solver);
		root1_F35 = VariableFactory.bool("feature_root1_F35", solver);
		root1_F36 = VariableFactory.bool("feature_root1_F36", solver);
		root1_F47 = VariableFactory.bool("feature_root1_F47", solver);
		root1_F37 = VariableFactory.bool("feature_root1_F37", solver);
		root1_F38 = VariableFactory.bool("feature_root1_F38", solver);
		root1_F39 = VariableFactory.bool("feature_root1_F39", solver);
		root1_F7 = VariableFactory.bool("feature_root1_F7", solver);
		root1_F12 = VariableFactory.bool("feature_root1_F12", solver);
		root1_F13 = VariableFactory.bool("feature_root1_F13", solver);
		root1_F65 = VariableFactory.bool("feature_root1_F65", solver);
		root1_F66 = VariableFactory.bool("feature_root1_F66", solver);
		root1_F67 = VariableFactory.bool("feature_root1_F67", solver);
		root1_F68 = VariableFactory.bool("feature_root1_F68", solver);
		root1_F69 = VariableFactory.bool("feature_root1_F69", solver);
		root1_F70 = VariableFactory.bool("feature_root1_F70", solver);
		root1_F71 = VariableFactory.bool("feature_root1_F71", solver);
		root1_F72 = VariableFactory.bool("feature_root1_F72", solver);
		root1_F73 = VariableFactory.bool("feature_root1_F73", solver);
		root1_F14 = VariableFactory.bool("feature_root1_F14", solver);
		root1_F48 = VariableFactory.bool("feature_root1_F48", solver);
		root1_F15 = VariableFactory.bool("feature_root1_F15", solver);
		root1_F32 = VariableFactory.bool("feature_root1_F32", solver);
		root1_F16 = VariableFactory.bool("feature_root1_F16", solver);
		root1_F58 = VariableFactory.bool("feature_root1_F58", solver);
		root1_F59 = VariableFactory.bool("feature_root1_F59", solver);
		root1_F60 = VariableFactory.bool("feature_root1_F60", solver);
		root1_F61 = VariableFactory.bool("feature_root1_F61", solver);
		root1_F62 = VariableFactory.bool("feature_root1_F62", solver);
		root1_F63 = VariableFactory.bool("feature_root1_F63", solver);
		root1_F79 = VariableFactory.bool("feature_root1_F79", solver);
		root1_F17 = VariableFactory.bool("feature_root1_F17", solver);
		root1_F18 = VariableFactory.bool("feature_root1_F18", solver);
		root1_F19 = VariableFactory.bool("feature_root1_F19", solver);
		root1_F20 = VariableFactory.bool("feature_root1_F20", solver);
		root1_F40 = VariableFactory.bool("feature_root1_F40", solver);
		root1_F41 = VariableFactory.bool("feature_root1_F41", solver);
		root1_F42 = VariableFactory.bool("feature_root1_F42", solver);
		root1_F43 = VariableFactory.bool("feature_root1_F43", solver);
		root1_F44 = VariableFactory.bool("feature_root1_F44", solver);
		root1_F45 = VariableFactory.bool("feature_root1_F45", solver);
		root1_F46 = VariableFactory.bool("feature_root1_F46", solver);
		root1_F21 = VariableFactory.bool("feature_root1_F21", solver);
		root1_F8 = VariableFactory.bool("feature_root1_F8", solver);
		root1_F10 = VariableFactory.bool("feature_root1_F10", solver);
		root1_F11 = VariableFactory.bool("feature_root1_F11", solver);
		root1_F9 = VariableFactory.bool("feature_root1_F9", solver);
		root1_F22 = VariableFactory.bool("feature_root1_F22", solver);
		root1_F23 = VariableFactory.bool("feature_root1_F23", solver);
		root1_F24 = VariableFactory.bool("feature_root1_F24", solver);
		root1_F74 = VariableFactory.bool("feature_root1_F74", solver);
		root1_F75 = VariableFactory.bool("feature_root1_F75", solver);
		root1_F76 = VariableFactory.bool("feature_root1_F76", solver);
		root1_F77 = VariableFactory.bool("feature_root1_F77", solver);
		root1_F78 = VariableFactory.bool("feature_root1_F78", solver);
		root1_F25 = VariableFactory.bool("feature_root1_F25", solver);
		root1_F49 = VariableFactory.bool("feature_root1_F49", solver);
		root1_F50 = VariableFactory.bool("feature_root1_F50", solver);
		root1_F51 = VariableFactory.bool("feature_root1_F51", solver);
		root1_F52 = VariableFactory.bool("feature_root1_F52", solver);
		root1_F53 = VariableFactory.bool("feature_root1_F53", solver);
		root1_F54 = VariableFactory.bool("feature_root1_F54", solver);
		root1_F55 = VariableFactory.bool("feature_root1_F55", solver);
		root1_F56 = VariableFactory.bool("feature_root1_F56", solver);
		root1_F57 = VariableFactory.bool("feature_root1_F57", solver);
		root1_F26 = VariableFactory.bool("feature_root1_F26", solver);
		root1_F27 = VariableFactory.bool("feature_root1_F27", solver);
		root1_F28 = VariableFactory.bool("feature_root1_F28", solver);
		root1_F29 = VariableFactory.bool("feature_root1_F29", solver);
		root1_F30 = VariableFactory.bool("feature_root1_F30", solver);
		root1_F31 = VariableFactory.bool("feature_root1_F31", solver);
		root2_root = (BoolVar) VariableFactory.fixed("feature_root2_root", 1, solver);
		root2_F1 = VariableFactory.bool("feature_root2_F1", solver);
		root2_F2 = VariableFactory.bool("feature_root2_F2", solver);
		root2_F3 = VariableFactory.bool("feature_root2_F3", solver);
		root2_F33 = VariableFactory.bool("feature_root2_F33", solver);
		root2_F34 = VariableFactory.bool("feature_root2_F34", solver);
		root2_F35 = VariableFactory.bool("feature_root2_F35", solver);
		root2_F36 = VariableFactory.bool("feature_root2_F36", solver);
		root2_F37 = VariableFactory.bool("feature_root2_F37", solver);
		root2_F38 = VariableFactory.bool("feature_root2_F38", solver);
		root2_F71 = VariableFactory.bool("feature_root2_F71", solver);
		root2_F72 = VariableFactory.bool("feature_root2_F72", solver);
		root2_F73 = VariableFactory.bool("feature_root2_F73", solver);
		root2_F74 = VariableFactory.bool("feature_root2_F74", solver);
		root2_F75 = VariableFactory.bool("feature_root2_F75", solver);
		root2_F76 = VariableFactory.bool("feature_root2_F76", solver);
		root2_F77 = VariableFactory.bool("feature_root2_F77", solver);
		root2_F78 = VariableFactory.bool("feature_root2_F78", solver);
		root2_F39 = VariableFactory.bool("feature_root2_F39", solver);
		root2_F4 = VariableFactory.bool("feature_root2_F4", solver);
		root2_F5 = VariableFactory.bool("feature_root2_F5", solver);
		root2_F9 = VariableFactory.bool("feature_root2_F9", solver);
		root2_F6 = VariableFactory.bool("feature_root2_F6", solver);
		root2_F7 = VariableFactory.bool("feature_root2_F7", solver);
		root2_F11 = VariableFactory.bool("feature_root2_F11", solver);
		root2_F12 = VariableFactory.bool("feature_root2_F12", solver);
		root2_F31 = VariableFactory.bool("feature_root2_F31", solver);
		root2_F40 = VariableFactory.bool("feature_root2_F40", solver);
		root2_F32 = VariableFactory.bool("feature_root2_F32", solver);
		root2_F13 = VariableFactory.bool("feature_root2_F13", solver);
		root2_F14 = VariableFactory.bool("feature_root2_F14", solver);
		root2_F15 = VariableFactory.bool("feature_root2_F15", solver);
		root2_F17 = VariableFactory.bool("feature_root2_F17", solver);
		root2_F18 = VariableFactory.bool("feature_root2_F18", solver);
		root2_F19 = VariableFactory.bool("feature_root2_F19", solver);
		root2_F20 = VariableFactory.bool("feature_root2_F20", solver);
		root2_F21 = VariableFactory.bool("feature_root2_F21", solver);
		root2_F22 = VariableFactory.bool("feature_root2_F22", solver);
		root2_F23 = VariableFactory.bool("feature_root2_F23", solver);
		root2_F24 = VariableFactory.bool("feature_root2_F24", solver);
		root2_F25 = VariableFactory.bool("feature_root2_F25", solver);
		root2_F26 = VariableFactory.bool("feature_root2_F26", solver);
		root2_F27 = VariableFactory.bool("feature_root2_F27", solver);
		root2_F28 = VariableFactory.bool("feature_root2_F28", solver);
		root2_F29 = VariableFactory.bool("feature_root2_F29", solver);
		root2_F30 = VariableFactory.bool("feature_root2_F30", solver);
		root2_F41 = VariableFactory.bool("feature_root2_F41", solver);
		root2_F42 = VariableFactory.bool("feature_root2_F42", solver);
		root2_F53 = VariableFactory.bool("feature_root2_F53", solver);
		root2_F54 = VariableFactory.bool("feature_root2_F54", solver);
		root2_F55 = VariableFactory.bool("feature_root2_F55", solver);
		root2_F56 = VariableFactory.bool("feature_root2_F56", solver);
		root2_F57 = VariableFactory.bool("feature_root2_F57", solver);
		root2_F58 = VariableFactory.bool("feature_root2_F58", solver);
		root2_F59 = VariableFactory.bool("feature_root2_F59", solver);
		root2_F60 = VariableFactory.bool("feature_root2_F60", solver);
		root2_F43 = VariableFactory.bool("feature_root2_F43", solver);
		root2_F44 = VariableFactory.bool("feature_root2_F44", solver);
		root2_F45 = VariableFactory.bool("feature_root2_F45", solver);
		root2_F16 = VariableFactory.bool("feature_root2_F16", solver);
		root2_F61 = VariableFactory.bool("feature_root2_F61", solver);
		root2_F62 = VariableFactory.bool("feature_root2_F62", solver);
		root2_F63 = VariableFactory.bool("feature_root2_F63", solver);
		root2_F64 = VariableFactory.bool("feature_root2_F64", solver);
		root2_F65 = VariableFactory.bool("feature_root2_F65", solver);
		root2_F66 = VariableFactory.bool("feature_root2_F66", solver);
		root2_F67 = VariableFactory.bool("feature_root2_F67", solver);
		root2_F68 = VariableFactory.bool("feature_root2_F68", solver);
		root2_F69 = VariableFactory.bool("feature_root2_F69", solver);
		root2_F70 = VariableFactory.bool("feature_root2_F70", solver);
		root2_F8 = VariableFactory.bool("feature_root2_F8", solver);
		root2_F10 = VariableFactory.bool("feature_root2_F10", solver);
		root2_F46 = VariableFactory.bool("feature_root2_F46", solver);
		root2_F47 = VariableFactory.bool("feature_root2_F47", solver);
		root2_F79 = VariableFactory.bool("feature_root2_F79", solver);
		root2_F48 = VariableFactory.bool("feature_root2_F48", solver);
		root2_F49 = VariableFactory.bool("feature_root2_F49", solver);
		root2_F50 = VariableFactory.bool("feature_root2_F50", solver);
		root2_F51 = VariableFactory.bool("feature_root2_F51", solver);
		root2_F52 = VariableFactory.bool("feature_root2_F52", solver);
		root3_root = (BoolVar) VariableFactory.fixed("feature_root3_root", 1, solver);
		root3_F1 = VariableFactory.bool("feature_root3_F1", solver);
		root3_F9 = VariableFactory.bool("feature_root3_F9", solver);
		root3_F34 = VariableFactory.bool("feature_root3_F34", solver);
		root3_F35 = VariableFactory.bool("feature_root3_F35", solver);
		root3_F43 = VariableFactory.bool("feature_root3_F43", solver);
		root3_F36 = VariableFactory.bool("feature_root3_F36", solver);
		root3_F37 = VariableFactory.bool("feature_root3_F37", solver);
		root3_F38 = VariableFactory.bool("feature_root3_F38", solver);
		root3_F39 = VariableFactory.bool("feature_root3_F39", solver);
		root3_F40 = VariableFactory.bool("feature_root3_F40", solver);
		root3_F10 = VariableFactory.bool("feature_root3_F10", solver);
		root3_F32 = VariableFactory.bool("feature_root3_F32", solver);
		root3_F33 = VariableFactory.bool("feature_root3_F33", solver);
		root3_F57 = VariableFactory.bool("feature_root3_F57", solver);
		root3_F58 = VariableFactory.bool("feature_root3_F58", solver);
		root3_F59 = VariableFactory.bool("feature_root3_F59", solver);
		root3_F60 = VariableFactory.bool("feature_root3_F60", solver);
		root3_F61 = VariableFactory.bool("feature_root3_F61", solver);
		root3_F62 = VariableFactory.bool("feature_root3_F62", solver);
		root3_F63 = VariableFactory.bool("feature_root3_F63", solver);
		root3_F64 = VariableFactory.bool("feature_root3_F64", solver);
		root3_F11 = VariableFactory.bool("feature_root3_F11", solver);
		root3_F12 = VariableFactory.bool("feature_root3_F12", solver);
		root3_F16 = VariableFactory.bool("feature_root3_F16", solver);
		root3_F17 = VariableFactory.bool("feature_root3_F17", solver);
		root3_F27 = VariableFactory.bool("feature_root3_F27", solver);
		root3_F71 = VariableFactory.bool("feature_root3_F71", solver);
		root3_F75 = VariableFactory.bool("feature_root3_F75", solver);
		root3_F76 = VariableFactory.bool("feature_root3_F76", solver);
		root3_F77 = VariableFactory.bool("feature_root3_F77", solver);
		root3_F78 = VariableFactory.bool("feature_root3_F78", solver);
		root3_F72 = VariableFactory.bool("feature_root3_F72", solver);
		root3_F73 = VariableFactory.bool("feature_root3_F73", solver);
		root3_F28 = VariableFactory.bool("feature_root3_F28", solver);
		root3_F29 = VariableFactory.bool("feature_root3_F29", solver);
		root3_F67 = VariableFactory.bool("feature_root3_F67", solver);
		root3_F68 = VariableFactory.bool("feature_root3_F68", solver);
		root3_F30 = VariableFactory.bool("feature_root3_F30", solver);
		root3_F31 = VariableFactory.bool("feature_root3_F31", solver);
		root3_F18 = VariableFactory.bool("feature_root3_F18", solver);
		root3_F19 = VariableFactory.bool("feature_root3_F19", solver);
		root3_F20 = VariableFactory.bool("feature_root3_F20", solver);
		root3_F22 = VariableFactory.bool("feature_root3_F22", solver);
		root3_F23 = VariableFactory.bool("feature_root3_F23", solver);
		root3_F24 = VariableFactory.bool("feature_root3_F24", solver);
		root3_F25 = VariableFactory.bool("feature_root3_F25", solver);
		root3_F26 = VariableFactory.bool("feature_root3_F26", solver);
		root3_F21 = VariableFactory.bool("feature_root3_F21", solver);
		root3_F13 = VariableFactory.bool("feature_root3_F13", solver);
		root3_F14 = VariableFactory.bool("feature_root3_F14", solver);
		root3_F15 = VariableFactory.bool("feature_root3_F15", solver);
		root3_F2 = VariableFactory.bool("feature_root3_F2", solver);
		root3_F69 = VariableFactory.bool("feature_root3_F69", solver);
		root3_F70 = VariableFactory.bool("feature_root3_F70", solver);
		root3_F3 = VariableFactory.bool("feature_root3_F3", solver);
		root3_F41 = VariableFactory.bool("feature_root3_F41", solver);
		root3_F42 = VariableFactory.bool("feature_root3_F42", solver);
		root3_F4 = VariableFactory.bool("feature_root3_F4", solver);
		root3_F5 = VariableFactory.bool("feature_root3_F5", solver);
		root3_F6 = VariableFactory.bool("feature_root3_F6", solver);
		root3_F7 = VariableFactory.bool("feature_root3_F7", solver);
		root3_F8 = VariableFactory.bool("feature_root3_F8", solver);
		root3_F44 = VariableFactory.bool("feature_root3_F44", solver);
		root3_F49 = VariableFactory.bool("feature_root3_F49", solver);
		root3_F50 = VariableFactory.bool("feature_root3_F50", solver);
		root3_F51 = VariableFactory.bool("feature_root3_F51", solver);
		root3_F56 = VariableFactory.bool("feature_root3_F56", solver);
		root3_F52 = VariableFactory.bool("feature_root3_F52", solver);
		root3_F74 = VariableFactory.bool("feature_root3_F74", solver);
		root3_F53 = VariableFactory.bool("feature_root3_F53", solver);
		root3_F54 = VariableFactory.bool("feature_root3_F54", solver);
		root3_F65 = VariableFactory.bool("feature_root3_F65", solver);
		root3_F66 = VariableFactory.bool("feature_root3_F66", solver);
		root3_F79 = VariableFactory.bool("feature_root3_F79", solver);
		root3_F55 = VariableFactory.bool("feature_root3_F55", solver);
		root3_F45 = VariableFactory.bool("feature_root3_F45", solver);
		root3_F46 = VariableFactory.bool("feature_root3_F46", solver);
		root3_F47 = VariableFactory.bool("feature_root3_F47", solver);
		root3_F48 = VariableFactory.bool("feature_root3_F48", solver);
		root4_root = (BoolVar) VariableFactory.fixed("feature_root4_root", 1, solver);
		root4_F1 = VariableFactory.bool("feature_root4_F1", solver);
		root4_F2 = VariableFactory.bool("feature_root4_F2", solver);
		root4_F31 = VariableFactory.bool("feature_root4_F31", solver);
		root4_F3 = VariableFactory.bool("feature_root4_F3", solver);
		root4_F7 = VariableFactory.bool("feature_root4_F7", solver);
		root4_F8 = VariableFactory.bool("feature_root4_F8", solver);
		root4_F21 = VariableFactory.bool("feature_root4_F21", solver);
		root4_F22 = VariableFactory.bool("feature_root4_F22", solver);
		root4_F23 = VariableFactory.bool("feature_root4_F23", solver);
		root4_F53 = VariableFactory.bool("feature_root4_F53", solver);
		root4_F24 = VariableFactory.bool("feature_root4_F24", solver);
		root4_F41 = VariableFactory.bool("feature_root4_F41", solver);
		root4_F42 = VariableFactory.bool("feature_root4_F42", solver);
		root4_F43 = VariableFactory.bool("feature_root4_F43", solver);
		root4_F44 = VariableFactory.bool("feature_root4_F44", solver);
		root4_F45 = VariableFactory.bool("feature_root4_F45", solver);
		root4_F46 = VariableFactory.bool("feature_root4_F46", solver);
		root4_F47 = VariableFactory.bool("feature_root4_F47", solver);
		root4_F25 = VariableFactory.bool("feature_root4_F25", solver);
		root4_F32 = VariableFactory.bool("feature_root4_F32", solver);
		root4_F33 = VariableFactory.bool("feature_root4_F33", solver);
		root4_F34 = VariableFactory.bool("feature_root4_F34", solver);
		root4_F35 = VariableFactory.bool("feature_root4_F35", solver);
		root4_F36 = VariableFactory.bool("feature_root4_F36", solver);
		root4_F37 = VariableFactory.bool("feature_root4_F37", solver);
		root4_F38 = VariableFactory.bool("feature_root4_F38", solver);
		root4_F39 = VariableFactory.bool("feature_root4_F39", solver);
		root4_F40 = VariableFactory.bool("feature_root4_F40", solver);
		root4_F26 = VariableFactory.bool("feature_root4_F26", solver);
		root4_F27 = VariableFactory.bool("feature_root4_F27", solver);
		root4_F30 = VariableFactory.bool("feature_root4_F30", solver);
		root4_F50 = VariableFactory.bool("feature_root4_F50", solver);
		root4_F51 = VariableFactory.bool("feature_root4_F51", solver);
		root4_F52 = VariableFactory.bool("feature_root4_F52", solver);
		root4_F28 = VariableFactory.bool("feature_root4_F28", solver);
		root4_F29 = VariableFactory.bool("feature_root4_F29", solver);
		root4_F9 = VariableFactory.bool("feature_root4_F9", solver);
		root4_F10 = VariableFactory.bool("feature_root4_F10", solver);
		root4_F13 = VariableFactory.bool("feature_root4_F13", solver);
		root4_F14 = VariableFactory.bool("feature_root4_F14", solver);
		root4_F48 = VariableFactory.bool("feature_root4_F48", solver);
		root4_F49 = VariableFactory.bool("feature_root4_F49", solver);
		root4_F15 = VariableFactory.bool("feature_root4_F15", solver);
		root4_F16 = VariableFactory.bool("feature_root4_F16", solver);
		root4_F17 = VariableFactory.bool("feature_root4_F17", solver);
		root4_F18 = VariableFactory.bool("feature_root4_F18", solver);
		root4_F70 = VariableFactory.bool("feature_root4_F70", solver);
		root4_F19 = VariableFactory.bool("feature_root4_F19", solver);
		root4_F20 = VariableFactory.bool("feature_root4_F20", solver);
		root4_F11 = VariableFactory.bool("feature_root4_F11", solver);
		root4_F12 = VariableFactory.bool("feature_root4_F12", solver);
		root4_F4 = VariableFactory.bool("feature_root4_F4", solver);
		root4_F5 = VariableFactory.bool("feature_root4_F5", solver);
		root4_F54 = VariableFactory.bool("feature_root4_F54", solver);
		root4_F61 = VariableFactory.bool("feature_root4_F61", solver);
		root4_F62 = VariableFactory.bool("feature_root4_F62", solver);
		root4_F63 = VariableFactory.bool("feature_root4_F63", solver);
		root4_F64 = VariableFactory.bool("feature_root4_F64", solver);
		root4_F65 = VariableFactory.bool("feature_root4_F65", solver);
		root4_F66 = VariableFactory.bool("feature_root4_F66", solver);
		root4_F67 = VariableFactory.bool("feature_root4_F67", solver);
		root4_F68 = VariableFactory.bool("feature_root4_F68", solver);
		root4_F69 = VariableFactory.bool("feature_root4_F69", solver);
		root4_F55 = VariableFactory.bool("feature_root4_F55", solver);
		root4_F56 = VariableFactory.bool("feature_root4_F56", solver);
		root4_F57 = VariableFactory.bool("feature_root4_F57", solver);
		root4_F58 = VariableFactory.bool("feature_root4_F58", solver);
		root4_F59 = VariableFactory.bool("feature_root4_F59", solver);
		root4_F60 = VariableFactory.bool("feature_root4_F60", solver);
		root4_F6 = VariableFactory.bool("feature_root4_F6", solver);
		root4_F71 = VariableFactory.bool("feature_root4_F71", solver);
		root4_F72 = VariableFactory.bool("feature_root4_F72", solver);
		root4_F73 = VariableFactory.bool("feature_root4_F73", solver);
		root4_F74 = VariableFactory.bool("feature_root4_F74", solver);
		root4_F75 = VariableFactory.bool("feature_root4_F75", solver);
		root4_F76 = VariableFactory.bool("feature_root4_F76", solver);
		root4_F77 = VariableFactory.bool("feature_root4_F77", solver);
		root4_F78 = VariableFactory.bool("feature_root4_F78", solver);
		root4_F79 = VariableFactory.bool("feature_root4_F79", solver);
		root5_root = (BoolVar) VariableFactory.fixed("feature_root5_root", 1, solver);
		root5_F1 = VariableFactory.bool("feature_root5_F1", solver);
		root5_F2 = VariableFactory.bool("feature_root5_F2", solver);
		root5_F3 = VariableFactory.bool("feature_root5_F3", solver);
		root5_F4 = VariableFactory.bool("feature_root5_F4", solver);
		root5_F39 = VariableFactory.bool("feature_root5_F39", solver);
		root5_F43 = VariableFactory.bool("feature_root5_F43", solver);
		root5_F44 = VariableFactory.bool("feature_root5_F44", solver);
		root5_F45 = VariableFactory.bool("feature_root5_F45", solver);
		root5_F46 = VariableFactory.bool("feature_root5_F46", solver);
		root5_F47 = VariableFactory.bool("feature_root5_F47", solver);
		root5_F48 = VariableFactory.bool("feature_root5_F48", solver);
		root5_F49 = VariableFactory.bool("feature_root5_F49", solver);
		root5_F40 = VariableFactory.bool("feature_root5_F40", solver);
		root5_F41 = VariableFactory.bool("feature_root5_F41", solver);
		root5_F42 = VariableFactory.bool("feature_root5_F42", solver);
		root5_F62 = VariableFactory.bool("feature_root5_F62", solver);
		root5_F63 = VariableFactory.bool("feature_root5_F63", solver);
		root5_F5 = VariableFactory.bool("feature_root5_F5", solver);
		root5_F6 = VariableFactory.bool("feature_root5_F6", solver);
		root5_F21 = VariableFactory.bool("feature_root5_F21", solver);
		root5_F22 = VariableFactory.bool("feature_root5_F22", solver);
		root5_F27 = VariableFactory.bool("feature_root5_F27", solver);
		root5_F50 = VariableFactory.bool("feature_root5_F50", solver);
		root5_F51 = VariableFactory.bool("feature_root5_F51", solver);
		root5_F52 = VariableFactory.bool("feature_root5_F52", solver);
		root5_F53 = VariableFactory.bool("feature_root5_F53", solver);
		root5_F28 = VariableFactory.bool("feature_root5_F28", solver);
		root5_F29 = VariableFactory.bool("feature_root5_F29", solver);
		root5_F23 = VariableFactory.bool("feature_root5_F23", solver);
		root5_F24 = VariableFactory.bool("feature_root5_F24", solver);
		root5_F25 = VariableFactory.bool("feature_root5_F25", solver);
		root5_F7 = VariableFactory.bool("feature_root5_F7", solver);
		root5_F14 = VariableFactory.bool("feature_root5_F14", solver);
		root5_F15 = VariableFactory.bool("feature_root5_F15", solver);
		root5_F26 = VariableFactory.bool("feature_root5_F26", solver);
		root5_F16 = VariableFactory.bool("feature_root5_F16", solver);
		root5_F17 = VariableFactory.bool("feature_root5_F17", solver);
		root5_F31 = VariableFactory.bool("feature_root5_F31", solver);
		root5_F32 = VariableFactory.bool("feature_root5_F32", solver);
		root5_F33 = VariableFactory.bool("feature_root5_F33", solver);
		root5_F34 = VariableFactory.bool("feature_root5_F34", solver);
		root5_F35 = VariableFactory.bool("feature_root5_F35", solver);
		root5_F36 = VariableFactory.bool("feature_root5_F36", solver);
		root5_F37 = VariableFactory.bool("feature_root5_F37", solver);
		root5_F38 = VariableFactory.bool("feature_root5_F38", solver);
		root5_F18 = VariableFactory.bool("feature_root5_F18", solver);
		root5_F64 = VariableFactory.bool("feature_root5_F64", solver);
		root5_F65 = VariableFactory.bool("feature_root5_F65", solver);
		root5_F66 = VariableFactory.bool("feature_root5_F66", solver);
		root5_F67 = VariableFactory.bool("feature_root5_F67", solver);
		root5_F68 = VariableFactory.bool("feature_root5_F68", solver);
		root5_F69 = VariableFactory.bool("feature_root5_F69", solver);
		root5_F70 = VariableFactory.bool("feature_root5_F70", solver);
		root5_F19 = VariableFactory.bool("feature_root5_F19", solver);
		root5_F20 = VariableFactory.bool("feature_root5_F20", solver);
		root5_F8 = VariableFactory.bool("feature_root5_F8", solver);
		root5_F9 = VariableFactory.bool("feature_root5_F9", solver);
		root5_F10 = VariableFactory.bool("feature_root5_F10", solver);
		root5_F11 = VariableFactory.bool("feature_root5_F11", solver);
		root5_F30 = VariableFactory.bool("feature_root5_F30", solver);
		root5_F54 = VariableFactory.bool("feature_root5_F54", solver);
		root5_F55 = VariableFactory.bool("feature_root5_F55", solver);
		root5_F71 = VariableFactory.bool("feature_root5_F71", solver);
		root5_F72 = VariableFactory.bool("feature_root5_F72", solver);
		root5_F73 = VariableFactory.bool("feature_root5_F73", solver);
		root5_F74 = VariableFactory.bool("feature_root5_F74", solver);
		root5_F75 = VariableFactory.bool("feature_root5_F75", solver);
		root5_F76 = VariableFactory.bool("feature_root5_F76", solver);
		root5_F77 = VariableFactory.bool("feature_root5_F77", solver);
		root5_F78 = VariableFactory.bool("feature_root5_F78", solver);
		root5_F79 = VariableFactory.bool("feature_root5_F79", solver);
		root5_F56 = VariableFactory.bool("feature_root5_F56", solver);
		root5_F57 = VariableFactory.bool("feature_root5_F57", solver);
		root5_F58 = VariableFactory.bool("feature_root5_F58", solver);
		root5_F59 = VariableFactory.bool("feature_root5_F59", solver);
		root5_F60 = VariableFactory.bool("feature_root5_F60", solver);
		root5_F61 = VariableFactory.bool("feature_root5_F61", solver);
		root5_F12 = VariableFactory.bool("feature_root5_F12", solver);
		root5_F13 = VariableFactory.bool("feature_root5_F13", solver);
	}
	
	private static void initializeFeatureAttributes(){
		featureAttrAtribute1 = new HashMap<String, IntVar>();
		featureAttrAtribute0 = new HashMap<String, IntVar>();
		
		featureAttrAtribute1.put("root1_F64", VariableFactory.enumerated("root1_F64Atribute1", new int[]{0, 39}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F64, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F64"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F64, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F64"), "!=", 0));
		featureAttrAtribute0.put("root1_F64", VariableFactory.enumerated("root1_F64Atribute0", new int[]{0, 22}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F64, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F64"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F64, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F64"), "!=", 0));
		featureAttrAtribute1.put("root1_F2", VariableFactory.enumerated("root1_F2Atribute1", new int[]{0, 6}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F2, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F2"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F2, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F2"), "!=", 0));
		featureAttrAtribute0.put("root1_F2", VariableFactory.enumerated("root1_F2Atribute0", new int[]{0, 73}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F2, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F2"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F2, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F2"), "!=", 0));
		featureAttrAtribute1.put("root1_F3", VariableFactory.enumerated("root1_F3Atribute1", new int[]{0, 93}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F3, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F3"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F3, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F3"), "!=", 0));
		featureAttrAtribute0.put("root1_F3", VariableFactory.enumerated("root1_F3Atribute0", new int[]{0, 44}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F3, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F3"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F3, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F3"), "!=", 0));
		featureAttrAtribute1.put("root1_F4", VariableFactory.enumerated("root1_F4Atribute1", new int[]{0, 28}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F4, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F4"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F4, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F4"), "!=", 0));
		featureAttrAtribute0.put("root1_F4", VariableFactory.enumerated("root1_F4Atribute0", new int[]{0, 91}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F4, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F4"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F4, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F4"), "!=", 0));
		featureAttrAtribute1.put("root1_F5", VariableFactory.enumerated("root1_F5Atribute1", new int[]{0, 48}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F5, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F5"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F5, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F5"), "!=", 0));
		featureAttrAtribute0.put("root1_F5", VariableFactory.enumerated("root1_F5Atribute0", new int[]{0, 24}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F5, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F5"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F5, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F5"), "!=", 0));
		featureAttrAtribute1.put("root1_F33", VariableFactory.enumerated("root1_F33Atribute1", new int[]{0, 5}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F33, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F33"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F33, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F33"), "!=", 0));
		featureAttrAtribute0.put("root1_F33", VariableFactory.enumerated("root1_F33Atribute0", new int[]{0, 43}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F33, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F33"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F33, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F33"), "!=", 0));
		featureAttrAtribute1.put("root1_F34", VariableFactory.enumerated("root1_F34Atribute1", new int[]{0, 72}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F34, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F34"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F34, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F34"), "!=", 0));
		featureAttrAtribute0.put("root1_F34", VariableFactory.enumerated("root1_F34Atribute0", new int[]{0, 61}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F34, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F34"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F34, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F34"), "!=", 0));
		featureAttrAtribute1.put("root1_F35", VariableFactory.enumerated("root1_F35Atribute1", new int[]{0, 57}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F35, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F35"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F35, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F35"), "!=", 0));
		featureAttrAtribute0.put("root1_F35", VariableFactory.enumerated("root1_F35Atribute0", new int[]{0, 71}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F35, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F35"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F35, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F35"), "!=", 0));
		featureAttrAtribute1.put("root1_F47", VariableFactory.enumerated("root1_F47Atribute1", new int[]{0, 73}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F47, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F47"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F47, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F47"), "!=", 0));
		featureAttrAtribute0.put("root1_F47", VariableFactory.enumerated("root1_F47Atribute0", new int[]{0, 33}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F47, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F47"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F47, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F47"), "!=", 0));
		featureAttrAtribute1.put("root1_F37", VariableFactory.enumerated("root1_F37Atribute1", new int[]{0, 46}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F37, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F37"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F37, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F37"), "!=", 0));
		featureAttrAtribute0.put("root1_F37", VariableFactory.enumerated("root1_F37Atribute0", new int[]{0, 29}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F37, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F37"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F37, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F37"), "!=", 0));
		featureAttrAtribute1.put("root1_F38", VariableFactory.enumerated("root1_F38Atribute1", new int[]{0, 60}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F38, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F38"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F38, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F38"), "!=", 0));
		featureAttrAtribute0.put("root1_F38", VariableFactory.enumerated("root1_F38Atribute0", new int[]{0, 95}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F38, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F38"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F38, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F38"), "!=", 0));
		featureAttrAtribute1.put("root1_F39", VariableFactory.enumerated("root1_F39Atribute1", new int[]{0, 74}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F39, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F39"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F39, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F39"), "!=", 0));
		featureAttrAtribute0.put("root1_F39", VariableFactory.enumerated("root1_F39Atribute0", new int[]{0, 30}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F39, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F39"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F39, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F39"), "!=", 0));
		featureAttrAtribute1.put("root1_F12", VariableFactory.enumerated("root1_F12Atribute1", new int[]{0, 89}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F12, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F12"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F12, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F12"), "!=", 0));
		featureAttrAtribute0.put("root1_F12", VariableFactory.enumerated("root1_F12Atribute0", new int[]{0, 89}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F12, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F12"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F12, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F12"), "!=", 0));
		featureAttrAtribute1.put("root1_F65", VariableFactory.enumerated("root1_F65Atribute1", new int[]{0, 46}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F65, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F65"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F65, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F65"), "!=", 0));
		featureAttrAtribute0.put("root1_F65", VariableFactory.enumerated("root1_F65Atribute0", new int[]{0, 82}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F65, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F65"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F65, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F65"), "!=", 0));
		featureAttrAtribute1.put("root1_F66", VariableFactory.enumerated("root1_F66Atribute1", new int[]{0, 35}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F66, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F66"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F66, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F66"), "!=", 0));
		featureAttrAtribute0.put("root1_F66", VariableFactory.enumerated("root1_F66Atribute0", new int[]{0, 30}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F66, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F66"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F66, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F66"), "!=", 0));
		featureAttrAtribute1.put("root1_F67", VariableFactory.enumerated("root1_F67Atribute1", new int[]{0, 64}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F67, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F67"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F67, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F67"), "!=", 0));
		featureAttrAtribute0.put("root1_F67", VariableFactory.enumerated("root1_F67Atribute0", new int[]{0, 63}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F67, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F67"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F67, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F67"), "!=", 0));
		featureAttrAtribute1.put("root1_F68", VariableFactory.enumerated("root1_F68Atribute1", new int[]{0, 77}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F68, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F68"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F68, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F68"), "!=", 0));
		featureAttrAtribute0.put("root1_F68", VariableFactory.enumerated("root1_F68Atribute0", new int[]{0, 30}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F68, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F68"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F68, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F68"), "!=", 0));
		featureAttrAtribute1.put("root1_F69", VariableFactory.enumerated("root1_F69Atribute1", new int[]{0, 36}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F69, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F69"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F69, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F69"), "!=", 0));
		featureAttrAtribute0.put("root1_F69", VariableFactory.enumerated("root1_F69Atribute0", new int[]{0, 29}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F69, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F69"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F69, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F69"), "!=", 0));
		featureAttrAtribute1.put("root1_F70", VariableFactory.enumerated("root1_F70Atribute1", new int[]{0, 69}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F70, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F70"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F70, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F70"), "!=", 0));
		featureAttrAtribute0.put("root1_F70", VariableFactory.enumerated("root1_F70Atribute0", new int[]{0, 29}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F70, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F70"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F70, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F70"), "!=", 0));
		featureAttrAtribute1.put("root1_F71", VariableFactory.enumerated("root1_F71Atribute1", new int[]{0, 87}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F71, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F71"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F71, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F71"), "!=", 0));
		featureAttrAtribute0.put("root1_F71", VariableFactory.enumerated("root1_F71Atribute0", new int[]{0, 50}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F71, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F71"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F71, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F71"), "!=", 0));
		featureAttrAtribute1.put("root1_F72", VariableFactory.enumerated("root1_F72Atribute1", new int[]{0, 93}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F72, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F72"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F72, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F72"), "!=", 0));
		featureAttrAtribute0.put("root1_F72", VariableFactory.enumerated("root1_F72Atribute0", new int[]{0, 92}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F72, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F72"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F72, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F72"), "!=", 0));
		featureAttrAtribute1.put("root1_F73", VariableFactory.enumerated("root1_F73Atribute1", new int[]{0, 34}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F73, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F73"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F73, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F73"), "!=", 0));
		featureAttrAtribute0.put("root1_F73", VariableFactory.enumerated("root1_F73Atribute0", new int[]{0, 51}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F73, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F73"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F73, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F73"), "!=", 0));
		featureAttrAtribute1.put("root1_F48", VariableFactory.enumerated("root1_F48Atribute1", new int[]{0, 95}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F48, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F48"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F48, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F48"), "!=", 0));
		featureAttrAtribute0.put("root1_F48", VariableFactory.enumerated("root1_F48Atribute0", new int[]{0, 55}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F48, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F48"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F48, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F48"), "!=", 0));
		featureAttrAtribute1.put("root1_F32", VariableFactory.enumerated("root1_F32Atribute1", new int[]{0, 60}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F32, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F32"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F32, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F32"), "!=", 0));
		featureAttrAtribute0.put("root1_F32", VariableFactory.enumerated("root1_F32Atribute0", new int[]{0, 77}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F32, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F32"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F32, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F32"), "!=", 0));
		featureAttrAtribute1.put("root1_F58", VariableFactory.enumerated("root1_F58Atribute1", new int[]{0, 48}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F58, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F58"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F58, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F58"), "!=", 0));
		featureAttrAtribute0.put("root1_F58", VariableFactory.enumerated("root1_F58Atribute0", new int[]{0, 82}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F58, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F58"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F58, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F58"), "!=", 0));
		featureAttrAtribute1.put("root1_F59", VariableFactory.enumerated("root1_F59Atribute1", new int[]{0, 99}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F59, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F59"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F59, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F59"), "!=", 0));
		featureAttrAtribute0.put("root1_F59", VariableFactory.enumerated("root1_F59Atribute0", new int[]{0, 60}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F59, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F59"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F59, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F59"), "!=", 0));
		featureAttrAtribute1.put("root1_F60", VariableFactory.enumerated("root1_F60Atribute1", new int[]{0, 80}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F60, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F60"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F60, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F60"), "!=", 0));
		featureAttrAtribute0.put("root1_F60", VariableFactory.enumerated("root1_F60Atribute0", new int[]{0, 75}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F60, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F60"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F60, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F60"), "!=", 0));
		featureAttrAtribute1.put("root1_F61", VariableFactory.enumerated("root1_F61Atribute1", new int[]{0, 54}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F61, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F61"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F61, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F61"), "!=", 0));
		featureAttrAtribute0.put("root1_F61", VariableFactory.enumerated("root1_F61Atribute0", new int[]{0, 63}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F61, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F61"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F61, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F61"), "!=", 0));
		featureAttrAtribute1.put("root1_F62", VariableFactory.enumerated("root1_F62Atribute1", new int[]{0, 53}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F62, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F62"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F62, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F62"), "!=", 0));
		featureAttrAtribute0.put("root1_F62", VariableFactory.enumerated("root1_F62Atribute0", new int[]{0, 72}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F62, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F62"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F62, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F62"), "!=", 0));
		featureAttrAtribute1.put("root1_F79", VariableFactory.enumerated("root1_F79Atribute1", new int[]{0, 43}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F79, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F79"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F79, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F79"), "!=", 0));
		featureAttrAtribute0.put("root1_F79", VariableFactory.enumerated("root1_F79Atribute0", new int[]{0, 77}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F79, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F79"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F79, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F79"), "!=", 0));
		featureAttrAtribute1.put("root1_F17", VariableFactory.enumerated("root1_F17Atribute1", new int[]{0, 93}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F17, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F17"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F17, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F17"), "!=", 0));
		featureAttrAtribute0.put("root1_F17", VariableFactory.enumerated("root1_F17Atribute0", new int[]{0, 53}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F17, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F17"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F17, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F17"), "!=", 0));
		featureAttrAtribute1.put("root1_F18", VariableFactory.enumerated("root1_F18Atribute1", new int[]{0, 56}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F18, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F18"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F18, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F18"), "!=", 0));
		featureAttrAtribute0.put("root1_F18", VariableFactory.enumerated("root1_F18Atribute0", new int[]{0, 11}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F18, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F18"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F18, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F18"), "!=", 0));
		featureAttrAtribute1.put("root1_F19", VariableFactory.enumerated("root1_F19Atribute1", new int[]{0, 29}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F19, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F19"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F19, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F19"), "!=", 0));
		featureAttrAtribute0.put("root1_F19", VariableFactory.enumerated("root1_F19Atribute0", new int[]{0, 14}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F19, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F19"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F19, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F19"), "!=", 0));
		featureAttrAtribute1.put("root1_F40", VariableFactory.enumerated("root1_F40Atribute1", new int[]{0, 19}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F40, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F40"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F40, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F40"), "!=", 0));
		featureAttrAtribute0.put("root1_F40", VariableFactory.enumerated("root1_F40Atribute0", new int[]{0, 71}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F40, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F40"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F40, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F40"), "!=", 0));
		featureAttrAtribute1.put("root1_F41", VariableFactory.enumerated("root1_F41Atribute1", new int[]{0, 77}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F41, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F41"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F41, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F41"), "!=", 0));
		featureAttrAtribute0.put("root1_F41", VariableFactory.enumerated("root1_F41Atribute0", new int[]{0, 84}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F41, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F41"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F41, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F41"), "!=", 0));
		featureAttrAtribute1.put("root1_F42", VariableFactory.enumerated("root1_F42Atribute1", new int[]{0, 53}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F42, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F42"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F42, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F42"), "!=", 0));
		featureAttrAtribute0.put("root1_F42", VariableFactory.enumerated("root1_F42Atribute0", new int[]{0, 41}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F42, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F42"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F42, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F42"), "!=", 0));
		featureAttrAtribute1.put("root1_F43", VariableFactory.enumerated("root1_F43Atribute1", new int[]{0, 29}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F43, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F43"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F43, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F43"), "!=", 0));
		featureAttrAtribute0.put("root1_F43", VariableFactory.enumerated("root1_F43Atribute0", new int[]{0, 75}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F43, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F43"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F43, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F43"), "!=", 0));
		featureAttrAtribute1.put("root1_F44", VariableFactory.enumerated("root1_F44Atribute1", new int[]{0, 5}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F44, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F44"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F44, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F44"), "!=", 0));
		featureAttrAtribute0.put("root1_F44", VariableFactory.enumerated("root1_F44Atribute0", new int[]{0, 4}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F44, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F44"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F44, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F44"), "!=", 0));
		featureAttrAtribute1.put("root1_F45", VariableFactory.enumerated("root1_F45Atribute1", new int[]{0, 61}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F45, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F45"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F45, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F45"), "!=", 0));
		featureAttrAtribute0.put("root1_F45", VariableFactory.enumerated("root1_F45Atribute0", new int[]{0, 35}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F45, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F45"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F45, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F45"), "!=", 0));
		featureAttrAtribute1.put("root1_F46", VariableFactory.enumerated("root1_F46Atribute1", new int[]{0, 64}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F46, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F46"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F46, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F46"), "!=", 0));
		featureAttrAtribute0.put("root1_F46", VariableFactory.enumerated("root1_F46Atribute0", new int[]{0, 82}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F46, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F46"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F46, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F46"), "!=", 0));
		featureAttrAtribute1.put("root1_F21", VariableFactory.enumerated("root1_F21Atribute1", new int[]{0, 88}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F21, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F21"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F21, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F21"), "!=", 0));
		featureAttrAtribute0.put("root1_F21", VariableFactory.enumerated("root1_F21Atribute0", new int[]{0, 28}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F21, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F21"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F21, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F21"), "!=", 0));
		featureAttrAtribute1.put("root1_F10", VariableFactory.enumerated("root1_F10Atribute1", new int[]{0, 45}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F10, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F10"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F10, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F10"), "!=", 0));
		featureAttrAtribute0.put("root1_F10", VariableFactory.enumerated("root1_F10Atribute0", new int[]{0, 96}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F10, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F10"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F10, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F10"), "!=", 0));
		featureAttrAtribute1.put("root1_F11", VariableFactory.enumerated("root1_F11Atribute1", new int[]{0, 87}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F11, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F11"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F11, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F11"), "!=", 0));
		featureAttrAtribute0.put("root1_F11", VariableFactory.enumerated("root1_F11Atribute0", new int[]{0, 8}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F11, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F11"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F11, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F11"), "!=", 0));
		featureAttrAtribute1.put("root1_F22", VariableFactory.enumerated("root1_F22Atribute1", new int[]{0, 82}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F22, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F22"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F22, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F22"), "!=", 0));
		featureAttrAtribute0.put("root1_F22", VariableFactory.enumerated("root1_F22Atribute0", new int[]{0, 24}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F22, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F22"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F22, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F22"), "!=", 0));
		featureAttrAtribute1.put("root1_F23", VariableFactory.enumerated("root1_F23Atribute1", new int[]{0, 10}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F23, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F23"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F23, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F23"), "!=", 0));
		featureAttrAtribute0.put("root1_F23", VariableFactory.enumerated("root1_F23Atribute0", new int[]{0, 65}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F23, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F23"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F23, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F23"), "!=", 0));
		featureAttrAtribute1.put("root1_F74", VariableFactory.enumerated("root1_F74Atribute1", new int[]{0, 30}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F74, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F74"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F74, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F74"), "!=", 0));
		featureAttrAtribute0.put("root1_F74", VariableFactory.enumerated("root1_F74Atribute0", new int[]{0, 3}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F74, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F74"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F74, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F74"), "!=", 0));
		featureAttrAtribute1.put("root1_F75", VariableFactory.enumerated("root1_F75Atribute1", new int[]{0, 21}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F75, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F75"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F75, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F75"), "!=", 0));
		featureAttrAtribute0.put("root1_F75", VariableFactory.enumerated("root1_F75Atribute0", new int[]{0, 20}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F75, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F75"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F75, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F75"), "!=", 0));
		featureAttrAtribute1.put("root1_F76", VariableFactory.enumerated("root1_F76Atribute1", new int[]{0, 47}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F76, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F76"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F76, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F76"), "!=", 0));
		featureAttrAtribute0.put("root1_F76", VariableFactory.enumerated("root1_F76Atribute0", new int[]{0, 70}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F76, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F76"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F76, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F76"), "!=", 0));
		featureAttrAtribute1.put("root1_F77", VariableFactory.enumerated("root1_F77Atribute1", new int[]{0, 70}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F77, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F77"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F77, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F77"), "!=", 0));
		featureAttrAtribute0.put("root1_F77", VariableFactory.enumerated("root1_F77Atribute0", new int[]{0, 10}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F77, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F77"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F77, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F77"), "!=", 0));
		featureAttrAtribute1.put("root1_F78", VariableFactory.enumerated("root1_F78Atribute1", new int[]{0, 22}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F78, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F78"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F78, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F78"), "!=", 0));
		featureAttrAtribute0.put("root1_F78", VariableFactory.enumerated("root1_F78Atribute0", new int[]{0, 66}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F78, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F78"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F78, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F78"), "!=", 0));
		featureAttrAtribute1.put("root1_F49", VariableFactory.enumerated("root1_F49Atribute1", new int[]{0, 80}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F49, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F49"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F49, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F49"), "!=", 0));
		featureAttrAtribute0.put("root1_F49", VariableFactory.enumerated("root1_F49Atribute0", new int[]{0, 75}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F49, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F49"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F49, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F49"), "!=", 0));
		featureAttrAtribute1.put("root1_F50", VariableFactory.enumerated("root1_F50Atribute1", new int[]{0, 34}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F50, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F50"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F50, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F50"), "!=", 0));
		featureAttrAtribute0.put("root1_F50", VariableFactory.enumerated("root1_F50Atribute0", new int[]{0, 20}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F50, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F50"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F50, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F50"), "!=", 0));
		featureAttrAtribute1.put("root1_F51", VariableFactory.enumerated("root1_F51Atribute1", new int[]{0, 67}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F51, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F51"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F51, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F51"), "!=", 0));
		featureAttrAtribute0.put("root1_F51", VariableFactory.enumerated("root1_F51Atribute0", new int[]{0, 43}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F51, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F51"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F51, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F51"), "!=", 0));
		featureAttrAtribute1.put("root1_F52", VariableFactory.enumerated("root1_F52Atribute1", new int[]{0, 63}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F52, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F52"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F52, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F52"), "!=", 0));
		featureAttrAtribute0.put("root1_F52", VariableFactory.enumerated("root1_F52Atribute0", new int[]{0, 95}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F52, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F52"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F52, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F52"), "!=", 0));
		featureAttrAtribute1.put("root1_F53", VariableFactory.enumerated("root1_F53Atribute1", new int[]{0, 100}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F53, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F53"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F53, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F53"), "!=", 0));
		featureAttrAtribute0.put("root1_F53", VariableFactory.enumerated("root1_F53Atribute0", new int[]{0, 77}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F53, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F53"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F53, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F53"), "!=", 0));
		featureAttrAtribute1.put("root1_F54", VariableFactory.enumerated("root1_F54Atribute1", new int[]{0, 30}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F54, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F54"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F54, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F54"), "!=", 0));
		featureAttrAtribute0.put("root1_F54", VariableFactory.enumerated("root1_F54Atribute0", new int[]{0, 91}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F54, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F54"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F54, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F54"), "!=", 0));
		featureAttrAtribute1.put("root1_F55", VariableFactory.enumerated("root1_F55Atribute1", new int[]{0, 72}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F55, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F55"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F55, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F55"), "!=", 0));
		featureAttrAtribute0.put("root1_F55", VariableFactory.enumerated("root1_F55Atribute0", new int[]{0, 73}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F55, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F55"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F55, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F55"), "!=", 0));
		featureAttrAtribute1.put("root1_F56", VariableFactory.enumerated("root1_F56Atribute1", new int[]{0, 4}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F56, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F56"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F56, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F56"), "!=", 0));
		featureAttrAtribute0.put("root1_F56", VariableFactory.enumerated("root1_F56Atribute0", new int[]{0, 60}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F56, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F56"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F56, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F56"), "!=", 0));
		featureAttrAtribute1.put("root1_F57", VariableFactory.enumerated("root1_F57Atribute1", new int[]{0, 9}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F57, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F57"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F57, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F57"), "!=", 0));
		featureAttrAtribute0.put("root1_F57", VariableFactory.enumerated("root1_F57Atribute0", new int[]{0, 3}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F57, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F57"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F57, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F57"), "!=", 0));
		featureAttrAtribute1.put("root1_F26", VariableFactory.enumerated("root1_F26Atribute1", new int[]{0, 55}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F26, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F26"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F26, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F26"), "!=", 0));
		featureAttrAtribute0.put("root1_F26", VariableFactory.enumerated("root1_F26Atribute0", new int[]{0, 59}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F26, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F26"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F26, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F26"), "!=", 0));
		featureAttrAtribute1.put("root1_F27", VariableFactory.enumerated("root1_F27Atribute1", new int[]{0, 55}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F27, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F27"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F27, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F27"), "!=", 0));
		featureAttrAtribute0.put("root1_F27", VariableFactory.enumerated("root1_F27Atribute0", new int[]{0, 16}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F27, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F27"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F27, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F27"), "!=", 0));
		featureAttrAtribute1.put("root1_F28", VariableFactory.enumerated("root1_F28Atribute1", new int[]{0, 62}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F28, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F28"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F28, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F28"), "!=", 0));
		featureAttrAtribute0.put("root1_F28", VariableFactory.enumerated("root1_F28Atribute0", new int[]{0, 40}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F28, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F28"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F28, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F28"), "!=", 0));
		featureAttrAtribute1.put("root1_F29", VariableFactory.enumerated("root1_F29Atribute1", new int[]{0, 4}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F29, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F29"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F29, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F29"), "!=", 0));
		featureAttrAtribute0.put("root1_F29", VariableFactory.enumerated("root1_F29Atribute0", new int[]{0, 32}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F29, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F29"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F29, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F29"), "!=", 0));
		featureAttrAtribute1.put("root1_F30", VariableFactory.enumerated("root1_F30Atribute1", new int[]{0, 23}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F30, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F30"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F30, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F30"), "!=", 0));
		featureAttrAtribute0.put("root1_F30", VariableFactory.enumerated("root1_F30Atribute0", new int[]{0, 49}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F30, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F30"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F30, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F30"), "!=", 0));
		featureAttrAtribute1.put("root1_F31", VariableFactory.enumerated("root1_F31Atribute1", new int[]{0, 84}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F31, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F31"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F31, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F31"), "!=", 0));
		featureAttrAtribute0.put("root1_F31", VariableFactory.enumerated("root1_F31Atribute0", new int[]{0, 70}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F31, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F31"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F31, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F31"), "!=", 0));
		featureAttrAtribute1.put("root2_F1", VariableFactory.enumerated("root2_F1Atribute1", new int[]{0, 92}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F1, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F1"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F1, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F1"), "!=", 0));
		featureAttrAtribute0.put("root2_F1", VariableFactory.enumerated("root2_F1Atribute0", new int[]{0, 37}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F1, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F1"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F1, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F1"), "!=", 0));
		featureAttrAtribute1.put("root2_F2", VariableFactory.enumerated("root2_F2Atribute1", new int[]{0, 29}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F2, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F2"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F2, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F2"), "!=", 0));
		featureAttrAtribute0.put("root2_F2", VariableFactory.enumerated("root2_F2Atribute0", new int[]{0, 12}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F2, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F2"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F2, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F2"), "!=", 0));
		featureAttrAtribute1.put("root2_F33", VariableFactory.enumerated("root2_F33Atribute1", new int[]{0, 58}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F33, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F33"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F33, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F33"), "!=", 0));
		featureAttrAtribute0.put("root2_F33", VariableFactory.enumerated("root2_F33Atribute0", new int[]{0, 50}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F33, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F33"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F33, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F33"), "!=", 0));
		featureAttrAtribute1.put("root2_F34", VariableFactory.enumerated("root2_F34Atribute1", new int[]{0, 19}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F34, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F34"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F34, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F34"), "!=", 0));
		featureAttrAtribute0.put("root2_F34", VariableFactory.enumerated("root2_F34Atribute0", new int[]{0, 80}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F34, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F34"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F34, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F34"), "!=", 0));
		featureAttrAtribute1.put("root2_F35", VariableFactory.enumerated("root2_F35Atribute1", new int[]{0, 13}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F35, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F35"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F35, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F35"), "!=", 0));
		featureAttrAtribute0.put("root2_F35", VariableFactory.enumerated("root2_F35Atribute0", new int[]{0, 37}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F35, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F35"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F35, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F35"), "!=", 0));
		featureAttrAtribute1.put("root2_F36", VariableFactory.enumerated("root2_F36Atribute1", new int[]{0, 2}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F36, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F36"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F36, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F36"), "!=", 0));
		featureAttrAtribute0.put("root2_F36", VariableFactory.enumerated("root2_F36Atribute0", new int[]{0, 95}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F36, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F36"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F36, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F36"), "!=", 0));
		featureAttrAtribute1.put("root2_F37", VariableFactory.enumerated("root2_F37Atribute1", new int[]{0, 22}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F37, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F37"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F37, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F37"), "!=", 0));
		featureAttrAtribute0.put("root2_F37", VariableFactory.enumerated("root2_F37Atribute0", new int[]{0, 3}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F37, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F37"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F37, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F37"), "!=", 0));
		featureAttrAtribute1.put("root2_F71", VariableFactory.enumerated("root2_F71Atribute1", new int[]{0, 63}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F71, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F71"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F71, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F71"), "!=", 0));
		featureAttrAtribute0.put("root2_F71", VariableFactory.enumerated("root2_F71Atribute0", new int[]{0, 52}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F71, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F71"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F71, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F71"), "!=", 0));
		featureAttrAtribute1.put("root2_F72", VariableFactory.enumerated("root2_F72Atribute1", new int[]{0, 51}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F72, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F72"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F72, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F72"), "!=", 0));
		featureAttrAtribute0.put("root2_F72", VariableFactory.enumerated("root2_F72Atribute0", new int[]{0, 15}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F72, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F72"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F72, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F72"), "!=", 0));
		featureAttrAtribute1.put("root2_F73", VariableFactory.enumerated("root2_F73Atribute1", new int[]{0, 54}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F73, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F73"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F73, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F73"), "!=", 0));
		featureAttrAtribute0.put("root2_F73", VariableFactory.enumerated("root2_F73Atribute0", new int[]{0, 81}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F73, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F73"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F73, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F73"), "!=", 0));
		featureAttrAtribute1.put("root2_F74", VariableFactory.enumerated("root2_F74Atribute1", new int[]{0, 8}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F74, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F74"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F74, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F74"), "!=", 0));
		featureAttrAtribute0.put("root2_F74", VariableFactory.enumerated("root2_F74Atribute0", new int[]{0, 86}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F74, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F74"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F74, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F74"), "!=", 0));
		featureAttrAtribute1.put("root2_F75", VariableFactory.enumerated("root2_F75Atribute1", new int[]{0, 36}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F75, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F75"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F75, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F75"), "!=", 0));
		featureAttrAtribute0.put("root2_F75", VariableFactory.enumerated("root2_F75Atribute0", new int[]{0, 54}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F75, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F75"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F75, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F75"), "!=", 0));
		featureAttrAtribute1.put("root2_F76", VariableFactory.enumerated("root2_F76Atribute1", new int[]{0, 61}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F76, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F76"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F76, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F76"), "!=", 0));
		featureAttrAtribute0.put("root2_F76", VariableFactory.enumerated("root2_F76Atribute0", new int[]{0, 83}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F76, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F76"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F76, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F76"), "!=", 0));
		featureAttrAtribute1.put("root2_F77", VariableFactory.enumerated("root2_F77Atribute1", new int[]{0, 63}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F77, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F77"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F77, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F77"), "!=", 0));
		featureAttrAtribute0.put("root2_F77", VariableFactory.enumerated("root2_F77Atribute0", new int[]{0, 53}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F77, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F77"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F77, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F77"), "!=", 0));
		featureAttrAtribute1.put("root2_F78", VariableFactory.enumerated("root2_F78Atribute1", new int[]{0, 11}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F78, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F78"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F78, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F78"), "!=", 0));
		featureAttrAtribute0.put("root2_F78", VariableFactory.enumerated("root2_F78Atribute0", new int[]{0, 20}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F78, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F78"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F78, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F78"), "!=", 0));
		featureAttrAtribute1.put("root2_F39", VariableFactory.enumerated("root2_F39Atribute1", new int[]{0, 70}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F39, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F39"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F39, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F39"), "!=", 0));
		featureAttrAtribute0.put("root2_F39", VariableFactory.enumerated("root2_F39Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F39, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F39"), "=", 0));
		featureAttrAtribute1.put("root2_F4", VariableFactory.enumerated("root2_F4Atribute1", new int[]{0, 60}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F4, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F4"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F4, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F4"), "!=", 0));
		featureAttrAtribute0.put("root2_F4", VariableFactory.enumerated("root2_F4Atribute0", new int[]{0, 35}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F4, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F4"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F4, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F4"), "!=", 0));
		featureAttrAtribute1.put("root2_F9", VariableFactory.enumerated("root2_F9Atribute1", new int[]{0, 99}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F9, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F9"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F9, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F9"), "!=", 0));
		featureAttrAtribute0.put("root2_F9", VariableFactory.enumerated("root2_F9Atribute0", new int[]{0, 92}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F9, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F9"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F9, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F9"), "!=", 0));
		featureAttrAtribute1.put("root2_F6", VariableFactory.enumerated("root2_F6Atribute1", new int[]{0, 67}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F6, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F6"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F6, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F6"), "!=", 0));
		featureAttrAtribute0.put("root2_F6", VariableFactory.enumerated("root2_F6Atribute0", new int[]{0, 44}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F6, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F6"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F6, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F6"), "!=", 0));
		featureAttrAtribute1.put("root2_F11", VariableFactory.enumerated("root2_F11Atribute1", new int[]{0, 63}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F11, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F11"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F11, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F11"), "!=", 0));
		featureAttrAtribute0.put("root2_F11", VariableFactory.enumerated("root2_F11Atribute0", new int[]{0, 27}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F11, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F11"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F11, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F11"), "!=", 0));
		featureAttrAtribute1.put("root2_F40", VariableFactory.enumerated("root2_F40Atribute1", new int[]{0, 85}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F40, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F40"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F40, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F40"), "!=", 0));
		featureAttrAtribute0.put("root2_F40", VariableFactory.enumerated("root2_F40Atribute0", new int[]{0, 52}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F40, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F40"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F40, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F40"), "!=", 0));
		featureAttrAtribute1.put("root2_F32", VariableFactory.enumerated("root2_F32Atribute1", new int[]{0, 14}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F32, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F32"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F32, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F32"), "!=", 0));
		featureAttrAtribute0.put("root2_F32", VariableFactory.enumerated("root2_F32Atribute0", new int[]{0, 91}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F32, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F32"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F32, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F32"), "!=", 0));
		featureAttrAtribute1.put("root2_F13", VariableFactory.enumerated("root2_F13Atribute1", new int[]{0, 45}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F13, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F13"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F13, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F13"), "!=", 0));
		featureAttrAtribute0.put("root2_F13", VariableFactory.enumerated("root2_F13Atribute0", new int[]{0, 47}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F13, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F13"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F13, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F13"), "!=", 0));
		featureAttrAtribute1.put("root2_F14", VariableFactory.enumerated("root2_F14Atribute1", new int[]{0, 31}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F14, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F14"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F14, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F14"), "!=", 0));
		featureAttrAtribute0.put("root2_F14", VariableFactory.enumerated("root2_F14Atribute0", new int[]{0, 89}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F14, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F14"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F14, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F14"), "!=", 0));
		featureAttrAtribute1.put("root2_F17", VariableFactory.enumerated("root2_F17Atribute1", new int[]{0, 35}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F17, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F17"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F17, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F17"), "!=", 0));
		featureAttrAtribute0.put("root2_F17", VariableFactory.enumerated("root2_F17Atribute0", new int[]{0, 57}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F17, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F17"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F17, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F17"), "!=", 0));
		featureAttrAtribute1.put("root2_F18", VariableFactory.enumerated("root2_F18Atribute1", new int[]{0, 54}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F18, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F18"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F18, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F18"), "!=", 0));
		featureAttrAtribute0.put("root2_F18", VariableFactory.enumerated("root2_F18Atribute0", new int[]{0, 30}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F18, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F18"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F18, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F18"), "!=", 0));
		featureAttrAtribute1.put("root2_F19", VariableFactory.enumerated("root2_F19Atribute1", new int[]{0, 17}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F19, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F19"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F19, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F19"), "!=", 0));
		featureAttrAtribute0.put("root2_F19", VariableFactory.enumerated("root2_F19Atribute0", new int[]{0, 47}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F19, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F19"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F19, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F19"), "!=", 0));
		featureAttrAtribute1.put("root2_F20", VariableFactory.enumerated("root2_F20Atribute1", new int[]{0, 32}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F20, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F20"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F20, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F20"), "!=", 0));
		featureAttrAtribute0.put("root2_F20", VariableFactory.enumerated("root2_F20Atribute0", new int[]{0, 52}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F20, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F20"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F20, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F20"), "!=", 0));
		featureAttrAtribute1.put("root2_F21", VariableFactory.enumerated("root2_F21Atribute1", new int[]{0, 87}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F21, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F21"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F21, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F21"), "!=", 0));
		featureAttrAtribute0.put("root2_F21", VariableFactory.enumerated("root2_F21Atribute0", new int[]{0, 33}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F21, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F21"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F21, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F21"), "!=", 0));
		featureAttrAtribute1.put("root2_F22", VariableFactory.enumerated("root2_F22Atribute1", new int[]{0, 50}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F22, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F22"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F22, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F22"), "!=", 0));
		featureAttrAtribute0.put("root2_F22", VariableFactory.enumerated("root2_F22Atribute0", new int[]{0, 69}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F22, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F22"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F22, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F22"), "!=", 0));
		featureAttrAtribute1.put("root2_F23", VariableFactory.enumerated("root2_F23Atribute1", new int[]{0, 37}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F23, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F23"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F23, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F23"), "!=", 0));
		featureAttrAtribute0.put("root2_F23", VariableFactory.enumerated("root2_F23Atribute0", new int[]{0, 62}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F23, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F23"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F23, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F23"), "!=", 0));
		featureAttrAtribute1.put("root2_F24", VariableFactory.enumerated("root2_F24Atribute1", new int[]{0, 76}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F24, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F24"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F24, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F24"), "!=", 0));
		featureAttrAtribute0.put("root2_F24", VariableFactory.enumerated("root2_F24Atribute0", new int[]{0, 36}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F24, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F24"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F24, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F24"), "!=", 0));
		featureAttrAtribute1.put("root2_F26", VariableFactory.enumerated("root2_F26Atribute1", new int[]{0, 83}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F26, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F26"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F26, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F26"), "!=", 0));
		featureAttrAtribute0.put("root2_F26", VariableFactory.enumerated("root2_F26Atribute0", new int[]{0, 53}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F26, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F26"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F26, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F26"), "!=", 0));
		featureAttrAtribute1.put("root2_F27", VariableFactory.enumerated("root2_F27Atribute1", new int[]{0, 47}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F27, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F27"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F27, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F27"), "!=", 0));
		featureAttrAtribute0.put("root2_F27", VariableFactory.enumerated("root2_F27Atribute0", new int[]{0, 66}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F27, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F27"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F27, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F27"), "!=", 0));
		featureAttrAtribute1.put("root2_F28", VariableFactory.enumerated("root2_F28Atribute1", new int[]{0, 27}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F28, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F28"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F28, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F28"), "!=", 0));
		featureAttrAtribute0.put("root2_F28", VariableFactory.enumerated("root2_F28Atribute0", new int[]{0, 15}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F28, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F28"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F28, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F28"), "!=", 0));
		featureAttrAtribute1.put("root2_F29", VariableFactory.enumerated("root2_F29Atribute1", new int[]{0, 32}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F29, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F29"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F29, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F29"), "!=", 0));
		featureAttrAtribute0.put("root2_F29", VariableFactory.enumerated("root2_F29Atribute0", new int[]{0, 58}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F29, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F29"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F29, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F29"), "!=", 0));
		featureAttrAtribute1.put("root2_F41", VariableFactory.enumerated("root2_F41Atribute1", new int[]{0, 25}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F41, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F41"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F41, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F41"), "!=", 0));
		featureAttrAtribute0.put("root2_F41", VariableFactory.enumerated("root2_F41Atribute0", new int[]{0, 80}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F41, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F41"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F41, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F41"), "!=", 0));
		featureAttrAtribute1.put("root2_F53", VariableFactory.enumerated("root2_F53Atribute1", new int[]{0, 56}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F53, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F53"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F53, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F53"), "!=", 0));
		featureAttrAtribute0.put("root2_F53", VariableFactory.enumerated("root2_F53Atribute0", new int[]{0, 33}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F53, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F53"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F53, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F53"), "!=", 0));
		featureAttrAtribute1.put("root2_F54", VariableFactory.enumerated("root2_F54Atribute1", new int[]{0, 17}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F54, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F54"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F54, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F54"), "!=", 0));
		featureAttrAtribute0.put("root2_F54", VariableFactory.enumerated("root2_F54Atribute0", new int[]{0, 50}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F54, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F54"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F54, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F54"), "!=", 0));
		featureAttrAtribute1.put("root2_F55", VariableFactory.enumerated("root2_F55Atribute1", new int[]{0, 92}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F55, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F55"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F55, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F55"), "!=", 0));
		featureAttrAtribute0.put("root2_F55", VariableFactory.enumerated("root2_F55Atribute0", new int[]{0, 75}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F55, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F55"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F55, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F55"), "!=", 0));
		featureAttrAtribute1.put("root2_F56", VariableFactory.enumerated("root2_F56Atribute1", new int[]{0, 33}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F56, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F56"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F56, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F56"), "!=", 0));
		featureAttrAtribute0.put("root2_F56", VariableFactory.enumerated("root2_F56Atribute0", new int[]{0, 32}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F56, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F56"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F56, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F56"), "!=", 0));
		featureAttrAtribute1.put("root2_F57", VariableFactory.enumerated("root2_F57Atribute1", new int[]{0, 39}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F57, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F57"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F57, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F57"), "!=", 0));
		featureAttrAtribute0.put("root2_F57", VariableFactory.enumerated("root2_F57Atribute0", new int[]{0, 90}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F57, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F57"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F57, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F57"), "!=", 0));
		featureAttrAtribute1.put("root2_F58", VariableFactory.enumerated("root2_F58Atribute1", new int[]{0, 19}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F58, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F58"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F58, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F58"), "!=", 0));
		featureAttrAtribute0.put("root2_F58", VariableFactory.enumerated("root2_F58Atribute0", new int[]{0, 74}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F58, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F58"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F58, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F58"), "!=", 0));
		featureAttrAtribute1.put("root2_F59", VariableFactory.enumerated("root2_F59Atribute1", new int[]{0, 56}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F59, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F59"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F59, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F59"), "!=", 0));
		featureAttrAtribute0.put("root2_F59", VariableFactory.enumerated("root2_F59Atribute0", new int[]{0, 9}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F59, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F59"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F59, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F59"), "!=", 0));
		featureAttrAtribute1.put("root2_F60", VariableFactory.enumerated("root2_F60Atribute1", new int[]{0, 51}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F60, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F60"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F60, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F60"), "!=", 0));
		featureAttrAtribute0.put("root2_F60", VariableFactory.enumerated("root2_F60Atribute0", new int[]{0, 27}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F60, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F60"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F60, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F60"), "!=", 0));
		featureAttrAtribute1.put("root2_F43", VariableFactory.enumerated("root2_F43Atribute1", new int[]{0, 86}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F43, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F43"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F43, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F43"), "!=", 0));
		featureAttrAtribute0.put("root2_F43", VariableFactory.enumerated("root2_F43Atribute0", new int[]{0, 79}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F43, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F43"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F43, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F43"), "!=", 0));
		featureAttrAtribute1.put("root2_F44", VariableFactory.enumerated("root2_F44Atribute1", new int[]{0, 9}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F44, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F44"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F44, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F44"), "!=", 0));
		featureAttrAtribute0.put("root2_F44", VariableFactory.enumerated("root2_F44Atribute0", new int[]{0, 47}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F44, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F44"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F44, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F44"), "!=", 0));
		featureAttrAtribute1.put("root2_F45", VariableFactory.enumerated("root2_F45Atribute1", new int[]{0, 56}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F45, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F45"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F45, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F45"), "!=", 0));
		featureAttrAtribute0.put("root2_F45", VariableFactory.enumerated("root2_F45Atribute0", new int[]{0, 24}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F45, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F45"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F45, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F45"), "!=", 0));
		featureAttrAtribute1.put("root2_F61", VariableFactory.enumerated("root2_F61Atribute1", new int[]{0, 98}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F61, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F61"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F61, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F61"), "!=", 0));
		featureAttrAtribute0.put("root2_F61", VariableFactory.enumerated("root2_F61Atribute0", new int[]{0, 53}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F61, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F61"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F61, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F61"), "!=", 0));
		featureAttrAtribute1.put("root2_F62", VariableFactory.enumerated("root2_F62Atribute1", new int[]{0, 3}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F62, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F62"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F62, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F62"), "!=", 0));
		featureAttrAtribute0.put("root2_F62", VariableFactory.enumerated("root2_F62Atribute0", new int[]{0, 37}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F62, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F62"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F62, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F62"), "!=", 0));
		featureAttrAtribute1.put("root2_F63", VariableFactory.enumerated("root2_F63Atribute1", new int[]{0, 62}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F63, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F63"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F63, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F63"), "!=", 0));
		featureAttrAtribute0.put("root2_F63", VariableFactory.enumerated("root2_F63Atribute0", new int[]{0, 64}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F63, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F63"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F63, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F63"), "!=", 0));
		featureAttrAtribute1.put("root2_F64", VariableFactory.enumerated("root2_F64Atribute1", new int[]{0, 27}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F64, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F64"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F64, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F64"), "!=", 0));
		featureAttrAtribute0.put("root2_F64", VariableFactory.enumerated("root2_F64Atribute0", new int[]{0, 77}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F64, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F64"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F64, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F64"), "!=", 0));
		featureAttrAtribute1.put("root2_F65", VariableFactory.enumerated("root2_F65Atribute1", new int[]{0, 10}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F65, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F65"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F65, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F65"), "!=", 0));
		featureAttrAtribute0.put("root2_F65", VariableFactory.enumerated("root2_F65Atribute0", new int[]{0, 16}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F65, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F65"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F65, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F65"), "!=", 0));
		featureAttrAtribute1.put("root2_F66", VariableFactory.enumerated("root2_F66Atribute1", new int[]{0, 59}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F66, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F66"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F66, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F66"), "!=", 0));
		featureAttrAtribute0.put("root2_F66", VariableFactory.enumerated("root2_F66Atribute0", new int[]{0, 54}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F66, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F66"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F66, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F66"), "!=", 0));
		featureAttrAtribute1.put("root2_F67", VariableFactory.enumerated("root2_F67Atribute1", new int[]{0, 63}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F67, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F67"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F67, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F67"), "!=", 0));
		featureAttrAtribute0.put("root2_F67", VariableFactory.enumerated("root2_F67Atribute0", new int[]{0, 25}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F67, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F67"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F67, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F67"), "!=", 0));
		featureAttrAtribute1.put("root2_F68", VariableFactory.enumerated("root2_F68Atribute1", new int[]{0, 85}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F68, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F68"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F68, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F68"), "!=", 0));
		featureAttrAtribute0.put("root2_F68", VariableFactory.enumerated("root2_F68Atribute0", new int[]{0, 70}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F68, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F68"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F68, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F68"), "!=", 0));
		featureAttrAtribute1.put("root2_F69", VariableFactory.enumerated("root2_F69Atribute1", new int[]{0, 15}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F69, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F69"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F69, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F69"), "!=", 0));
		featureAttrAtribute0.put("root2_F69", VariableFactory.enumerated("root2_F69Atribute0", new int[]{0, 80}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F69, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F69"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F69, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F69"), "!=", 0));
		featureAttrAtribute1.put("root2_F70", VariableFactory.enumerated("root2_F70Atribute1", new int[]{0, 40}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F70, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F70"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F70, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F70"), "!=", 0));
		featureAttrAtribute0.put("root2_F70", VariableFactory.enumerated("root2_F70Atribute0", new int[]{0, 58}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F70, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F70"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F70, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F70"), "!=", 0));
		featureAttrAtribute1.put("root2_F46", VariableFactory.enumerated("root2_F46Atribute1", new int[]{0, 69}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F46, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F46"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F46, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F46"), "!=", 0));
		featureAttrAtribute0.put("root2_F46", VariableFactory.enumerated("root2_F46Atribute0", new int[]{0, 90}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F46, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F46"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F46, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F46"), "!=", 0));
		featureAttrAtribute1.put("root2_F79", VariableFactory.enumerated("root2_F79Atribute1", new int[]{0, 84}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F79, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F79"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F79, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F79"), "!=", 0));
		featureAttrAtribute0.put("root2_F79", VariableFactory.enumerated("root2_F79Atribute0", new int[]{0, 65}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F79, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F79"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F79, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F79"), "!=", 0));
		featureAttrAtribute1.put("root2_F48", VariableFactory.enumerated("root2_F48Atribute1", new int[]{0, 34}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F48, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F48"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F48, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F48"), "!=", 0));
		featureAttrAtribute0.put("root2_F48", VariableFactory.enumerated("root2_F48Atribute0", new int[]{0, 85}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F48, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F48"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F48, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F48"), "!=", 0));
		featureAttrAtribute1.put("root2_F49", VariableFactory.enumerated("root2_F49Atribute1", new int[]{0, 8}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F49, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F49"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F49, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F49"), "!=", 0));
		featureAttrAtribute0.put("root2_F49", VariableFactory.enumerated("root2_F49Atribute0", new int[]{0, 7}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F49, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F49"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F49, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F49"), "!=", 0));
		featureAttrAtribute1.put("root2_F50", VariableFactory.enumerated("root2_F50Atribute1", new int[]{0, 21}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F50, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F50"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F50, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F50"), "!=", 0));
		featureAttrAtribute0.put("root2_F50", VariableFactory.enumerated("root2_F50Atribute0", new int[]{0, 36}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F50, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F50"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F50, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F50"), "!=", 0));
		featureAttrAtribute1.put("root2_F51", VariableFactory.enumerated("root2_F51Atribute1", new int[]{0, 57}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F51, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F51"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F51, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F51"), "!=", 0));
		featureAttrAtribute0.put("root2_F51", VariableFactory.enumerated("root2_F51Atribute0", new int[]{0, 47}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F51, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F51"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F51, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F51"), "!=", 0));
		featureAttrAtribute1.put("root2_F52", VariableFactory.enumerated("root2_F52Atribute1", new int[]{0, 10}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F52, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F52"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F52, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F52"), "!=", 0));
		featureAttrAtribute0.put("root2_F52", VariableFactory.enumerated("root2_F52Atribute0", new int[]{0, 20}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F52, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F52"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F52, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F52"), "!=", 0));
		featureAttrAtribute1.put("root3_F34", VariableFactory.enumerated("root3_F34Atribute1", new int[]{0, 52}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F34, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F34"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F34, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F34"), "!=", 0));
		featureAttrAtribute0.put("root3_F34", VariableFactory.enumerated("root3_F34Atribute0", new int[]{0, 21}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F34, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F34"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F34, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F34"), "!=", 0));
		featureAttrAtribute1.put("root3_F43", VariableFactory.enumerated("root3_F43Atribute1", new int[]{0, 88}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F43, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F43"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F43, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F43"), "!=", 0));
		featureAttrAtribute0.put("root3_F43", VariableFactory.enumerated("root3_F43Atribute0", new int[]{0, 91}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F43, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F43"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F43, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F43"), "!=", 0));
		featureAttrAtribute1.put("root3_F36", VariableFactory.enumerated("root3_F36Atribute1", new int[]{0, 43}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F36, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F36"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F36, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F36"), "!=", 0));
		featureAttrAtribute0.put("root3_F36", VariableFactory.enumerated("root3_F36Atribute0", new int[]{0, 87}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F36, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F36"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F36, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F36"), "!=", 0));
		featureAttrAtribute1.put("root3_F37", VariableFactory.enumerated("root3_F37Atribute1", new int[]{0, 9}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F37, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F37"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F37, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F37"), "!=", 0));
		featureAttrAtribute0.put("root3_F37", VariableFactory.enumerated("root3_F37Atribute0", new int[]{0, 64}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F37, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F37"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F37, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F37"), "!=", 0));
		featureAttrAtribute1.put("root3_F38", VariableFactory.enumerated("root3_F38Atribute1", new int[]{0, 79}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F38, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F38"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F38, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F38"), "!=", 0));
		featureAttrAtribute0.put("root3_F38", VariableFactory.enumerated("root3_F38Atribute0", new int[]{0, 12}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F38, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F38"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F38, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F38"), "!=", 0));
		featureAttrAtribute1.put("root3_F39", VariableFactory.enumerated("root3_F39Atribute1", new int[]{0, 52}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F39, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F39"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F39, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F39"), "!=", 0));
		featureAttrAtribute0.put("root3_F39", VariableFactory.enumerated("root3_F39Atribute0", new int[]{0, 40}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F39, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F39"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F39, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F39"), "!=", 0));
		featureAttrAtribute1.put("root3_F40", VariableFactory.enumerated("root3_F40Atribute1", new int[]{0, 39}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F40, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F40"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F40, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F40"), "!=", 0));
		featureAttrAtribute0.put("root3_F40", VariableFactory.enumerated("root3_F40Atribute0", new int[]{0, 42}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F40, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F40"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F40, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F40"), "!=", 0));
		featureAttrAtribute1.put("root3_F32", VariableFactory.enumerated("root3_F32Atribute1", new int[]{0, 31}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F32, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F32"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F32, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F32"), "!=", 0));
		featureAttrAtribute0.put("root3_F32", VariableFactory.enumerated("root3_F32Atribute0", new int[]{0, 64}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F32, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F32"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F32, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F32"), "!=", 0));
		featureAttrAtribute1.put("root3_F57", VariableFactory.enumerated("root3_F57Atribute1", new int[]{0, 12}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F57, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F57"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F57, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F57"), "!=", 0));
		featureAttrAtribute0.put("root3_F57", VariableFactory.enumerated("root3_F57Atribute0", new int[]{0, 16}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F57, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F57"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F57, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F57"), "!=", 0));
		featureAttrAtribute1.put("root3_F58", VariableFactory.enumerated("root3_F58Atribute1", new int[]{0, 8}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F58, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F58"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F58, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F58"), "!=", 0));
		featureAttrAtribute0.put("root3_F58", VariableFactory.enumerated("root3_F58Atribute0", new int[]{0, 33}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F58, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F58"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F58, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F58"), "!=", 0));
		featureAttrAtribute1.put("root3_F59", VariableFactory.enumerated("root3_F59Atribute1", new int[]{0, 24}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F59, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F59"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F59, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F59"), "!=", 0));
		featureAttrAtribute0.put("root3_F59", VariableFactory.enumerated("root3_F59Atribute0", new int[]{0, 21}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F59, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F59"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F59, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F59"), "!=", 0));
		featureAttrAtribute1.put("root3_F60", VariableFactory.enumerated("root3_F60Atribute1", new int[]{0, 22}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F60, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F60"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F60, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F60"), "!=", 0));
		featureAttrAtribute0.put("root3_F60", VariableFactory.enumerated("root3_F60Atribute0", new int[]{0, 49}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F60, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F60"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F60, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F60"), "!=", 0));
		featureAttrAtribute1.put("root3_F61", VariableFactory.enumerated("root3_F61Atribute1", new int[]{0, 55}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F61, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F61"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F61, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F61"), "!=", 0));
		featureAttrAtribute0.put("root3_F61", VariableFactory.enumerated("root3_F61Atribute0", new int[]{0, 73}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F61, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F61"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F61, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F61"), "!=", 0));
		featureAttrAtribute1.put("root3_F62", VariableFactory.enumerated("root3_F62Atribute1", new int[]{0, 81}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F62, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F62"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F62, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F62"), "!=", 0));
		featureAttrAtribute0.put("root3_F62", VariableFactory.enumerated("root3_F62Atribute0", new int[]{0, 77}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F62, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F62"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F62, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F62"), "!=", 0));
		featureAttrAtribute1.put("root3_F63", VariableFactory.enumerated("root3_F63Atribute1", new int[]{0, 99}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F63, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F63"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F63, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F63"), "!=", 0));
		featureAttrAtribute0.put("root3_F63", VariableFactory.enumerated("root3_F63Atribute0", new int[]{0, 7}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F63, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F63"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F63, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F63"), "!=", 0));
		featureAttrAtribute1.put("root3_F64", VariableFactory.enumerated("root3_F64Atribute1", new int[]{0, 85}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F64, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F64"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F64, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F64"), "!=", 0));
		featureAttrAtribute0.put("root3_F64", VariableFactory.enumerated("root3_F64Atribute0", new int[]{0, 30}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F64, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F64"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F64, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F64"), "!=", 0));
		featureAttrAtribute1.put("root3_F11", VariableFactory.enumerated("root3_F11Atribute1", new int[]{0, 70}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F11, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F11"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F11, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F11"), "!=", 0));
		featureAttrAtribute0.put("root3_F11", VariableFactory.enumerated("root3_F11Atribute0", new int[]{0, 42}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F11, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F11"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F11, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F11"), "!=", 0));
		featureAttrAtribute1.put("root3_F16", VariableFactory.enumerated("root3_F16Atribute1", new int[]{0, 4}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F16, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F16"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F16, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F16"), "!=", 0));
		featureAttrAtribute0.put("root3_F16", VariableFactory.enumerated("root3_F16Atribute0", new int[]{0, 70}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F16, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F16"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F16, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F16"), "!=", 0));
		featureAttrAtribute1.put("root3_F75", VariableFactory.enumerated("root3_F75Atribute1", new int[]{0, 25}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F75, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F75"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F75, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F75"), "!=", 0));
		featureAttrAtribute0.put("root3_F75", VariableFactory.enumerated("root3_F75Atribute0", new int[]{0, 86}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F75, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F75"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F75, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F75"), "!=", 0));
		featureAttrAtribute1.put("root3_F76", VariableFactory.enumerated("root3_F76Atribute1", new int[]{0, 88}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F76, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F76"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F76, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F76"), "!=", 0));
		featureAttrAtribute0.put("root3_F76", VariableFactory.enumerated("root3_F76Atribute0", new int[]{0, 5}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F76, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F76"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F76, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F76"), "!=", 0));
		featureAttrAtribute1.put("root3_F77", VariableFactory.enumerated("root3_F77Atribute1", new int[]{0, 13}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F77, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F77"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F77, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F77"), "!=", 0));
		featureAttrAtribute0.put("root3_F77", VariableFactory.enumerated("root3_F77Atribute0", new int[]{0, 10}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F77, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F77"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F77, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F77"), "!=", 0));
		featureAttrAtribute1.put("root3_F78", VariableFactory.enumerated("root3_F78Atribute1", new int[]{0, 1}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F78, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F78"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F78, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F78"), "!=", 0));
		featureAttrAtribute0.put("root3_F78", VariableFactory.enumerated("root3_F78Atribute0", new int[]{0, 39}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F78, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F78"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F78, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F78"), "!=", 0));
		featureAttrAtribute1.put("root3_F72", VariableFactory.enumerated("root3_F72Atribute1", new int[]{0, 44}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F72, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F72"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F72, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F72"), "!=", 0));
		featureAttrAtribute0.put("root3_F72", VariableFactory.enumerated("root3_F72Atribute0", new int[]{0, 39}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F72, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F72"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F72, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F72"), "!=", 0));
		featureAttrAtribute1.put("root3_F73", VariableFactory.enumerated("root3_F73Atribute1", new int[]{0, 67}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F73, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F73"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F73, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F73"), "!=", 0));
		featureAttrAtribute0.put("root3_F73", VariableFactory.enumerated("root3_F73Atribute0", new int[]{0, 21}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F73, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F73"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F73, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F73"), "!=", 0));
		featureAttrAtribute1.put("root3_F28", VariableFactory.enumerated("root3_F28Atribute1", new int[]{0, 16}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F28, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F28"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F28, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F28"), "!=", 0));
		featureAttrAtribute0.put("root3_F28", VariableFactory.enumerated("root3_F28Atribute0", new int[]{0, 55}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F28, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F28"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F28, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F28"), "!=", 0));
		featureAttrAtribute1.put("root3_F67", VariableFactory.enumerated("root3_F67Atribute1", new int[]{0, 28}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F67, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F67"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F67, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F67"), "!=", 0));
		featureAttrAtribute0.put("root3_F67", VariableFactory.enumerated("root3_F67Atribute0", new int[]{0, 76}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F67, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F67"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F67, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F67"), "!=", 0));
		featureAttrAtribute1.put("root3_F68", VariableFactory.enumerated("root3_F68Atribute1", new int[]{0, 24}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F68, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F68"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F68, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F68"), "!=", 0));
		featureAttrAtribute0.put("root3_F68", VariableFactory.enumerated("root3_F68Atribute0", new int[]{0, 67}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F68, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F68"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F68, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F68"), "!=", 0));
		featureAttrAtribute1.put("root3_F30", VariableFactory.enumerated("root3_F30Atribute1", new int[]{0, 6}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F30, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F30"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F30, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F30"), "!=", 0));
		featureAttrAtribute0.put("root3_F30", VariableFactory.enumerated("root3_F30Atribute0", new int[]{0, 4}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F30, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F30"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F30, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F30"), "!=", 0));
		featureAttrAtribute1.put("root3_F31", VariableFactory.enumerated("root3_F31Atribute1", new int[]{0, 28}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F31, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F31"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F31, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F31"), "!=", 0));
		featureAttrAtribute0.put("root3_F31", VariableFactory.enumerated("root3_F31Atribute0", new int[]{0, 14}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F31, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F31"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F31, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F31"), "!=", 0));
		featureAttrAtribute1.put("root3_F18", VariableFactory.enumerated("root3_F18Atribute1", new int[]{0, 83}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F18, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F18"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F18, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F18"), "!=", 0));
		featureAttrAtribute0.put("root3_F18", VariableFactory.enumerated("root3_F18Atribute0", new int[]{0, 63}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F18, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F18"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F18, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F18"), "!=", 0));
		featureAttrAtribute1.put("root3_F19", VariableFactory.enumerated("root3_F19Atribute1", new int[]{0, 52}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F19, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F19"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F19, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F19"), "!=", 0));
		featureAttrAtribute0.put("root3_F19", VariableFactory.enumerated("root3_F19Atribute0", new int[]{0, 87}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F19, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F19"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F19, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F19"), "!=", 0));
		featureAttrAtribute1.put("root3_F22", VariableFactory.enumerated("root3_F22Atribute1", new int[]{0, 31}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F22, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F22"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F22, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F22"), "!=", 0));
		featureAttrAtribute0.put("root3_F22", VariableFactory.enumerated("root3_F22Atribute0", new int[]{0, 4}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F22, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F22"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F22, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F22"), "!=", 0));
		featureAttrAtribute1.put("root3_F23", VariableFactory.enumerated("root3_F23Atribute1", new int[]{0, 42}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F23, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F23"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F23, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F23"), "!=", 0));
		featureAttrAtribute0.put("root3_F23", VariableFactory.enumerated("root3_F23Atribute0", new int[]{0, 7}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F23, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F23"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F23, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F23"), "!=", 0));
		featureAttrAtribute1.put("root3_F25", VariableFactory.enumerated("root3_F25Atribute1", new int[]{0, 16}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F25, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F25"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F25, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F25"), "!=", 0));
		featureAttrAtribute0.put("root3_F25", VariableFactory.enumerated("root3_F25Atribute0", new int[]{0, 3}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F25, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F25"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F25, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F25"), "!=", 0));
		featureAttrAtribute1.put("root3_F26", VariableFactory.enumerated("root3_F26Atribute1", new int[]{0, 9}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F26, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F26"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F26, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F26"), "!=", 0));
		featureAttrAtribute0.put("root3_F26", VariableFactory.enumerated("root3_F26Atribute0", new int[]{0, 91}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F26, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F26"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F26, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F26"), "!=", 0));
		featureAttrAtribute1.put("root3_F21", VariableFactory.enumerated("root3_F21Atribute1", new int[]{0, 57}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F21, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F21"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F21, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F21"), "!=", 0));
		featureAttrAtribute0.put("root3_F21", VariableFactory.enumerated("root3_F21Atribute0", new int[]{0, 56}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F21, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F21"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F21, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F21"), "!=", 0));
		featureAttrAtribute1.put("root3_F13", VariableFactory.enumerated("root3_F13Atribute1", new int[]{0, 59}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F13, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F13"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F13, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F13"), "!=", 0));
		featureAttrAtribute0.put("root3_F13", VariableFactory.enumerated("root3_F13Atribute0", new int[]{0, 29}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F13, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F13"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F13, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F13"), "!=", 0));
		featureAttrAtribute1.put("root3_F14", VariableFactory.enumerated("root3_F14Atribute1", new int[]{0, 7}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F14, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F14"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F14, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F14"), "!=", 0));
		featureAttrAtribute0.put("root3_F14", VariableFactory.enumerated("root3_F14Atribute0", new int[]{0, 13}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F14, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F14"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F14, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F14"), "!=", 0));
		featureAttrAtribute1.put("root3_F15", VariableFactory.enumerated("root3_F15Atribute1", new int[]{0, 98}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F15, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F15"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F15, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F15"), "!=", 0));
		featureAttrAtribute0.put("root3_F15", VariableFactory.enumerated("root3_F15Atribute0", new int[]{0, 66}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F15, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F15"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F15, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F15"), "!=", 0));
		featureAttrAtribute1.put("root3_F69", VariableFactory.enumerated("root3_F69Atribute1", new int[]{0, 71}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F69, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F69"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F69, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F69"), "!=", 0));
		featureAttrAtribute0.put("root3_F69", VariableFactory.enumerated("root3_F69Atribute0", new int[]{0, 43}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F69, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F69"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F69, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F69"), "!=", 0));
		featureAttrAtribute1.put("root3_F70", VariableFactory.enumerated("root3_F70Atribute1", new int[]{0, 86}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F70, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F70"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F70, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F70"), "!=", 0));
		featureAttrAtribute0.put("root3_F70", VariableFactory.enumerated("root3_F70Atribute0", new int[]{0, 6}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F70, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F70"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F70, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F70"), "!=", 0));
		featureAttrAtribute1.put("root3_F41", VariableFactory.enumerated("root3_F41Atribute1", new int[]{0, 4}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F41, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F41"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F41, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F41"), "!=", 0));
		featureAttrAtribute0.put("root3_F41", VariableFactory.enumerated("root3_F41Atribute0", new int[]{0, 47}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F41, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F41"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F41, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F41"), "!=", 0));
		featureAttrAtribute1.put("root3_F42", VariableFactory.enumerated("root3_F42Atribute1", new int[]{0, 29}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F42, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F42"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F42, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F42"), "!=", 0));
		featureAttrAtribute0.put("root3_F42", VariableFactory.enumerated("root3_F42Atribute0", new int[]{0, 3}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F42, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F42"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F42, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F42"), "!=", 0));
		featureAttrAtribute1.put("root3_F4", VariableFactory.enumerated("root3_F4Atribute1", new int[]{0, 46}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F4, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F4"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F4, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F4"), "!=", 0));
		featureAttrAtribute0.put("root3_F4", VariableFactory.enumerated("root3_F4Atribute0", new int[]{0, 32}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F4, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F4"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F4, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F4"), "!=", 0));
		featureAttrAtribute1.put("root3_F5", VariableFactory.enumerated("root3_F5Atribute1", new int[]{0, 55}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F5, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F5"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F5, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F5"), "!=", 0));
		featureAttrAtribute0.put("root3_F5", VariableFactory.enumerated("root3_F5Atribute0", new int[]{0, 69}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F5, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F5"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F5, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F5"), "!=", 0));
		featureAttrAtribute1.put("root3_F6", VariableFactory.enumerated("root3_F6Atribute1", new int[]{0, 22}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F6, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F6"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F6, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F6"), "!=", 0));
		featureAttrAtribute0.put("root3_F6", VariableFactory.enumerated("root3_F6Atribute0", new int[]{0, 44}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F6, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F6"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F6, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F6"), "!=", 0));
		featureAttrAtribute1.put("root3_F7", VariableFactory.enumerated("root3_F7Atribute1", new int[]{0, 68}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F7, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F7"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F7, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F7"), "!=", 0));
		featureAttrAtribute0.put("root3_F7", VariableFactory.enumerated("root3_F7Atribute0", new int[]{0, 46}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F7, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F7"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F7, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F7"), "!=", 0));
		featureAttrAtribute1.put("root3_F49", VariableFactory.enumerated("root3_F49Atribute1", new int[]{0, 17}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F49, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F49"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F49, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F49"), "!=", 0));
		featureAttrAtribute0.put("root3_F49", VariableFactory.enumerated("root3_F49Atribute0", new int[]{0, 89}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F49, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F49"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F49, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F49"), "!=", 0));
		featureAttrAtribute1.put("root3_F50", VariableFactory.enumerated("root3_F50Atribute1", new int[]{0, 17}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F50, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F50"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F50, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F50"), "!=", 0));
		featureAttrAtribute0.put("root3_F50", VariableFactory.enumerated("root3_F50Atribute0", new int[]{0, 2}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F50, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F50"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F50, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F50"), "!=", 0));
		featureAttrAtribute1.put("root3_F56", VariableFactory.enumerated("root3_F56Atribute1", new int[]{0, 54}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F56, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F56"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F56, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F56"), "!=", 0));
		featureAttrAtribute0.put("root3_F56", VariableFactory.enumerated("root3_F56Atribute0", new int[]{0, 29}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F56, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F56"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F56, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F56"), "!=", 0));
		featureAttrAtribute1.put("root3_F74", VariableFactory.enumerated("root3_F74Atribute1", new int[]{0, 100}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F74, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F74"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F74, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F74"), "!=", 0));
		featureAttrAtribute0.put("root3_F74", VariableFactory.enumerated("root3_F74Atribute0", new int[]{0, 73}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F74, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F74"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F74, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F74"), "!=", 0));
		featureAttrAtribute1.put("root3_F53", VariableFactory.enumerated("root3_F53Atribute1", new int[]{0, 62}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F53, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F53"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F53, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F53"), "!=", 0));
		featureAttrAtribute0.put("root3_F53", VariableFactory.enumerated("root3_F53Atribute0", new int[]{0, 25}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F53, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F53"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F53, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F53"), "!=", 0));
		featureAttrAtribute1.put("root3_F65", VariableFactory.enumerated("root3_F65Atribute1", new int[]{0, 41}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F65, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F65"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F65, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F65"), "!=", 0));
		featureAttrAtribute0.put("root3_F65", VariableFactory.enumerated("root3_F65Atribute0", new int[]{0, 71}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F65, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F65"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F65, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F65"), "!=", 0));
		featureAttrAtribute1.put("root3_F79", VariableFactory.enumerated("root3_F79Atribute1", new int[]{0, 48}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F79, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F79"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F79, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F79"), "!=", 0));
		featureAttrAtribute0.put("root3_F79", VariableFactory.enumerated("root3_F79Atribute0", new int[]{0, 10}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F79, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F79"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F79, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F79"), "!=", 0));
		featureAttrAtribute1.put("root3_F55", VariableFactory.enumerated("root3_F55Atribute1", new int[]{0, 76}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F55, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F55"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F55, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F55"), "!=", 0));
		featureAttrAtribute0.put("root3_F55", VariableFactory.enumerated("root3_F55Atribute0", new int[]{0, 86}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F55, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F55"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F55, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F55"), "!=", 0));
		featureAttrAtribute1.put("root3_F45", VariableFactory.enumerated("root3_F45Atribute1", new int[]{0, 73}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F45, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F45"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F45, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F45"), "!=", 0));
		featureAttrAtribute0.put("root3_F45", VariableFactory.enumerated("root3_F45Atribute0", new int[]{0, 16}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F45, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F45"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F45, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F45"), "!=", 0));
		featureAttrAtribute1.put("root3_F46", VariableFactory.enumerated("root3_F46Atribute1", new int[]{0, 30}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F46, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F46"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F46, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F46"), "!=", 0));
		featureAttrAtribute0.put("root3_F46", VariableFactory.enumerated("root3_F46Atribute0", new int[]{0, 27}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F46, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F46"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F46, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F46"), "!=", 0));
		featureAttrAtribute1.put("root3_F47", VariableFactory.enumerated("root3_F47Atribute1", new int[]{0, 40}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F47, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F47"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F47, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F47"), "!=", 0));
		featureAttrAtribute0.put("root3_F47", VariableFactory.enumerated("root3_F47Atribute0", new int[]{0, 45}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F47, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F47"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F47, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F47"), "!=", 0));
		featureAttrAtribute1.put("root3_F48", VariableFactory.enumerated("root3_F48Atribute1", new int[]{0, 35}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F48, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F48"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F48, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F48"), "!=", 0));
		featureAttrAtribute0.put("root3_F48", VariableFactory.enumerated("root3_F48Atribute0", new int[]{0, 73}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F48, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F48"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F48, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F48"), "!=", 0));
		featureAttrAtribute1.put("root4_F1", VariableFactory.enumerated("root4_F1Atribute1", new int[]{0, 8}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F1, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F1"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F1, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F1"), "!=", 0));
		featureAttrAtribute0.put("root4_F1", VariableFactory.enumerated("root4_F1Atribute0", new int[]{0, 85}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F1, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F1"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F1, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F1"), "!=", 0));
		featureAttrAtribute1.put("root4_F31", VariableFactory.enumerated("root4_F31Atribute1", new int[]{0, 30}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F31, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F31"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F31, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F31"), "!=", 0));
		featureAttrAtribute0.put("root4_F31", VariableFactory.enumerated("root4_F31Atribute0", new int[]{0, 43}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F31, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F31"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F31, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F31"), "!=", 0));
		featureAttrAtribute1.put("root4_F7", VariableFactory.enumerated("root4_F7Atribute1", new int[]{0, 59}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F7, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F7"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F7, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F7"), "!=", 0));
		featureAttrAtribute0.put("root4_F7", VariableFactory.enumerated("root4_F7Atribute0", new int[]{0, 72}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F7, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F7"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F7, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F7"), "!=", 0));
		featureAttrAtribute1.put("root4_F21", VariableFactory.enumerated("root4_F21Atribute1", new int[]{0, 20}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F21, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F21"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F21, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F21"), "!=", 0));
		featureAttrAtribute0.put("root4_F21", VariableFactory.enumerated("root4_F21Atribute0", new int[]{0, 63}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F21, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F21"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F21, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F21"), "!=", 0));
		featureAttrAtribute1.put("root4_F22", VariableFactory.enumerated("root4_F22Atribute1", new int[]{0, 55}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F22, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F22"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F22, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F22"), "!=", 0));
		featureAttrAtribute0.put("root4_F22", VariableFactory.enumerated("root4_F22Atribute0", new int[]{0, 71}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F22, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F22"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F22, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F22"), "!=", 0));
		featureAttrAtribute1.put("root4_F53", VariableFactory.enumerated("root4_F53Atribute1", new int[]{0, 92}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F53, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F53"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F53, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F53"), "!=", 0));
		featureAttrAtribute0.put("root4_F53", VariableFactory.enumerated("root4_F53Atribute0", new int[]{0, 47}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F53, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F53"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F53, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F53"), "!=", 0));
		featureAttrAtribute1.put("root4_F41", VariableFactory.enumerated("root4_F41Atribute1", new int[]{0, 39}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F41, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F41"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F41, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F41"), "!=", 0));
		featureAttrAtribute0.put("root4_F41", VariableFactory.enumerated("root4_F41Atribute0", new int[]{0, 36}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F41, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F41"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F41, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F41"), "!=", 0));
		featureAttrAtribute1.put("root4_F42", VariableFactory.enumerated("root4_F42Atribute1", new int[]{0, 36}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F42, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F42"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F42, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F42"), "!=", 0));
		featureAttrAtribute0.put("root4_F42", VariableFactory.enumerated("root4_F42Atribute0", new int[]{0, 79}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F42, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F42"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F42, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F42"), "!=", 0));
		featureAttrAtribute1.put("root4_F43", VariableFactory.enumerated("root4_F43Atribute1", new int[]{0, 57}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F43, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F43"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F43, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F43"), "!=", 0));
		featureAttrAtribute0.put("root4_F43", VariableFactory.enumerated("root4_F43Atribute0", new int[]{0, 90}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F43, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F43"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F43, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F43"), "!=", 0));
		featureAttrAtribute1.put("root4_F44", VariableFactory.enumerated("root4_F44Atribute1", new int[]{0, 18}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F44, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F44"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F44, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F44"), "!=", 0));
		featureAttrAtribute0.put("root4_F44", VariableFactory.enumerated("root4_F44Atribute0", new int[]{0, 34}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F44, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F44"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F44, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F44"), "!=", 0));
		featureAttrAtribute1.put("root4_F45", VariableFactory.enumerated("root4_F45Atribute1", new int[]{0, 99}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F45, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F45"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F45, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F45"), "!=", 0));
		featureAttrAtribute0.put("root4_F45", VariableFactory.enumerated("root4_F45Atribute0", new int[]{0, 42}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F45, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F45"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F45, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F45"), "!=", 0));
		featureAttrAtribute1.put("root4_F46", VariableFactory.enumerated("root4_F46Atribute1", new int[]{0, 20}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F46, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F46"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F46, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F46"), "!=", 0));
		featureAttrAtribute0.put("root4_F46", VariableFactory.enumerated("root4_F46Atribute0", new int[]{0, 66}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F46, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F46"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F46, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F46"), "!=", 0));
		featureAttrAtribute1.put("root4_F47", VariableFactory.enumerated("root4_F47Atribute1", new int[]{0, 74}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F47, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F47"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F47, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F47"), "!=", 0));
		featureAttrAtribute0.put("root4_F47", VariableFactory.enumerated("root4_F47Atribute0", new int[]{0, 80}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F47, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F47"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F47, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F47"), "!=", 0));
		featureAttrAtribute1.put("root4_F32", VariableFactory.enumerated("root4_F32Atribute1", new int[]{0, 94}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F32, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F32"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F32, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F32"), "!=", 0));
		featureAttrAtribute0.put("root4_F32", VariableFactory.enumerated("root4_F32Atribute0", new int[]{0, 85}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F32, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F32"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F32, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F32"), "!=", 0));
		featureAttrAtribute1.put("root4_F33", VariableFactory.enumerated("root4_F33Atribute1", new int[]{0, 87}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F33, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F33"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F33, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F33"), "!=", 0));
		featureAttrAtribute0.put("root4_F33", VariableFactory.enumerated("root4_F33Atribute0", new int[]{0, 26}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F33, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F33"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F33, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F33"), "!=", 0));
		featureAttrAtribute1.put("root4_F34", VariableFactory.enumerated("root4_F34Atribute1", new int[]{0, 4}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F34, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F34"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F34, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F34"), "!=", 0));
		featureAttrAtribute0.put("root4_F34", VariableFactory.enumerated("root4_F34Atribute0", new int[]{0, 52}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F34, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F34"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F34, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F34"), "!=", 0));
		featureAttrAtribute1.put("root4_F35", VariableFactory.enumerated("root4_F35Atribute1", new int[]{0, 80}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F35, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F35"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F35, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F35"), "!=", 0));
		featureAttrAtribute0.put("root4_F35", VariableFactory.enumerated("root4_F35Atribute0", new int[]{0, 95}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F35, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F35"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F35, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F35"), "!=", 0));
		featureAttrAtribute1.put("root4_F36", VariableFactory.enumerated("root4_F36Atribute1", new int[]{0, 2}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F36, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F36"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F36, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F36"), "!=", 0));
		featureAttrAtribute0.put("root4_F36", VariableFactory.enumerated("root4_F36Atribute0", new int[]{0, 15}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F36, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F36"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F36, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F36"), "!=", 0));
		featureAttrAtribute1.put("root4_F37", VariableFactory.enumerated("root4_F37Atribute1", new int[]{0, 86}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F37, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F37"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F37, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F37"), "!=", 0));
		featureAttrAtribute0.put("root4_F37", VariableFactory.enumerated("root4_F37Atribute0", new int[]{0, 26}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F37, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F37"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F37, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F37"), "!=", 0));
		featureAttrAtribute1.put("root4_F38", VariableFactory.enumerated("root4_F38Atribute1", new int[]{0, 11}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F38, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F38"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F38, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F38"), "!=", 0));
		featureAttrAtribute0.put("root4_F38", VariableFactory.enumerated("root4_F38Atribute0", new int[]{0, 73}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F38, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F38"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F38, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F38"), "!=", 0));
		featureAttrAtribute1.put("root4_F39", VariableFactory.enumerated("root4_F39Atribute1", new int[]{0, 22}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F39, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F39"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F39, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F39"), "!=", 0));
		featureAttrAtribute0.put("root4_F39", VariableFactory.enumerated("root4_F39Atribute0", new int[]{0, 57}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F39, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F39"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F39, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F39"), "!=", 0));
		featureAttrAtribute1.put("root4_F40", VariableFactory.enumerated("root4_F40Atribute1", new int[]{0, 53}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F40, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F40"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F40, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F40"), "!=", 0));
		featureAttrAtribute0.put("root4_F40", VariableFactory.enumerated("root4_F40Atribute0", new int[]{0, 49}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F40, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F40"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F40, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F40"), "!=", 0));
		featureAttrAtribute1.put("root4_F26", VariableFactory.enumerated("root4_F26Atribute1", new int[]{0, 43}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F26, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F26"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F26, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F26"), "!=", 0));
		featureAttrAtribute0.put("root4_F26", VariableFactory.enumerated("root4_F26Atribute0", new int[]{0, 83}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F26, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F26"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F26, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F26"), "!=", 0));
		featureAttrAtribute1.put("root4_F50", VariableFactory.enumerated("root4_F50Atribute1", new int[]{0, 12}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F50, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F50"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F50, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F50"), "!=", 0));
		featureAttrAtribute0.put("root4_F50", VariableFactory.enumerated("root4_F50Atribute0", new int[]{0, 44}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F50, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F50"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F50, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F50"), "!=", 0));
		featureAttrAtribute1.put("root4_F51", VariableFactory.enumerated("root4_F51Atribute1", new int[]{0, 94}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F51, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F51"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F51, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F51"), "!=", 0));
		featureAttrAtribute0.put("root4_F51", VariableFactory.enumerated("root4_F51Atribute0", new int[]{0, 19}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F51, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F51"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F51, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F51"), "!=", 0));
		featureAttrAtribute1.put("root4_F52", VariableFactory.enumerated("root4_F52Atribute1", new int[]{0, 83}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F52, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F52"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F52, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F52"), "!=", 0));
		featureAttrAtribute0.put("root4_F52", VariableFactory.enumerated("root4_F52Atribute0", new int[]{0, 76}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F52, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F52"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F52, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F52"), "!=", 0));
		featureAttrAtribute1.put("root4_F28", VariableFactory.enumerated("root4_F28Atribute1", new int[]{0, 52}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F28, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F28"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F28, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F28"), "!=", 0));
		featureAttrAtribute0.put("root4_F28", VariableFactory.enumerated("root4_F28Atribute0", new int[]{0, 14}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F28, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F28"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F28, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F28"), "!=", 0));
		featureAttrAtribute1.put("root4_F29", VariableFactory.enumerated("root4_F29Atribute1", new int[]{0, 15}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F29, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F29"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F29, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F29"), "!=", 0));
		featureAttrAtribute0.put("root4_F29", VariableFactory.enumerated("root4_F29Atribute0", new int[]{0, 94}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F29, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F29"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F29, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F29"), "!=", 0));
		featureAttrAtribute1.put("root4_F9", VariableFactory.enumerated("root4_F9Atribute1", new int[]{0, 96}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F9, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F9"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F9, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F9"), "!=", 0));
		featureAttrAtribute0.put("root4_F9", VariableFactory.enumerated("root4_F9Atribute0", new int[]{0, 72}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F9, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F9"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F9, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F9"), "!=", 0));
		featureAttrAtribute1.put("root4_F13", VariableFactory.enumerated("root4_F13Atribute1", new int[]{0, 19}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F13, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F13"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F13, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F13"), "!=", 0));
		featureAttrAtribute0.put("root4_F13", VariableFactory.enumerated("root4_F13Atribute0", new int[]{0, 30}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F13, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F13"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F13, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F13"), "!=", 0));
		featureAttrAtribute1.put("root4_F48", VariableFactory.enumerated("root4_F48Atribute1", new int[]{0, 14}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F48, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F48"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F48, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F48"), "!=", 0));
		featureAttrAtribute0.put("root4_F48", VariableFactory.enumerated("root4_F48Atribute0", new int[]{0, 42}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F48, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F48"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F48, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F48"), "!=", 0));
		featureAttrAtribute1.put("root4_F49", VariableFactory.enumerated("root4_F49Atribute1", new int[]{0, 96}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F49, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F49"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F49, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F49"), "!=", 0));
		featureAttrAtribute0.put("root4_F49", VariableFactory.enumerated("root4_F49Atribute0", new int[]{0, 74}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F49, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F49"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F49, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F49"), "!=", 0));
		featureAttrAtribute1.put("root4_F15", VariableFactory.enumerated("root4_F15Atribute1", new int[]{0, 83}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F15, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F15"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F15, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F15"), "!=", 0));
		featureAttrAtribute0.put("root4_F15", VariableFactory.enumerated("root4_F15Atribute0", new int[]{0, 8}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F15, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F15"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F15, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F15"), "!=", 0));
		featureAttrAtribute1.put("root4_F16", VariableFactory.enumerated("root4_F16Atribute1", new int[]{0, 90}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F16, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F16"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F16, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F16"), "!=", 0));
		featureAttrAtribute0.put("root4_F16", VariableFactory.enumerated("root4_F16Atribute0", new int[]{0, 23}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F16, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F16"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F16, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F16"), "!=", 0));
		featureAttrAtribute1.put("root4_F17", VariableFactory.enumerated("root4_F17Atribute1", new int[]{0, 59}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F17, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F17"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F17, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F17"), "!=", 0));
		featureAttrAtribute0.put("root4_F17", VariableFactory.enumerated("root4_F17Atribute0", new int[]{0, 56}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F17, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F17"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F17, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F17"), "!=", 0));
		featureAttrAtribute1.put("root4_F70", VariableFactory.enumerated("root4_F70Atribute1", new int[]{0, 61}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F70, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F70"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F70, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F70"), "!=", 0));
		featureAttrAtribute0.put("root4_F70", VariableFactory.enumerated("root4_F70Atribute0", new int[]{0, 4}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F70, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F70"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F70, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F70"), "!=", 0));
		featureAttrAtribute1.put("root4_F19", VariableFactory.enumerated("root4_F19Atribute1", new int[]{0, 28}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F19, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F19"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F19, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F19"), "!=", 0));
		featureAttrAtribute0.put("root4_F19", VariableFactory.enumerated("root4_F19Atribute0", new int[]{0, 26}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F19, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F19"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F19, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F19"), "!=", 0));
		featureAttrAtribute1.put("root4_F20", VariableFactory.enumerated("root4_F20Atribute1", new int[]{0, 39}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F20, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F20"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F20, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F20"), "!=", 0));
		featureAttrAtribute0.put("root4_F20", VariableFactory.enumerated("root4_F20Atribute0", new int[]{0, 1}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F20, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F20"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F20, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F20"), "!=", 0));
		featureAttrAtribute1.put("root4_F11", VariableFactory.enumerated("root4_F11Atribute1", new int[]{0, 86}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F11, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F11"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F11, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F11"), "!=", 0));
		featureAttrAtribute0.put("root4_F11", VariableFactory.enumerated("root4_F11Atribute0", new int[]{0, 54}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F11, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F11"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F11, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F11"), "!=", 0));
		featureAttrAtribute1.put("root4_F12", VariableFactory.enumerated("root4_F12Atribute1", new int[]{0, 16}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F12, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F12"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F12, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F12"), "!=", 0));
		featureAttrAtribute0.put("root4_F12", VariableFactory.enumerated("root4_F12Atribute0", new int[]{0, 36}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F12, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F12"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F12, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F12"), "!=", 0));
		featureAttrAtribute1.put("root4_F4", VariableFactory.enumerated("root4_F4Atribute1", new int[]{0, 45}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F4, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F4"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F4, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F4"), "!=", 0));
		featureAttrAtribute0.put("root4_F4", VariableFactory.enumerated("root4_F4Atribute0", new int[]{0, 31}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F4, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F4"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F4, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F4"), "!=", 0));
		featureAttrAtribute1.put("root4_F62", VariableFactory.enumerated("root4_F62Atribute1", new int[]{0, 87}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F62, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F62"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F62, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F62"), "!=", 0));
		featureAttrAtribute0.put("root4_F62", VariableFactory.enumerated("root4_F62Atribute0", new int[]{0, 11}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F62, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F62"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F62, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F62"), "!=", 0));
		featureAttrAtribute1.put("root4_F63", VariableFactory.enumerated("root4_F63Atribute1", new int[]{0, 65}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F63, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F63"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F63, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F63"), "!=", 0));
		featureAttrAtribute0.put("root4_F63", VariableFactory.enumerated("root4_F63Atribute0", new int[]{0, 89}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F63, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F63"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F63, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F63"), "!=", 0));
		featureAttrAtribute1.put("root4_F64", VariableFactory.enumerated("root4_F64Atribute1", new int[]{0, 91}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F64, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F64"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F64, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F64"), "!=", 0));
		featureAttrAtribute0.put("root4_F64", VariableFactory.enumerated("root4_F64Atribute0", new int[]{0, 29}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F64, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F64"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F64, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F64"), "!=", 0));
		featureAttrAtribute1.put("root4_F65", VariableFactory.enumerated("root4_F65Atribute1", new int[]{0, 58}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F65, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F65"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F65, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F65"), "!=", 0));
		featureAttrAtribute0.put("root4_F65", VariableFactory.enumerated("root4_F65Atribute0", new int[]{0, 79}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F65, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F65"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F65, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F65"), "!=", 0));
		featureAttrAtribute1.put("root4_F66", VariableFactory.enumerated("root4_F66Atribute1", new int[]{0, 18}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F66, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F66"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F66, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F66"), "!=", 0));
		featureAttrAtribute0.put("root4_F66", VariableFactory.enumerated("root4_F66Atribute0", new int[]{0, 95}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F66, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F66"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F66, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F66"), "!=", 0));
		featureAttrAtribute1.put("root4_F67", VariableFactory.enumerated("root4_F67Atribute1", new int[]{0, 19}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F67, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F67"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F67, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F67"), "!=", 0));
		featureAttrAtribute0.put("root4_F67", VariableFactory.enumerated("root4_F67Atribute0", new int[]{0, 3}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F67, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F67"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F67, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F67"), "!=", 0));
		featureAttrAtribute1.put("root4_F68", VariableFactory.enumerated("root4_F68Atribute1", new int[]{0, 23}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F68, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F68"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F68, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F68"), "!=", 0));
		featureAttrAtribute0.put("root4_F68", VariableFactory.enumerated("root4_F68Atribute0", new int[]{0, 78}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F68, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F68"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F68, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F68"), "!=", 0));
		featureAttrAtribute1.put("root4_F69", VariableFactory.enumerated("root4_F69Atribute1", new int[]{0, 4}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F69, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F69"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F69, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F69"), "!=", 0));
		featureAttrAtribute0.put("root4_F69", VariableFactory.enumerated("root4_F69Atribute0", new int[]{0, 57}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F69, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F69"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F69, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F69"), "!=", 0));
		featureAttrAtribute1.put("root4_F55", VariableFactory.enumerated("root4_F55Atribute1", new int[]{0, 11}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F55, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F55"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F55, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F55"), "!=", 0));
		featureAttrAtribute0.put("root4_F55", VariableFactory.enumerated("root4_F55Atribute0", new int[]{0, 62}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F55, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F55"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F55, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F55"), "!=", 0));
		featureAttrAtribute1.put("root4_F56", VariableFactory.enumerated("root4_F56Atribute1", new int[]{0, 60}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F56, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F56"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F56, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F56"), "!=", 0));
		featureAttrAtribute0.put("root4_F56", VariableFactory.enumerated("root4_F56Atribute0", new int[]{0, 54}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F56, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F56"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F56, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F56"), "!=", 0));
		featureAttrAtribute1.put("root4_F57", VariableFactory.enumerated("root4_F57Atribute1", new int[]{0, 13}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F57, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F57"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F57, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F57"), "!=", 0));
		featureAttrAtribute0.put("root4_F57", VariableFactory.enumerated("root4_F57Atribute0", new int[]{0, 35}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F57, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F57"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F57, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F57"), "!=", 0));
		featureAttrAtribute1.put("root4_F58", VariableFactory.enumerated("root4_F58Atribute1", new int[]{0, 4}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F58, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F58"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F58, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F58"), "!=", 0));
		featureAttrAtribute0.put("root4_F58", VariableFactory.enumerated("root4_F58Atribute0", new int[]{0, 95}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F58, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F58"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F58, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F58"), "!=", 0));
		featureAttrAtribute1.put("root4_F59", VariableFactory.enumerated("root4_F59Atribute1", new int[]{0, 37}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F59, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F59"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F59, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F59"), "!=", 0));
		featureAttrAtribute0.put("root4_F59", VariableFactory.enumerated("root4_F59Atribute0", new int[]{0, 83}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F59, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F59"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F59, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F59"), "!=", 0));
		featureAttrAtribute1.put("root4_F60", VariableFactory.enumerated("root4_F60Atribute1", new int[]{0, 51}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F60, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F60"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F60, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F60"), "!=", 0));
		featureAttrAtribute0.put("root4_F60", VariableFactory.enumerated("root4_F60Atribute0", new int[]{0, 36}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F60, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F60"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F60, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F60"), "!=", 0));
		featureAttrAtribute1.put("root4_F71", VariableFactory.enumerated("root4_F71Atribute1", new int[]{0, 4}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F71, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F71"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F71, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F71"), "!=", 0));
		featureAttrAtribute0.put("root4_F71", VariableFactory.enumerated("root4_F71Atribute0", new int[]{0, 13}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F71, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F71"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F71, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F71"), "!=", 0));
		featureAttrAtribute1.put("root4_F72", VariableFactory.enumerated("root4_F72Atribute1", new int[]{0, 50}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F72, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F72"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F72, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F72"), "!=", 0));
		featureAttrAtribute0.put("root4_F72", VariableFactory.enumerated("root4_F72Atribute0", new int[]{0, 68}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F72, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F72"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F72, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F72"), "!=", 0));
		featureAttrAtribute1.put("root4_F73", VariableFactory.enumerated("root4_F73Atribute1", new int[]{0, 82}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F73, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F73"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F73, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F73"), "!=", 0));
		featureAttrAtribute0.put("root4_F73", VariableFactory.enumerated("root4_F73Atribute0", new int[]{0, 26}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F73, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F73"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F73, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F73"), "!=", 0));
		featureAttrAtribute1.put("root4_F74", VariableFactory.enumerated("root4_F74Atribute1", new int[]{0, 41}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F74, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F74"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F74, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F74"), "!=", 0));
		featureAttrAtribute0.put("root4_F74", VariableFactory.enumerated("root4_F74Atribute0", new int[]{0, 62}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F74, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F74"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F74, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F74"), "!=", 0));
		featureAttrAtribute1.put("root4_F75", VariableFactory.enumerated("root4_F75Atribute1", new int[]{0, 43}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F75, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F75"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F75, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F75"), "!=", 0));
		featureAttrAtribute0.put("root4_F75", VariableFactory.enumerated("root4_F75Atribute0", new int[]{0, 67}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F75, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F75"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F75, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F75"), "!=", 0));
		featureAttrAtribute1.put("root4_F76", VariableFactory.enumerated("root4_F76Atribute1", new int[]{0, 81}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F76, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F76"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F76, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F76"), "!=", 0));
		featureAttrAtribute0.put("root4_F76", VariableFactory.enumerated("root4_F76Atribute0", new int[]{0, 27}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F76, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F76"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F76, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F76"), "!=", 0));
		featureAttrAtribute1.put("root4_F77", VariableFactory.enumerated("root4_F77Atribute1", new int[]{0, 77}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F77, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F77"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F77, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F77"), "!=", 0));
		featureAttrAtribute0.put("root4_F77", VariableFactory.enumerated("root4_F77Atribute0", new int[]{0, 21}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F77, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F77"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F77, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F77"), "!=", 0));
		featureAttrAtribute1.put("root4_F78", VariableFactory.enumerated("root4_F78Atribute1", new int[]{0, 57}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F78, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F78"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F78, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F78"), "!=", 0));
		featureAttrAtribute0.put("root4_F78", VariableFactory.enumerated("root4_F78Atribute0", new int[]{0, 69}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F78, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F78"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F78, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F78"), "!=", 0));
		featureAttrAtribute1.put("root4_F79", VariableFactory.enumerated("root4_F79Atribute1", new int[]{0, 32}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F79, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F79"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F79, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F79"), "!=", 0));
		featureAttrAtribute0.put("root4_F79", VariableFactory.enumerated("root4_F79Atribute0", new int[]{0, 93}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F79, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F79"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F79, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F79"), "!=", 0));
		featureAttrAtribute1.put("root5_F1", VariableFactory.enumerated("root5_F1Atribute1", new int[]{0, 57}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F1, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F1"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F1, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F1"), "!=", 0));
		featureAttrAtribute0.put("root5_F1", VariableFactory.enumerated("root5_F1Atribute0", new int[]{0, 36}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F1, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F1"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F1, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F1"), "!=", 0));
		featureAttrAtribute1.put("root5_F43", VariableFactory.enumerated("root5_F43Atribute1", new int[]{0, 76}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F43, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F43"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F43, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F43"), "!=", 0));
		featureAttrAtribute0.put("root5_F43", VariableFactory.enumerated("root5_F43Atribute0", new int[]{0, 47}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F43, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F43"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F43, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F43"), "!=", 0));
		featureAttrAtribute1.put("root5_F44", VariableFactory.enumerated("root5_F44Atribute1", new int[]{0, 94}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F44, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F44"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F44, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F44"), "!=", 0));
		featureAttrAtribute0.put("root5_F44", VariableFactory.enumerated("root5_F44Atribute0", new int[]{0, 84}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F44, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F44"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F44, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F44"), "!=", 0));
		featureAttrAtribute1.put("root5_F45", VariableFactory.enumerated("root5_F45Atribute1", new int[]{0, 56}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F45, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F45"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F45, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F45"), "!=", 0));
		featureAttrAtribute0.put("root5_F45", VariableFactory.enumerated("root5_F45Atribute0", new int[]{0, 99}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F45, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F45"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F45, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F45"), "!=", 0));
		featureAttrAtribute1.put("root5_F46", VariableFactory.enumerated("root5_F46Atribute1", new int[]{0, 77}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F46, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F46"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F46, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F46"), "!=", 0));
		featureAttrAtribute0.put("root5_F46", VariableFactory.enumerated("root5_F46Atribute0", new int[]{0, 75}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F46, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F46"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F46, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F46"), "!=", 0));
		featureAttrAtribute1.put("root5_F47", VariableFactory.enumerated("root5_F47Atribute1", new int[]{0, 19}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F47, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F47"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F47, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F47"), "!=", 0));
		featureAttrAtribute0.put("root5_F47", VariableFactory.enumerated("root5_F47Atribute0", new int[]{0, 36}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F47, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F47"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F47, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F47"), "!=", 0));
		featureAttrAtribute1.put("root5_F48", VariableFactory.enumerated("root5_F48Atribute1", new int[]{0, 37}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F48, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F48"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F48, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F48"), "!=", 0));
		featureAttrAtribute0.put("root5_F48", VariableFactory.enumerated("root5_F48Atribute0", new int[]{0, 86}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F48, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F48"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F48, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F48"), "!=", 0));
		featureAttrAtribute1.put("root5_F49", VariableFactory.enumerated("root5_F49Atribute1", new int[]{0, 46}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F49, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F49"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F49, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F49"), "!=", 0));
		featureAttrAtribute0.put("root5_F49", VariableFactory.enumerated("root5_F49Atribute0", new int[]{0, 92}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F49, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F49"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F49, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F49"), "!=", 0));
		featureAttrAtribute1.put("root5_F40", VariableFactory.enumerated("root5_F40Atribute1", new int[]{0, 56}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F40, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F40"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F40, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F40"), "!=", 0));
		featureAttrAtribute0.put("root5_F40", VariableFactory.enumerated("root5_F40Atribute0", new int[]{0, 62}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F40, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F40"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F40, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F40"), "!=", 0));
		featureAttrAtribute1.put("root5_F41", VariableFactory.enumerated("root5_F41Atribute1", new int[]{0, 24}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F41, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F41"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F41, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F41"), "!=", 0));
		featureAttrAtribute0.put("root5_F41", VariableFactory.enumerated("root5_F41Atribute0", new int[]{0, 60}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F41, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F41"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F41, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F41"), "!=", 0));
		featureAttrAtribute1.put("root5_F62", VariableFactory.enumerated("root5_F62Atribute1", new int[]{0, 6}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F62, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F62"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F62, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F62"), "!=", 0));
		featureAttrAtribute0.put("root5_F62", VariableFactory.enumerated("root5_F62Atribute0", new int[]{0, 76}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F62, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F62"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F62, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F62"), "!=", 0));
		featureAttrAtribute1.put("root5_F63", VariableFactory.enumerated("root5_F63Atribute1", new int[]{0, 7}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F63, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F63"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F63, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F63"), "!=", 0));
		featureAttrAtribute0.put("root5_F63", VariableFactory.enumerated("root5_F63Atribute0", new int[]{0, 80}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F63, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F63"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F63, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F63"), "!=", 0));
		featureAttrAtribute1.put("root5_F5", VariableFactory.enumerated("root5_F5Atribute1", new int[]{0, 5}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F5, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F5"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F5, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F5"), "!=", 0));
		featureAttrAtribute0.put("root5_F5", VariableFactory.enumerated("root5_F5Atribute0", new int[]{0, 67}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F5, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F5"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F5, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F5"), "!=", 0));
		featureAttrAtribute1.put("root5_F21", VariableFactory.enumerated("root5_F21Atribute1", new int[]{0, 20}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F21, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F21"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F21, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F21"), "!=", 0));
		featureAttrAtribute0.put("root5_F21", VariableFactory.enumerated("root5_F21Atribute0", new int[]{0, 46}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F21, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F21"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F21, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F21"), "!=", 0));
		featureAttrAtribute1.put("root5_F50", VariableFactory.enumerated("root5_F50Atribute1", new int[]{0, 24}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F50, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F50"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F50, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F50"), "!=", 0));
		featureAttrAtribute0.put("root5_F50", VariableFactory.enumerated("root5_F50Atribute0", new int[]{0, 37}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F50, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F50"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F50, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F50"), "!=", 0));
		featureAttrAtribute1.put("root5_F51", VariableFactory.enumerated("root5_F51Atribute1", new int[]{0, 39}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F51, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F51"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F51, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F51"), "!=", 0));
		featureAttrAtribute0.put("root5_F51", VariableFactory.enumerated("root5_F51Atribute0", new int[]{0, 95}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F51, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F51"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F51, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F51"), "!=", 0));
		featureAttrAtribute1.put("root5_F52", VariableFactory.enumerated("root5_F52Atribute1", new int[]{0, 84}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F52, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F52"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F52, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F52"), "!=", 0));
		featureAttrAtribute0.put("root5_F52", VariableFactory.enumerated("root5_F52Atribute0", new int[]{0, 89}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F52, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F52"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F52, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F52"), "!=", 0));
		featureAttrAtribute1.put("root5_F53", VariableFactory.enumerated("root5_F53Atribute1", new int[]{0, 99}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F53, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F53"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F53, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F53"), "!=", 0));
		featureAttrAtribute0.put("root5_F53", VariableFactory.enumerated("root5_F53Atribute0", new int[]{0, 20}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F53, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F53"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F53, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F53"), "!=", 0));
		featureAttrAtribute1.put("root5_F28", VariableFactory.enumerated("root5_F28Atribute1", new int[]{0, 33}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F28, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F28"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F28, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F28"), "!=", 0));
		featureAttrAtribute0.put("root5_F28", VariableFactory.enumerated("root5_F28Atribute0", new int[]{0, 7}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F28, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F28"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F28, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F28"), "!=", 0));
		featureAttrAtribute1.put("root5_F29", VariableFactory.enumerated("root5_F29Atribute1", new int[]{0, 79}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F29, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F29"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F29, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F29"), "!=", 0));
		featureAttrAtribute0.put("root5_F29", VariableFactory.enumerated("root5_F29Atribute0", new int[]{0, 8}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F29, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F29"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F29, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F29"), "!=", 0));
		featureAttrAtribute1.put("root5_F23", VariableFactory.enumerated("root5_F23Atribute1", new int[]{0, 61}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F23, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F23"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F23, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F23"), "!=", 0));
		featureAttrAtribute0.put("root5_F23", VariableFactory.enumerated("root5_F23Atribute0", new int[]{0, 24}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F23, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F23"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F23, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F23"), "!=", 0));
		featureAttrAtribute1.put("root5_F24", VariableFactory.enumerated("root5_F24Atribute1", new int[]{0, 31}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F24, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F24"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F24, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F24"), "!=", 0));
		featureAttrAtribute0.put("root5_F24", VariableFactory.enumerated("root5_F24Atribute0", new int[]{0, 89}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F24, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F24"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F24, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F24"), "!=", 0));
		featureAttrAtribute1.put("root5_F25", VariableFactory.enumerated("root5_F25Atribute1", new int[]{0, 97}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F25, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F25"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F25, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F25"), "!=", 0));
		featureAttrAtribute0.put("root5_F25", VariableFactory.enumerated("root5_F25Atribute0", new int[]{0, 6}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F25, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F25"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F25, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F25"), "!=", 0));
		featureAttrAtribute1.put("root5_F14", VariableFactory.enumerated("root5_F14Atribute1", new int[]{0, 19}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F14, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F14"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F14, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F14"), "!=", 0));
		featureAttrAtribute0.put("root5_F14", VariableFactory.enumerated("root5_F14Atribute0", new int[]{0, 71}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F14, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F14"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F14, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F14"), "!=", 0));
		featureAttrAtribute1.put("root5_F26", VariableFactory.enumerated("root5_F26Atribute1", new int[]{0, 95}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F26, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F26"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F26, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F26"), "!=", 0));
		featureAttrAtribute0.put("root5_F26", VariableFactory.enumerated("root5_F26Atribute0", new int[]{0, 90}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F26, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F26"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F26, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F26"), "!=", 0));
		featureAttrAtribute1.put("root5_F16", VariableFactory.enumerated("root5_F16Atribute1", new int[]{0, 72}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F16, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F16"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F16, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F16"), "!=", 0));
		featureAttrAtribute0.put("root5_F16", VariableFactory.enumerated("root5_F16Atribute0", new int[]{0, 77}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F16, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F16"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F16, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F16"), "!=", 0));
		featureAttrAtribute1.put("root5_F31", VariableFactory.enumerated("root5_F31Atribute1", new int[]{0, 18}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F31, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F31"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F31, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F31"), "!=", 0));
		featureAttrAtribute0.put("root5_F31", VariableFactory.enumerated("root5_F31Atribute0", new int[]{0, 19}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F31, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F31"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F31, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F31"), "!=", 0));
		featureAttrAtribute1.put("root5_F32", VariableFactory.enumerated("root5_F32Atribute1", new int[]{0, 58}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F32, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F32"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F32, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F32"), "!=", 0));
		featureAttrAtribute0.put("root5_F32", VariableFactory.enumerated("root5_F32Atribute0", new int[]{0, 48}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F32, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F32"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F32, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F32"), "!=", 0));
		featureAttrAtribute1.put("root5_F33", VariableFactory.enumerated("root5_F33Atribute1", new int[]{0, 82}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F33, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F33"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F33, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F33"), "!=", 0));
		featureAttrAtribute0.put("root5_F33", VariableFactory.enumerated("root5_F33Atribute0", new int[]{0, 26}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F33, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F33"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F33, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F33"), "!=", 0));
		featureAttrAtribute1.put("root5_F34", VariableFactory.enumerated("root5_F34Atribute1", new int[]{0, 10}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F34, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F34"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F34, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F34"), "!=", 0));
		featureAttrAtribute0.put("root5_F34", VariableFactory.enumerated("root5_F34Atribute0", new int[]{0, 83}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F34, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F34"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F34, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F34"), "!=", 0));
		featureAttrAtribute1.put("root5_F35", VariableFactory.enumerated("root5_F35Atribute1", new int[]{0, 41}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F35, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F35"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F35, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F35"), "!=", 0));
		featureAttrAtribute0.put("root5_F35", VariableFactory.enumerated("root5_F35Atribute0", new int[]{0, 50}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F35, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F35"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F35, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F35"), "!=", 0));
		featureAttrAtribute1.put("root5_F36", VariableFactory.enumerated("root5_F36Atribute1", new int[]{0, 72}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F36, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F36"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F36, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F36"), "!=", 0));
		featureAttrAtribute0.put("root5_F36", VariableFactory.enumerated("root5_F36Atribute0", new int[]{0, 83}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F36, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F36"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F36, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F36"), "!=", 0));
		featureAttrAtribute1.put("root5_F37", VariableFactory.enumerated("root5_F37Atribute1", new int[]{0, 61}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F37, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F37"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F37, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F37"), "!=", 0));
		featureAttrAtribute0.put("root5_F37", VariableFactory.enumerated("root5_F37Atribute0", new int[]{0, 52}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F37, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F37"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F37, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F37"), "!=", 0));
		featureAttrAtribute1.put("root5_F38", VariableFactory.enumerated("root5_F38Atribute1", new int[]{0, 48}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F38, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F38"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F38, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F38"), "!=", 0));
		featureAttrAtribute0.put("root5_F38", VariableFactory.enumerated("root5_F38Atribute0", new int[]{0, 16}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F38, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F38"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F38, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F38"), "!=", 0));
		featureAttrAtribute1.put("root5_F64", VariableFactory.enumerated("root5_F64Atribute1", new int[]{0, 32}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F64, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F64"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F64, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F64"), "!=", 0));
		featureAttrAtribute0.put("root5_F64", VariableFactory.enumerated("root5_F64Atribute0", new int[]{0, 61}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F64, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F64"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F64, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F64"), "!=", 0));
		featureAttrAtribute1.put("root5_F65", VariableFactory.enumerated("root5_F65Atribute1", new int[]{0, 86}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F65, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F65"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F65, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F65"), "!=", 0));
		featureAttrAtribute0.put("root5_F65", VariableFactory.enumerated("root5_F65Atribute0", new int[]{0, 4}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F65, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F65"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F65, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F65"), "!=", 0));
		featureAttrAtribute1.put("root5_F66", VariableFactory.enumerated("root5_F66Atribute1", new int[]{0, 73}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F66, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F66"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F66, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F66"), "!=", 0));
		featureAttrAtribute0.put("root5_F66", VariableFactory.enumerated("root5_F66Atribute0", new int[]{0, 52}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F66, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F66"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F66, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F66"), "!=", 0));
		featureAttrAtribute1.put("root5_F67", VariableFactory.enumerated("root5_F67Atribute1", new int[]{0, 35}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F67, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F67"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F67, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F67"), "!=", 0));
		featureAttrAtribute0.put("root5_F67", VariableFactory.enumerated("root5_F67Atribute0", new int[]{0, 12}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F67, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F67"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F67, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F67"), "!=", 0));
		featureAttrAtribute1.put("root5_F68", VariableFactory.enumerated("root5_F68Atribute1", new int[]{0, 55}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F68, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F68"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F68, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F68"), "!=", 0));
		featureAttrAtribute0.put("root5_F68", VariableFactory.enumerated("root5_F68Atribute0", new int[]{0, 61}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F68, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F68"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F68, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F68"), "!=", 0));
		featureAttrAtribute1.put("root5_F69", VariableFactory.enumerated("root5_F69Atribute1", new int[]{0, 93}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F69, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F69"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F69, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F69"), "!=", 0));
		featureAttrAtribute0.put("root5_F69", VariableFactory.enumerated("root5_F69Atribute0", new int[]{0, 63}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F69, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F69"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F69, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F69"), "!=", 0));
		featureAttrAtribute1.put("root5_F70", VariableFactory.enumerated("root5_F70Atribute1", new int[]{0, 16}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F70, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F70"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F70, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F70"), "!=", 0));
		featureAttrAtribute0.put("root5_F70", VariableFactory.enumerated("root5_F70Atribute0", new int[]{0, 46}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F70, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F70"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F70, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F70"), "!=", 0));
		featureAttrAtribute1.put("root5_F19", VariableFactory.enumerated("root5_F19Atribute1", new int[]{0, 72}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F19, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F19"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F19, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F19"), "!=", 0));
		featureAttrAtribute0.put("root5_F19", VariableFactory.enumerated("root5_F19Atribute0", new int[]{0, 56}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F19, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F19"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F19, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F19"), "!=", 0));
		featureAttrAtribute1.put("root5_F20", VariableFactory.enumerated("root5_F20Atribute1", new int[]{0, 90}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F20, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F20"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F20, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F20"), "!=", 0));
		featureAttrAtribute0.put("root5_F20", VariableFactory.enumerated("root5_F20Atribute0", new int[]{0, 24}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F20, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F20"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F20, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F20"), "!=", 0));
		featureAttrAtribute1.put("root5_F8", VariableFactory.enumerated("root5_F8Atribute1", new int[]{0, 53}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F8, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F8"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F8, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F8"), "!=", 0));
		featureAttrAtribute0.put("root5_F8", VariableFactory.enumerated("root5_F8Atribute0", new int[]{0, 45}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F8, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F8"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F8, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F8"), "!=", 0));
		featureAttrAtribute1.put("root5_F9", VariableFactory.enumerated("root5_F9Atribute1", new int[]{0, 44}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F9, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F9"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F9, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F9"), "!=", 0));
		featureAttrAtribute0.put("root5_F9", VariableFactory.enumerated("root5_F9Atribute0", new int[]{0, 19}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F9, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F9"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F9, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F9"), "!=", 0));
		featureAttrAtribute1.put("root5_F10", VariableFactory.enumerated("root5_F10Atribute1", new int[]{0, 79}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F10, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F10"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F10, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F10"), "!=", 0));
		featureAttrAtribute0.put("root5_F10", VariableFactory.enumerated("root5_F10Atribute0", new int[]{0, 50}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F10, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F10"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F10, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F10"), "!=", 0));
		featureAttrAtribute1.put("root5_F54", VariableFactory.enumerated("root5_F54Atribute1", new int[]{0, 63}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F54, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F54"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F54, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F54"), "!=", 0));
		featureAttrAtribute0.put("root5_F54", VariableFactory.enumerated("root5_F54Atribute0", new int[]{0, 31}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F54, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F54"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F54, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F54"), "!=", 0));
		featureAttrAtribute1.put("root5_F71", VariableFactory.enumerated("root5_F71Atribute1", new int[]{0, 55}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F71, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F71"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F71, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F71"), "!=", 0));
		featureAttrAtribute0.put("root5_F71", VariableFactory.enumerated("root5_F71Atribute0", new int[]{0, 18}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F71, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F71"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F71, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F71"), "!=", 0));
		featureAttrAtribute1.put("root5_F72", VariableFactory.enumerated("root5_F72Atribute1", new int[]{0, 99}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F72, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F72"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F72, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F72"), "!=", 0));
		featureAttrAtribute0.put("root5_F72", VariableFactory.enumerated("root5_F72Atribute0", new int[]{0, 59}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F72, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F72"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F72, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F72"), "!=", 0));
		featureAttrAtribute1.put("root5_F73", VariableFactory.enumerated("root5_F73Atribute1", new int[]{0, 85}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F73, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F73"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F73, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F73"), "!=", 0));
		featureAttrAtribute0.put("root5_F73", VariableFactory.enumerated("root5_F73Atribute0", new int[]{0, 10}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F73, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F73"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F73, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F73"), "!=", 0));
		featureAttrAtribute1.put("root5_F74", VariableFactory.enumerated("root5_F74Atribute1", new int[]{0, 76}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F74, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F74"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F74, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F74"), "!=", 0));
		featureAttrAtribute0.put("root5_F74", VariableFactory.enumerated("root5_F74Atribute0", new int[]{0, 68}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F74, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F74"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F74, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F74"), "!=", 0));
		featureAttrAtribute1.put("root5_F75", VariableFactory.enumerated("root5_F75Atribute1", new int[]{0, 50}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F75, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F75"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F75, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F75"), "!=", 0));
		featureAttrAtribute0.put("root5_F75", VariableFactory.enumerated("root5_F75Atribute0", new int[]{0, 99}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F75, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F75"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F75, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F75"), "!=", 0));
		featureAttrAtribute1.put("root5_F76", VariableFactory.enumerated("root5_F76Atribute1", new int[]{0, 76}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F76, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F76"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F76, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F76"), "!=", 0));
		featureAttrAtribute0.put("root5_F76", VariableFactory.enumerated("root5_F76Atribute0", new int[]{0, 12}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F76, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F76"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F76, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F76"), "!=", 0));
		featureAttrAtribute1.put("root5_F77", VariableFactory.enumerated("root5_F77Atribute1", new int[]{0, 70}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F77, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F77"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F77, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F77"), "!=", 0));
		featureAttrAtribute0.put("root5_F77", VariableFactory.enumerated("root5_F77Atribute0", new int[]{0, 78}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F77, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F77"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F77, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F77"), "!=", 0));
		featureAttrAtribute1.put("root5_F78", VariableFactory.enumerated("root5_F78Atribute1", new int[]{0, 69}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F78, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F78"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F78, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F78"), "!=", 0));
		featureAttrAtribute0.put("root5_F78", VariableFactory.enumerated("root5_F78Atribute0", new int[]{0, 36}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F78, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F78"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F78, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F78"), "!=", 0));
		featureAttrAtribute1.put("root5_F79", VariableFactory.enumerated("root5_F79Atribute1", new int[]{0, 65}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F79, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F79"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F79, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F79"), "!=", 0));
		featureAttrAtribute0.put("root5_F79", VariableFactory.enumerated("root5_F79Atribute0", new int[]{0, 42}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F79, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F79"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F79, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F79"), "!=", 0));
		featureAttrAtribute1.put("root5_F56", VariableFactory.enumerated("root5_F56Atribute1", new int[]{0, 56}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F56, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F56"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F56, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F56"), "!=", 0));
		featureAttrAtribute0.put("root5_F56", VariableFactory.enumerated("root5_F56Atribute0", new int[]{0, 38}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F56, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F56"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F56, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F56"), "!=", 0));
		featureAttrAtribute1.put("root5_F57", VariableFactory.enumerated("root5_F57Atribute1", new int[]{0, 98}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F57, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F57"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F57, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F57"), "!=", 0));
		featureAttrAtribute0.put("root5_F57", VariableFactory.enumerated("root5_F57Atribute0", new int[]{0, 75}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F57, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F57"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F57, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F57"), "!=", 0));
		featureAttrAtribute1.put("root5_F58", VariableFactory.enumerated("root5_F58Atribute1", new int[]{0, 40}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F58, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F58"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F58, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F58"), "!=", 0));
		featureAttrAtribute0.put("root5_F58", VariableFactory.enumerated("root5_F58Atribute0", new int[]{0, 56}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F58, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F58"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F58, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F58"), "!=", 0));
		featureAttrAtribute1.put("root5_F59", VariableFactory.enumerated("root5_F59Atribute1", new int[]{0, 57}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F59, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F59"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F59, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F59"), "!=", 0));
		featureAttrAtribute0.put("root5_F59", VariableFactory.enumerated("root5_F59Atribute0", new int[]{0, 96}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F59, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F59"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F59, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F59"), "!=", 0));
		featureAttrAtribute1.put("root5_F60", VariableFactory.enumerated("root5_F60Atribute1", new int[]{0, 65}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F60, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F60"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F60, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F60"), "!=", 0));
		featureAttrAtribute0.put("root5_F60", VariableFactory.enumerated("root5_F60Atribute0", new int[]{0, 57}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F60, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F60"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F60, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F60"), "!=", 0));
		featureAttrAtribute1.put("root5_F61", VariableFactory.enumerated("root5_F61Atribute1", new int[]{0, 86}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F61, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F61"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F61, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F61"), "!=", 0));
		featureAttrAtribute0.put("root5_F61", VariableFactory.enumerated("root5_F61Atribute0", new int[]{0, 49}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F61, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F61"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F61, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F61"), "!=", 0));
		featureAttrAtribute1.put("root5_F12", VariableFactory.enumerated("root5_F12Atribute1", new int[]{0, 7}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F12, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F12"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F12, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F12"), "!=", 0));
		featureAttrAtribute0.put("root5_F12", VariableFactory.enumerated("root5_F12Atribute0", new int[]{0, 53}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F12, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F12"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F12, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F12"), "!=", 0));
		featureAttrAtribute1.put("root5_F13", VariableFactory.enumerated("root5_F13Atribute1", new int[]{0, 84}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F13, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F13"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F13, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F13"), "!=", 0));
		featureAttrAtribute0.put("root5_F13", VariableFactory.enumerated("root5_F13Atribute0", new int[]{0, 83}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F13, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F13"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F13, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F13"), "!=", 0));
	}
}