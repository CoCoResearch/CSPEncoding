
package testsFSG.defaul.features80;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import org.chocosolver.solver.ResolutionPolicy;
import org.chocosolver.solver.Solver;
import org.chocosolver.solver.constraints.Constraint;
import org.chocosolver.solver.constraints.IntConstraintFactory;
import org.chocosolver.solver.constraints.LogicalConstraintFactory;
import org.chocosolver.solver.constraints.SatFactory;
import org.chocosolver.solver.constraints.nary.cnf.LogOp;
import org.chocosolver.solver.search.loop.monitors.SMF;
import org.chocosolver.solver.search.strategy.IntStrategyFactory;
import org.chocosolver.solver.search.strategy.strategy.IntStrategy;
import org.chocosolver.solver.trace.Chatterbox;
import org.chocosolver.solver.variables.BoolVar;
import org.chocosolver.solver.variables.IntVar;
import org.chocosolver.solver.variables.Variable;
import org.chocosolver.solver.variables.VariableFactory;
import searchStrategies.Utilities;

public class CoCoModelDefault0 {
	public static void main(String[] args) {
		Solver solver = new Solver();
		
		//--------------------------------------------
		//Features
		//--------------------------------------------
		int contFeatures = 80;
			
		BoolVar root1_root = (BoolVar) VariableFactory.fixed("feature_root1_root", 1, solver);
		BoolVar root1_F1 = VariableFactory.bool("feature_root1_F1", solver);
		BoolVar root1_F2 = VariableFactory.bool("feature_root1_F2", solver);
		BoolVar root1_F3 = VariableFactory.bool("feature_root1_F3", solver);
		BoolVar root1_F4 = VariableFactory.bool("feature_root1_F4", solver);
		BoolVar root1_F43 = VariableFactory.bool("feature_root1_F43", solver);
		BoolVar root1_F44 = VariableFactory.bool("feature_root1_F44", solver);
		BoolVar root1_F45 = VariableFactory.bool("feature_root1_F45", solver);
		BoolVar root1_F5 = VariableFactory.bool("feature_root1_F5", solver);
		BoolVar root1_F6 = VariableFactory.bool("feature_root1_F6", solver);
		BoolVar root1_F12 = VariableFactory.bool("feature_root1_F12", solver);
		BoolVar root1_F19 = VariableFactory.bool("feature_root1_F19", solver);
		BoolVar root1_F20 = VariableFactory.bool("feature_root1_F20", solver);
		BoolVar root1_F49 = VariableFactory.bool("feature_root1_F49", solver);
		BoolVar root1_F50 = VariableFactory.bool("feature_root1_F50", solver);
		BoolVar root1_F51 = VariableFactory.bool("feature_root1_F51", solver);
		BoolVar root1_F52 = VariableFactory.bool("feature_root1_F52", solver);
		BoolVar root1_F53 = VariableFactory.bool("feature_root1_F53", solver);
		BoolVar root1_F54 = VariableFactory.bool("feature_root1_F54", solver);
		BoolVar root1_F21 = VariableFactory.bool("feature_root1_F21", solver);
		BoolVar root1_F22 = VariableFactory.bool("feature_root1_F22", solver);
		BoolVar root1_F23 = VariableFactory.bool("feature_root1_F23", solver);
		BoolVar root1_F55 = VariableFactory.bool("feature_root1_F55", solver);
		BoolVar root1_F67 = VariableFactory.bool("feature_root1_F67", solver);
		BoolVar root1_F56 = VariableFactory.bool("feature_root1_F56", solver);
		BoolVar root1_F57 = VariableFactory.bool("feature_root1_F57", solver);
		BoolVar root1_F58 = VariableFactory.bool("feature_root1_F58", solver);
		BoolVar root1_F59 = VariableFactory.bool("feature_root1_F59", solver);
		BoolVar root1_F60 = VariableFactory.bool("feature_root1_F60", solver);
		BoolVar root1_F61 = VariableFactory.bool("feature_root1_F61", solver);
		BoolVar root1_F62 = VariableFactory.bool("feature_root1_F62", solver);
		BoolVar root1_F63 = VariableFactory.bool("feature_root1_F63", solver);
		BoolVar root1_F78 = VariableFactory.bool("feature_root1_F78", solver);
		BoolVar root1_F24 = VariableFactory.bool("feature_root1_F24", solver);
		BoolVar root1_F25 = VariableFactory.bool("feature_root1_F25", solver);
		BoolVar root1_F26 = VariableFactory.bool("feature_root1_F26", solver);
		BoolVar root1_F27 = VariableFactory.bool("feature_root1_F27", solver);
		BoolVar root1_F28 = VariableFactory.bool("feature_root1_F28", solver);
		BoolVar root1_F68 = VariableFactory.bool("feature_root1_F68", solver);
		BoolVar root1_F69 = VariableFactory.bool("feature_root1_F69", solver);
		BoolVar root1_F29 = VariableFactory.bool("feature_root1_F29", solver);
		BoolVar root1_F35 = VariableFactory.bool("feature_root1_F35", solver);
		BoolVar root1_F36 = VariableFactory.bool("feature_root1_F36", solver);
		BoolVar root1_F37 = VariableFactory.bool("feature_root1_F37", solver);
		BoolVar root1_F46 = VariableFactory.bool("feature_root1_F46", solver);
		BoolVar root1_F70 = VariableFactory.bool("feature_root1_F70", solver);
		BoolVar root1_F71 = VariableFactory.bool("feature_root1_F71", solver);
		BoolVar root1_F47 = VariableFactory.bool("feature_root1_F47", solver);
		BoolVar root1_F64 = VariableFactory.bool("feature_root1_F64", solver);
		BoolVar root1_F65 = VariableFactory.bool("feature_root1_F65", solver);
		BoolVar root1_F66 = VariableFactory.bool("feature_root1_F66", solver);
		BoolVar root1_F48 = VariableFactory.bool("feature_root1_F48", solver);
		BoolVar root1_F38 = VariableFactory.bool("feature_root1_F38", solver);
		BoolVar root1_F39 = VariableFactory.bool("feature_root1_F39", solver);
		BoolVar root1_F40 = VariableFactory.bool("feature_root1_F40", solver);
		BoolVar root1_F41 = VariableFactory.bool("feature_root1_F41", solver);
		BoolVar root1_F30 = VariableFactory.bool("feature_root1_F30", solver);
		BoolVar root1_F31 = VariableFactory.bool("feature_root1_F31", solver);
		BoolVar root1_F72 = VariableFactory.bool("feature_root1_F72", solver);
		BoolVar root1_F73 = VariableFactory.bool("feature_root1_F73", solver);
		BoolVar root1_F74 = VariableFactory.bool("feature_root1_F74", solver);
		BoolVar root1_F75 = VariableFactory.bool("feature_root1_F75", solver);
		BoolVar root1_F76 = VariableFactory.bool("feature_root1_F76", solver);
		BoolVar root1_F77 = VariableFactory.bool("feature_root1_F77", solver);
		BoolVar root1_F32 = VariableFactory.bool("feature_root1_F32", solver);
		BoolVar root1_F42 = VariableFactory.bool("feature_root1_F42", solver);
		BoolVar root1_F33 = VariableFactory.bool("feature_root1_F33", solver);
		BoolVar root1_F13 = VariableFactory.bool("feature_root1_F13", solver);
		BoolVar root1_F14 = VariableFactory.bool("feature_root1_F14", solver);
		BoolVar root1_F15 = VariableFactory.bool("feature_root1_F15", solver);
		BoolVar root1_F16 = VariableFactory.bool("feature_root1_F16", solver);
		BoolVar root1_F34 = VariableFactory.bool("feature_root1_F34", solver);
		BoolVar root1_F17 = VariableFactory.bool("feature_root1_F17", solver);
		BoolVar root1_F18 = VariableFactory.bool("feature_root1_F18", solver);
		BoolVar root1_F7 = VariableFactory.bool("feature_root1_F7", solver);
		BoolVar root1_F8 = VariableFactory.bool("feature_root1_F8", solver);
		BoolVar root1_F9 = VariableFactory.bool("feature_root1_F9", solver);
		BoolVar root1_F79 = VariableFactory.bool("feature_root1_F79", solver);
		BoolVar root1_F10 = VariableFactory.bool("feature_root1_F10", solver);
		BoolVar root1_F11 = VariableFactory.bool("feature_root1_F11", solver);
		
		//--------------------------------------------
		//Feature Attributes
		//--------------------------------------------
		HashMap<String, IntVar> featureAttrAtribute1 = new HashMap<String, IntVar>();
		HashMap<String, IntVar> featureAttrAtribute0 = new HashMap<String, IntVar>();
		
		featureAttrAtribute1.put("root1_F3", VariableFactory.enumerated("root1_F3Atribute1", new int[]{0, 76}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F3, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F3"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F3, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F3"), "!=", 0));
		featureAttrAtribute0.put("root1_F3", VariableFactory.enumerated("root1_F3Atribute0", new int[]{0, 69}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F3, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F3"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F3, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F3"), "!=", 0));
		featureAttrAtribute1.put("root1_F43", VariableFactory.enumerated("root1_F43Atribute1", new int[]{0, 32}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F43, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F43"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F43, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F43"), "!=", 0));
		featureAttrAtribute0.put("root1_F43", VariableFactory.enumerated("root1_F43Atribute0", new int[]{0, 76}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F43, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F43"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F43, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F43"), "!=", 0));
		featureAttrAtribute1.put("root1_F44", VariableFactory.enumerated("root1_F44Atribute1", new int[]{0, 58}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F44, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F44"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F44, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F44"), "!=", 0));
		featureAttrAtribute0.put("root1_F44", VariableFactory.enumerated("root1_F44Atribute0", new int[]{0, 20}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F44, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F44"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F44, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F44"), "!=", 0));
		featureAttrAtribute1.put("root1_F45", VariableFactory.enumerated("root1_F45Atribute1", new int[]{0, 28}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F45, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F45"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F45, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F45"), "!=", 0));
		featureAttrAtribute0.put("root1_F45", VariableFactory.enumerated("root1_F45Atribute0", new int[]{0, 42}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F45, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F45"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F45, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F45"), "!=", 0));
		featureAttrAtribute1.put("root1_F5", VariableFactory.enumerated("root1_F5Atribute1", new int[]{0, 52}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F5, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F5"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F5, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F5"), "!=", 0));
		featureAttrAtribute0.put("root1_F5", VariableFactory.enumerated("root1_F5Atribute0", new int[]{0, 68}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F5, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F5"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F5, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F5"), "!=", 0));
		featureAttrAtribute1.put("root1_F19", VariableFactory.enumerated("root1_F19Atribute1", new int[]{0, 35}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F19, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F19"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F19, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F19"), "!=", 0));
		featureAttrAtribute0.put("root1_F19", VariableFactory.enumerated("root1_F19Atribute0", new int[]{0, 93}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F19, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F19"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F19, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F19"), "!=", 0));
		featureAttrAtribute1.put("root1_F49", VariableFactory.enumerated("root1_F49Atribute1", new int[]{0, 28}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F49, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F49"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F49, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F49"), "!=", 0));
		featureAttrAtribute0.put("root1_F49", VariableFactory.enumerated("root1_F49Atribute0", new int[]{0, 97}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F49, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F49"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F49, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F49"), "!=", 0));
		featureAttrAtribute1.put("root1_F50", VariableFactory.enumerated("root1_F50Atribute1", new int[]{0, 84}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F50, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F50"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F50, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F50"), "!=", 0));
		featureAttrAtribute0.put("root1_F50", VariableFactory.enumerated("root1_F50Atribute0", new int[]{0, 71}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F50, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F50"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F50, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F50"), "!=", 0));
		featureAttrAtribute1.put("root1_F51", VariableFactory.enumerated("root1_F51Atribute1", new int[]{0, 56}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F51, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F51"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F51, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F51"), "!=", 0));
		featureAttrAtribute0.put("root1_F51", VariableFactory.enumerated("root1_F51Atribute0", new int[]{0, 18}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F51, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F51"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F51, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F51"), "!=", 0));
		featureAttrAtribute1.put("root1_F52", VariableFactory.enumerated("root1_F52Atribute1", new int[]{0, 35}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F52, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F52"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F52, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F52"), "!=", 0));
		featureAttrAtribute0.put("root1_F52", VariableFactory.enumerated("root1_F52Atribute0", new int[]{0, 45}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F52, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F52"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F52, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F52"), "!=", 0));
		featureAttrAtribute1.put("root1_F53", VariableFactory.enumerated("root1_F53Atribute1", new int[]{0, 79}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F53, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F53"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F53, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F53"), "!=", 0));
		featureAttrAtribute0.put("root1_F53", VariableFactory.enumerated("root1_F53Atribute0", new int[]{0, 35}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F53, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F53"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F53, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F53"), "!=", 0));
		featureAttrAtribute1.put("root1_F54", VariableFactory.enumerated("root1_F54Atribute1", new int[]{0, 87}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F54, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F54"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F54, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F54"), "!=", 0));
		featureAttrAtribute0.put("root1_F54", VariableFactory.enumerated("root1_F54Atribute0", new int[]{0, 62}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F54, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F54"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F54, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F54"), "!=", 0));
		featureAttrAtribute1.put("root1_F21", VariableFactory.enumerated("root1_F21Atribute1", new int[]{0, 55}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F21, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F21"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F21, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F21"), "!=", 0));
		featureAttrAtribute0.put("root1_F21", VariableFactory.enumerated("root1_F21Atribute0", new int[]{0, 24}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F21, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F21"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F21, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F21"), "!=", 0));
		featureAttrAtribute1.put("root1_F22", VariableFactory.enumerated("root1_F22Atribute1", new int[]{0, 24}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F22, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F22"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F22, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F22"), "!=", 0));
		featureAttrAtribute0.put("root1_F22", VariableFactory.enumerated("root1_F22Atribute0", new int[]{0, 26}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F22, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F22"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F22, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F22"), "!=", 0));
		featureAttrAtribute1.put("root1_F67", VariableFactory.enumerated("root1_F67Atribute1", new int[]{0, 6}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F67, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F67"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F67, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F67"), "!=", 0));
		featureAttrAtribute0.put("root1_F67", VariableFactory.enumerated("root1_F67Atribute0", new int[]{0, 90}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F67, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F67"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F67, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F67"), "!=", 0));
		featureAttrAtribute1.put("root1_F56", VariableFactory.enumerated("root1_F56Atribute1", new int[]{0, 54}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F56, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F56"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F56, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F56"), "!=", 0));
		featureAttrAtribute0.put("root1_F56", VariableFactory.enumerated("root1_F56Atribute0", new int[]{0, 73}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F56, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F56"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F56, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F56"), "!=", 0));
		featureAttrAtribute1.put("root1_F57", VariableFactory.enumerated("root1_F57Atribute1", new int[]{0, 42}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F57, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F57"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F57, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F57"), "!=", 0));
		featureAttrAtribute0.put("root1_F57", VariableFactory.enumerated("root1_F57Atribute0", new int[]{0, 50}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F57, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F57"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F57, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F57"), "!=", 0));
		featureAttrAtribute1.put("root1_F58", VariableFactory.enumerated("root1_F58Atribute1", new int[]{0, 21}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F58, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F58"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F58, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F58"), "!=", 0));
		featureAttrAtribute0.put("root1_F58", VariableFactory.enumerated("root1_F58Atribute0", new int[]{0, 54}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F58, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F58"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F58, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F58"), "!=", 0));
		featureAttrAtribute1.put("root1_F59", VariableFactory.enumerated("root1_F59Atribute1", new int[]{0, 60}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F59, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F59"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F59, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F59"), "!=", 0));
		featureAttrAtribute0.put("root1_F59", VariableFactory.enumerated("root1_F59Atribute0", new int[]{0, 88}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F59, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F59"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F59, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F59"), "!=", 0));
		featureAttrAtribute1.put("root1_F60", VariableFactory.enumerated("root1_F60Atribute1", new int[]{0, 84}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F60, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F60"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F60, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F60"), "!=", 0));
		featureAttrAtribute0.put("root1_F60", VariableFactory.enumerated("root1_F60Atribute0", new int[]{0, 94}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F60, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F60"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F60, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F60"), "!=", 0));
		featureAttrAtribute1.put("root1_F61", VariableFactory.enumerated("root1_F61Atribute1", new int[]{0, 90}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F61, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F61"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F61, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F61"), "!=", 0));
		featureAttrAtribute0.put("root1_F61", VariableFactory.enumerated("root1_F61Atribute0", new int[]{0, 24}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F61, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F61"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F61, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F61"), "!=", 0));
		featureAttrAtribute1.put("root1_F62", VariableFactory.enumerated("root1_F62Atribute1", new int[]{0, 30}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F62, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F62"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F62, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F62"), "!=", 0));
		featureAttrAtribute0.put("root1_F62", VariableFactory.enumerated("root1_F62Atribute0", new int[]{0, 9}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F62, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F62"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F62, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F62"), "!=", 0));
		featureAttrAtribute1.put("root1_F78", VariableFactory.enumerated("root1_F78Atribute1", new int[]{0, 94}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F78, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F78"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F78, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F78"), "!=", 0));
		featureAttrAtribute0.put("root1_F78", VariableFactory.enumerated("root1_F78Atribute0", new int[]{0, 34}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F78, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F78"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F78, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F78"), "!=", 0));
		featureAttrAtribute1.put("root1_F24", VariableFactory.enumerated("root1_F24Atribute1", new int[]{0, 84}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F24, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F24"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F24, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F24"), "!=", 0));
		featureAttrAtribute0.put("root1_F24", VariableFactory.enumerated("root1_F24Atribute0", new int[]{0, 96}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F24, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F24"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F24, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F24"), "!=", 0));
		featureAttrAtribute1.put("root1_F26", VariableFactory.enumerated("root1_F26Atribute1", new int[]{0, 59}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F26, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F26"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F26, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F26"), "!=", 0));
		featureAttrAtribute0.put("root1_F26", VariableFactory.enumerated("root1_F26Atribute0", new int[]{0, 4}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F26, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F26"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F26, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F26"), "!=", 0));
		featureAttrAtribute1.put("root1_F27", VariableFactory.enumerated("root1_F27Atribute1", new int[]{0, 52}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F27, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F27"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F27, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F27"), "!=", 0));
		featureAttrAtribute0.put("root1_F27", VariableFactory.enumerated("root1_F27Atribute0", new int[]{0, 43}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F27, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F27"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F27, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F27"), "!=", 0));
		featureAttrAtribute1.put("root1_F68", VariableFactory.enumerated("root1_F68Atribute1", new int[]{0, 30}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F68, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F68"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F68, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F68"), "!=", 0));
		featureAttrAtribute0.put("root1_F68", VariableFactory.enumerated("root1_F68Atribute0", new int[]{0, 12}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F68, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F68"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F68, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F68"), "!=", 0));
		featureAttrAtribute1.put("root1_F69", VariableFactory.enumerated("root1_F69Atribute1", new int[]{0, 64}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F69, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F69"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F69, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F69"), "!=", 0));
		featureAttrAtribute0.put("root1_F69", VariableFactory.enumerated("root1_F69Atribute0", new int[]{0, 25}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F69, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F69"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F69, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F69"), "!=", 0));
		featureAttrAtribute1.put("root1_F35", VariableFactory.enumerated("root1_F35Atribute1", new int[]{0, 29}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F35, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F35"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F35, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F35"), "!=", 0));
		featureAttrAtribute0.put("root1_F35", VariableFactory.enumerated("root1_F35Atribute0", new int[]{0, 95}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F35, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F35"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F35, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F35"), "!=", 0));
		featureAttrAtribute1.put("root1_F36", VariableFactory.enumerated("root1_F36Atribute1", new int[]{0, 26}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F36, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F36"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F36, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F36"), "!=", 0));
		featureAttrAtribute0.put("root1_F36", VariableFactory.enumerated("root1_F36Atribute0", new int[]{0, 25}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F36, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F36"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F36, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F36"), "!=", 0));
		featureAttrAtribute1.put("root1_F71", VariableFactory.enumerated("root1_F71Atribute1", new int[]{0, 10}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F71, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F71"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F71, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F71"), "!=", 0));
		featureAttrAtribute0.put("root1_F71", VariableFactory.enumerated("root1_F71Atribute0", new int[]{0, 86}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F71, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F71"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F71, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F71"), "!=", 0));
		featureAttrAtribute1.put("root1_F64", VariableFactory.enumerated("root1_F64Atribute1", new int[]{0, 66}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F64, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F64"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F64, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F64"), "!=", 0));
		featureAttrAtribute0.put("root1_F64", VariableFactory.enumerated("root1_F64Atribute0", new int[]{0, 5}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F64, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F64"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F64, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F64"), "!=", 0));
		featureAttrAtribute1.put("root1_F65", VariableFactory.enumerated("root1_F65Atribute1", new int[]{0, 46}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F65, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F65"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F65, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F65"), "!=", 0));
		featureAttrAtribute0.put("root1_F65", VariableFactory.enumerated("root1_F65Atribute0", new int[]{0, 22}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F65, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F65"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F65, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F65"), "!=", 0));
		featureAttrAtribute1.put("root1_F66", VariableFactory.enumerated("root1_F66Atribute1", new int[]{0, 73}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F66, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F66"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F66, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F66"), "!=", 0));
		featureAttrAtribute0.put("root1_F66", VariableFactory.enumerated("root1_F66Atribute0", new int[]{0, 73}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F66, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F66"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F66, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F66"), "!=", 0));
		featureAttrAtribute1.put("root1_F48", VariableFactory.enumerated("root1_F48Atribute1", new int[]{0, 22}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F48, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F48"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F48, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F48"), "!=", 0));
		featureAttrAtribute0.put("root1_F48", VariableFactory.enumerated("root1_F48Atribute0", new int[]{0, 41}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F48, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F48"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F48, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F48"), "!=", 0));
		featureAttrAtribute1.put("root1_F38", VariableFactory.enumerated("root1_F38Atribute1", new int[]{0, 30}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F38, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F38"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F38, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F38"), "!=", 0));
		featureAttrAtribute0.put("root1_F38", VariableFactory.enumerated("root1_F38Atribute0", new int[]{0, 31}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F38, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F38"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F38, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F38"), "!=", 0));
		featureAttrAtribute1.put("root1_F39", VariableFactory.enumerated("root1_F39Atribute1", new int[]{0, 65}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F39, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F39"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F39, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F39"), "!=", 0));
		featureAttrAtribute0.put("root1_F39", VariableFactory.enumerated("root1_F39Atribute0", new int[]{0, 20}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F39, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F39"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F39, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F39"), "!=", 0));
		featureAttrAtribute1.put("root1_F40", VariableFactory.enumerated("root1_F40Atribute1", new int[]{0, 66}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F40, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F40"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F40, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F40"), "!=", 0));
		featureAttrAtribute0.put("root1_F40", VariableFactory.enumerated("root1_F40Atribute0", new int[]{0, 86}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F40, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F40"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F40, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F40"), "!=", 0));
		featureAttrAtribute1.put("root1_F41", VariableFactory.enumerated("root1_F41Atribute1", new int[]{0, 32}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F41, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F41"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F41, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F41"), "!=", 0));
		featureAttrAtribute0.put("root1_F41", VariableFactory.enumerated("root1_F41Atribute0", new int[]{0, 7}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F41, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F41"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F41, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F41"), "!=", 0));
		featureAttrAtribute1.put("root1_F30", VariableFactory.enumerated("root1_F30Atribute1", new int[]{0, 30}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F30, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F30"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F30, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F30"), "!=", 0));
		featureAttrAtribute0.put("root1_F30", VariableFactory.enumerated("root1_F30Atribute0", new int[]{0, 69}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F30, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F30"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F30, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F30"), "!=", 0));
		featureAttrAtribute1.put("root1_F72", VariableFactory.enumerated("root1_F72Atribute1", new int[]{0, 46}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F72, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F72"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F72, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F72"), "!=", 0));
		featureAttrAtribute0.put("root1_F72", VariableFactory.enumerated("root1_F72Atribute0", new int[]{0, 83}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F72, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F72"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F72, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F72"), "!=", 0));
		featureAttrAtribute1.put("root1_F73", VariableFactory.enumerated("root1_F73Atribute1", new int[]{0, 66}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F73, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F73"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F73, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F73"), "!=", 0));
		featureAttrAtribute0.put("root1_F73", VariableFactory.enumerated("root1_F73Atribute0", new int[]{0, 95}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F73, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F73"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F73, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F73"), "!=", 0));
		featureAttrAtribute1.put("root1_F74", VariableFactory.enumerated("root1_F74Atribute1", new int[]{0, 52}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F74, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F74"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F74, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F74"), "!=", 0));
		featureAttrAtribute0.put("root1_F74", VariableFactory.enumerated("root1_F74Atribute0", new int[]{0, 39}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F74, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F74"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F74, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F74"), "!=", 0));
		featureAttrAtribute1.put("root1_F75", VariableFactory.enumerated("root1_F75Atribute1", new int[]{0, 15}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F75, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F75"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F75, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F75"), "!=", 0));
		featureAttrAtribute0.put("root1_F75", VariableFactory.enumerated("root1_F75Atribute0", new int[]{0, 92}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F75, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F75"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F75, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F75"), "!=", 0));
		featureAttrAtribute1.put("root1_F76", VariableFactory.enumerated("root1_F76Atribute1", new int[]{0, 46}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F76, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F76"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F76, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F76"), "!=", 0));
		featureAttrAtribute0.put("root1_F76", VariableFactory.enumerated("root1_F76Atribute0", new int[]{0, 90}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F76, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F76"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F76, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F76"), "!=", 0));
		featureAttrAtribute1.put("root1_F77", VariableFactory.enumerated("root1_F77Atribute1", new int[]{0, 67}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F77, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F77"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F77, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F77"), "!=", 0));
		featureAttrAtribute0.put("root1_F77", VariableFactory.enumerated("root1_F77Atribute0", new int[]{0, 75}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F77, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F77"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F77, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F77"), "!=", 0));
		featureAttrAtribute1.put("root1_F42", VariableFactory.enumerated("root1_F42Atribute1", new int[]{0, 26}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F42, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F42"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F42, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F42"), "!=", 0));
		featureAttrAtribute0.put("root1_F42", VariableFactory.enumerated("root1_F42Atribute0", new int[]{0, 79}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F42, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F42"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F42, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F42"), "!=", 0));
		featureAttrAtribute1.put("root1_F33", VariableFactory.enumerated("root1_F33Atribute1", new int[]{0, 44}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F33, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F33"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F33, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F33"), "!=", 0));
		featureAttrAtribute0.put("root1_F33", VariableFactory.enumerated("root1_F33Atribute0", new int[]{0, 12}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F33, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F33"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F33, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F33"), "!=", 0));
		featureAttrAtribute1.put("root1_F13", VariableFactory.enumerated("root1_F13Atribute1", new int[]{0, 91}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F13, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F13"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F13, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F13"), "!=", 0));
		featureAttrAtribute0.put("root1_F13", VariableFactory.enumerated("root1_F13Atribute0", new int[]{0, 95}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F13, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F13"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F13, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F13"), "!=", 0));
		featureAttrAtribute1.put("root1_F14", VariableFactory.enumerated("root1_F14Atribute1", new int[]{0, 73}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F14, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F14"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F14, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F14"), "!=", 0));
		featureAttrAtribute0.put("root1_F14", VariableFactory.enumerated("root1_F14Atribute0", new int[]{0, 95}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F14, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F14"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F14, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F14"), "!=", 0));
		featureAttrAtribute1.put("root1_F15", VariableFactory.enumerated("root1_F15Atribute1", new int[]{0, 18}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F15, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F15"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F15, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F15"), "!=", 0));
		featureAttrAtribute0.put("root1_F15", VariableFactory.enumerated("root1_F15Atribute0", new int[]{0, 2}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F15, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F15"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F15, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F15"), "!=", 0));
		featureAttrAtribute1.put("root1_F34", VariableFactory.enumerated("root1_F34Atribute1", new int[]{0, 16}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F34, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F34"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F34, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F34"), "!=", 0));
		featureAttrAtribute0.put("root1_F34", VariableFactory.enumerated("root1_F34Atribute0", new int[]{0, 97}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F34, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F34"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F34, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F34"), "!=", 0));
		featureAttrAtribute1.put("root1_F17", VariableFactory.enumerated("root1_F17Atribute1", new int[]{0, 36}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F17, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F17"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F17, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F17"), "!=", 0));
		featureAttrAtribute0.put("root1_F17", VariableFactory.enumerated("root1_F17Atribute0", new int[]{0, 50}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F17, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F17"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F17, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F17"), "!=", 0));
		featureAttrAtribute1.put("root1_F18", VariableFactory.enumerated("root1_F18Atribute1", new int[]{0, 77}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F18, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F18"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F18, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F18"), "!=", 0));
		featureAttrAtribute0.put("root1_F18", VariableFactory.enumerated("root1_F18Atribute0", new int[]{0, 99}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F18, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F18"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F18, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F18"), "!=", 0));
		featureAttrAtribute1.put("root1_F7", VariableFactory.enumerated("root1_F7Atribute1", new int[]{0, 25}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F7, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F7"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F7, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F7"), "!=", 0));
		featureAttrAtribute0.put("root1_F7", VariableFactory.enumerated("root1_F7Atribute0", new int[]{0, 18}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F7, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F7"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F7, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F7"), "!=", 0));
		featureAttrAtribute1.put("root1_F8", VariableFactory.enumerated("root1_F8Atribute1", new int[]{0, 6}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F8, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F8"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F8, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F8"), "!=", 0));
		featureAttrAtribute0.put("root1_F8", VariableFactory.enumerated("root1_F8Atribute0", new int[]{0, 78}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F8, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F8"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F8, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F8"), "!=", 0));
		featureAttrAtribute1.put("root1_F79", VariableFactory.enumerated("root1_F79Atribute1", new int[]{0, 47}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F79, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F79"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F79, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F79"), "!=", 0));
		featureAttrAtribute0.put("root1_F79", VariableFactory.enumerated("root1_F79Atribute0", new int[]{0, 3}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F79, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F79"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F79, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F79"), "!=", 0));
		featureAttrAtribute1.put("root1_F10", VariableFactory.enumerated("root1_F10Atribute1", new int[]{0, 23}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F10, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F10"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F10, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F10"), "!=", 0));
		featureAttrAtribute0.put("root1_F10", VariableFactory.enumerated("root1_F10Atribute0", new int[]{0, 49}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F10, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F10"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F10, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F10"), "!=", 0));
		featureAttrAtribute1.put("root1_F11", VariableFactory.enumerated("root1_F11Atribute1", new int[]{0, 63}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F11, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F11"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F11, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F11"), "!=", 0));
		featureAttrAtribute0.put("root1_F11", VariableFactory.enumerated("root1_F11Atribute0", new int[]{0, 96}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F11, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F11"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F11, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F11"), "!=", 0));
		
		//--------------------------------------------
		//Tree Constraints
		//--------------------------------------------
		Constraint mandatoryroot1_root_root1_F1 = IntConstraintFactory.arithm(root1_root, "=", root1_F1);
		mandatoryroot1_root_root1_F1.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_root_root1_F1);
		Constraint mandatoryroot1_F1_root1_F2 = IntConstraintFactory.arithm(root1_F1, "=", root1_F2);
		mandatoryroot1_F1_root1_F2.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F1_root1_F2);
		Constraint mandatoryroot1_F2_root1_F3 = IntConstraintFactory.arithm(root1_F2, "=", root1_F3);
		mandatoryroot1_F2_root1_F3.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F2_root1_F3);
		Constraint mandatoryroot1_F2_root1_F4 = IntConstraintFactory.arithm(root1_F2, "=", root1_F4);
		mandatoryroot1_F2_root1_F4.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F2_root1_F4);
		Constraint mandatoryroot1_F4_root1_F43 = IntConstraintFactory.arithm(root1_F4, "=", root1_F43);
		mandatoryroot1_F4_root1_F43.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F4_root1_F43);
		IntVar sumOrroot1_F4_1 = VariableFactory.enumerated("sumOrroot1_F4", 0, 2, solver); 
		BoolVar[] varsOrroot1_F4_1 = new BoolVar[2];
		varsOrroot1_F4_1[0] = root1_F44;
		varsOrroot1_F4_1[1] = root1_F45;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F4_1, sumOrroot1_F4_1));
		Constraint or1root1_F4_1 = IntConstraintFactory.arithm(sumOrroot1_F4_1, ">=", 1);
		or1root1_F4_1.setName(Utilities.OR_TC);
		
		Constraint or0root1_F4_1 = IntConstraintFactory.arithm(sumOrroot1_F4_1, "=", 0);
		or0root1_F4_1.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F4, or1root1_F4_1, or0root1_F4_1);
			
		Constraint mandatoryroot1_F2_root1_F5 = IntConstraintFactory.arithm(root1_F2, "=", root1_F5);
		mandatoryroot1_F2_root1_F5.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F2_root1_F5);
		Constraint optionalroot1_F2_root1_F6 = IntConstraintFactory.arithm(root1_F6, "<=", root1_F2);
		optionalroot1_F2_root1_F6.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F2_root1_F6);
		Constraint mandatoryroot1_F6_root1_F12 = IntConstraintFactory.arithm(root1_F6, "=", root1_F12);
		mandatoryroot1_F6_root1_F12.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F6_root1_F12);
		Constraint optionalroot1_F12_root1_F19 = IntConstraintFactory.arithm(root1_F19, "<=", root1_F12);
		optionalroot1_F12_root1_F19.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F12_root1_F19);
		Constraint optionalroot1_F12_root1_F20 = IntConstraintFactory.arithm(root1_F20, "<=", root1_F12);
		optionalroot1_F12_root1_F20.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F12_root1_F20);
		Constraint optionalroot1_F20_root1_F49 = IntConstraintFactory.arithm(root1_F49, "<=", root1_F20);
		optionalroot1_F20_root1_F49.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F20_root1_F49);
		Constraint mandatoryroot1_F20_root1_F50 = IntConstraintFactory.arithm(root1_F20, "=", root1_F50);
		mandatoryroot1_F20_root1_F50.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F20_root1_F50);
		Constraint optionalroot1_F20_root1_F51 = IntConstraintFactory.arithm(root1_F51, "<=", root1_F20);
		optionalroot1_F20_root1_F51.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F20_root1_F51);
		Constraint mandatoryroot1_F20_root1_F52 = IntConstraintFactory.arithm(root1_F20, "=", root1_F52);
		mandatoryroot1_F20_root1_F52.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F20_root1_F52);
		IntVar sumOrroot1_F20_4 = VariableFactory.enumerated("sumOrroot1_F20", 0, 2, solver); 
		BoolVar[] varsOrroot1_F20_4 = new BoolVar[2];
		varsOrroot1_F20_4[0] = root1_F53;
		varsOrroot1_F20_4[1] = root1_F54;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F20_4, sumOrroot1_F20_4));
		Constraint or1root1_F20_4 = IntConstraintFactory.arithm(sumOrroot1_F20_4, ">=", 1);
		or1root1_F20_4.setName(Utilities.OR_TC);
		
		Constraint or0root1_F20_4 = IntConstraintFactory.arithm(sumOrroot1_F20_4, "=", 0);
		or0root1_F20_4.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F20, or1root1_F20_4, or0root1_F20_4);
			
		Constraint optionalroot1_F12_root1_F21 = IntConstraintFactory.arithm(root1_F21, "<=", root1_F12);
		optionalroot1_F12_root1_F21.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F12_root1_F21);
		IntVar sumOrroot1_F12_3 = VariableFactory.enumerated("sumOrroot1_F12", 0, 2, solver); 
		BoolVar[] varsOrroot1_F12_3 = new BoolVar[2];
		varsOrroot1_F12_3[0] = root1_F22;
		varsOrroot1_F12_3[1] = root1_F23;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F12_3, sumOrroot1_F12_3));
		Constraint or1root1_F12_3 = IntConstraintFactory.arithm(sumOrroot1_F12_3, ">=", 1);
		or1root1_F12_3.setName(Utilities.OR_TC);
		
		Constraint or0root1_F12_3 = IntConstraintFactory.arithm(sumOrroot1_F12_3, "=", 0);
		or0root1_F12_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F12, or1root1_F12_3, or0root1_F12_3);
			
		Constraint mandatoryroot1_F23_root1_F55 = IntConstraintFactory.arithm(root1_F23, "=", root1_F55);
		mandatoryroot1_F23_root1_F55.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F23_root1_F55);
		Constraint optionalroot1_F55_root1_F67 = IntConstraintFactory.arithm(root1_F67, "<=", root1_F55);
		optionalroot1_F55_root1_F67.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F55_root1_F67);
		Constraint mandatoryroot1_F23_root1_F56 = IntConstraintFactory.arithm(root1_F23, "=", root1_F56);
		mandatoryroot1_F23_root1_F56.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F23_root1_F56);
		Constraint optionalroot1_F23_root1_F57 = IntConstraintFactory.arithm(root1_F57, "<=", root1_F23);
		optionalroot1_F23_root1_F57.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F23_root1_F57);
		Constraint optionalroot1_F23_root1_F58 = IntConstraintFactory.arithm(root1_F58, "<=", root1_F23);
		optionalroot1_F23_root1_F58.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F23_root1_F58);
		IntVar sumOrroot1_F23_4 = VariableFactory.enumerated("sumOrroot1_F23", 0, 2, solver); 
		BoolVar[] varsOrroot1_F23_4 = new BoolVar[2];
		varsOrroot1_F23_4[0] = root1_F59;
		varsOrroot1_F23_4[1] = root1_F60;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F23_4, sumOrroot1_F23_4));
		Constraint or1root1_F23_4 = IntConstraintFactory.arithm(sumOrroot1_F23_4, ">=", 1);
		or1root1_F23_4.setName(Utilities.OR_TC);
		
		Constraint or0root1_F23_4 = IntConstraintFactory.arithm(sumOrroot1_F23_4, "=", 0);
		or0root1_F23_4.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F23, or1root1_F23_4, or0root1_F23_4);
			
		IntVar sumOrroot1_F23_5 = VariableFactory.enumerated("sumOrroot1_F23", 0, 3, solver); 
		BoolVar[] varsOrroot1_F23_5 = new BoolVar[3];
		varsOrroot1_F23_5[0] = root1_F61;
		varsOrroot1_F23_5[1] = root1_F62;
		varsOrroot1_F23_5[2] = root1_F63;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F23_5, sumOrroot1_F23_5));
		Constraint or1root1_F23_5 = IntConstraintFactory.arithm(sumOrroot1_F23_5, ">=", 1);
		or1root1_F23_5.setName(Utilities.OR_TC);
		
		Constraint or0root1_F23_5 = IntConstraintFactory.arithm(sumOrroot1_F23_5, "=", 0);
		or0root1_F23_5.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F23, or1root1_F23_5, or0root1_F23_5);
			
		Constraint optionalroot1_F63_root1_F78 = IntConstraintFactory.arithm(root1_F78, "<=", root1_F63);
		optionalroot1_F63_root1_F78.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F63_root1_F78);
		Constraint mandatoryroot1_F12_root1_F24 = IntConstraintFactory.arithm(root1_F12, "=", root1_F24);
		mandatoryroot1_F12_root1_F24.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F12_root1_F24);
		Constraint mandatoryroot1_F12_root1_F25 = IntConstraintFactory.arithm(root1_F12, "=", root1_F25);
		mandatoryroot1_F12_root1_F25.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F12_root1_F25);
		Constraint mandatoryroot1_F25_root1_F26 = IntConstraintFactory.arithm(root1_F25, "=", root1_F26);
		mandatoryroot1_F25_root1_F26.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F25_root1_F26);
		Constraint optionalroot1_F25_root1_F27 = IntConstraintFactory.arithm(root1_F27, "<=", root1_F25);
		optionalroot1_F25_root1_F27.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F25_root1_F27);
		IntVar sumOrroot1_F25_2 = VariableFactory.enumerated("sumOrroot1_F25", 0, 2, solver); 
		BoolVar[] varsOrroot1_F25_2 = new BoolVar[2];
		varsOrroot1_F25_2[0] = root1_F28;
		varsOrroot1_F25_2[1] = root1_F29;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F25_2, sumOrroot1_F25_2));
		Constraint or1root1_F25_2 = IntConstraintFactory.arithm(sumOrroot1_F25_2, ">=", 1);
		or1root1_F25_2.setName(Utilities.OR_TC);
		
		Constraint or0root1_F25_2 = IntConstraintFactory.arithm(sumOrroot1_F25_2, "=", 0);
		or0root1_F25_2.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F25, or1root1_F25_2, or0root1_F25_2);
			
		Constraint optionalroot1_F28_root1_F68 = IntConstraintFactory.arithm(root1_F68, "<=", root1_F28);
		optionalroot1_F28_root1_F68.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F28_root1_F68);
		Constraint optionalroot1_F28_root1_F69 = IntConstraintFactory.arithm(root1_F69, "<=", root1_F28);
		optionalroot1_F28_root1_F69.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F28_root1_F69);
		Constraint optionalroot1_F29_root1_F35 = IntConstraintFactory.arithm(root1_F35, "<=", root1_F29);
		optionalroot1_F29_root1_F35.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F29_root1_F35);
		Constraint mandatoryroot1_F29_root1_F36 = IntConstraintFactory.arithm(root1_F29, "=", root1_F36);
		mandatoryroot1_F29_root1_F36.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F29_root1_F36);
		Constraint mandatoryroot1_F29_root1_F37 = IntConstraintFactory.arithm(root1_F29, "=", root1_F37);
		mandatoryroot1_F29_root1_F37.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F29_root1_F37);
		Constraint optionalroot1_F37_root1_F46 = IntConstraintFactory.arithm(root1_F46, "<=", root1_F37);
		optionalroot1_F37_root1_F46.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F37_root1_F46);
		Constraint mandatoryroot1_F46_root1_F70 = IntConstraintFactory.arithm(root1_F46, "=", root1_F70);
		mandatoryroot1_F46_root1_F70.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F46_root1_F70);
		Constraint optionalroot1_F70_root1_F71 = IntConstraintFactory.arithm(root1_F71, "<=", root1_F70);
		optionalroot1_F70_root1_F71.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F70_root1_F71);
		IntVar sumOrroot1_F37_1 = VariableFactory.enumerated("sumOrroot1_F37", 0, 2, solver); 
		BoolVar[] varsOrroot1_F37_1 = new BoolVar[2];
		varsOrroot1_F37_1[0] = root1_F47;
		varsOrroot1_F37_1[1] = root1_F48;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F37_1, sumOrroot1_F37_1));
		Constraint or1root1_F37_1 = IntConstraintFactory.arithm(sumOrroot1_F37_1, ">=", 1);
		or1root1_F37_1.setName(Utilities.OR_TC);
		
		Constraint or0root1_F37_1 = IntConstraintFactory.arithm(sumOrroot1_F37_1, "=", 0);
		or0root1_F37_1.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F37, or1root1_F37_1, or0root1_F37_1);
			
		Constraint mandatoryroot1_F47_root1_F64 = IntConstraintFactory.arithm(root1_F47, "=", root1_F64);
		mandatoryroot1_F47_root1_F64.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F47_root1_F64);
		Constraint mandatoryroot1_F47_root1_F65 = IntConstraintFactory.arithm(root1_F47, "=", root1_F65);
		mandatoryroot1_F47_root1_F65.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F47_root1_F65);
		Constraint mandatoryroot1_F47_root1_F66 = IntConstraintFactory.arithm(root1_F47, "=", root1_F66);
		mandatoryroot1_F47_root1_F66.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F47_root1_F66);
		IntVar sumOrroot1_F29_3 = VariableFactory.enumerated("sumOrroot1_F29", 0, 2, solver); 
		BoolVar[] varsOrroot1_F29_3 = new BoolVar[2];
		varsOrroot1_F29_3[0] = root1_F38;
		varsOrroot1_F29_3[1] = root1_F39;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F29_3, sumOrroot1_F29_3));
		Constraint or1root1_F29_3 = IntConstraintFactory.arithm(sumOrroot1_F29_3, ">=", 1);
		or1root1_F29_3.setName(Utilities.OR_TC);
		
		Constraint or0root1_F29_3 = IntConstraintFactory.arithm(sumOrroot1_F29_3, "=", 0);
		or0root1_F29_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F29, or1root1_F29_3, or0root1_F29_3);
			
		Constraint mandatoryroot1_F29_root1_F40 = IntConstraintFactory.arithm(root1_F29, "=", root1_F40);
		mandatoryroot1_F29_root1_F40.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F29_root1_F40);
		Constraint mandatoryroot1_F29_root1_F41 = IntConstraintFactory.arithm(root1_F29, "=", root1_F41);
		mandatoryroot1_F29_root1_F41.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F29_root1_F41);
		Constraint mandatoryroot1_F25_root1_F30 = IntConstraintFactory.arithm(root1_F25, "=", root1_F30);
		mandatoryroot1_F25_root1_F30.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F25_root1_F30);
		Constraint mandatoryroot1_F25_root1_F31 = IntConstraintFactory.arithm(root1_F25, "=", root1_F31);
		mandatoryroot1_F25_root1_F31.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F25_root1_F31);
		Constraint optionalroot1_F31_root1_F72 = IntConstraintFactory.arithm(root1_F72, "<=", root1_F31);
		optionalroot1_F31_root1_F72.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F31_root1_F72);
		Constraint optionalroot1_F31_root1_F73 = IntConstraintFactory.arithm(root1_F73, "<=", root1_F31);
		optionalroot1_F31_root1_F73.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F31_root1_F73);
		Constraint mandatoryroot1_F31_root1_F74 = IntConstraintFactory.arithm(root1_F31, "=", root1_F74);
		mandatoryroot1_F31_root1_F74.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F31_root1_F74);
		Constraint optionalroot1_F31_root1_F75 = IntConstraintFactory.arithm(root1_F75, "<=", root1_F31);
		optionalroot1_F31_root1_F75.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F31_root1_F75);
		Constraint mandatoryroot1_F31_root1_F76 = IntConstraintFactory.arithm(root1_F31, "=", root1_F76);
		mandatoryroot1_F31_root1_F76.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F31_root1_F76);
		Constraint optionalroot1_F31_root1_F77 = IntConstraintFactory.arithm(root1_F77, "<=", root1_F31);
		optionalroot1_F31_root1_F77.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F31_root1_F77);
		Constraint mandatoryroot1_F25_root1_F32 = IntConstraintFactory.arithm(root1_F25, "=", root1_F32);
		mandatoryroot1_F25_root1_F32.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F25_root1_F32);
		Constraint mandatoryroot1_F32_root1_F42 = IntConstraintFactory.arithm(root1_F32, "=", root1_F42);
		mandatoryroot1_F32_root1_F42.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F32_root1_F42);
		Constraint mandatoryroot1_F25_root1_F33 = IntConstraintFactory.arithm(root1_F25, "=", root1_F33);
		mandatoryroot1_F25_root1_F33.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F25_root1_F33);
		Constraint mandatoryroot1_F6_root1_F13 = IntConstraintFactory.arithm(root1_F6, "=", root1_F13);
		mandatoryroot1_F6_root1_F13.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F6_root1_F13);
		Constraint mandatoryroot1_F6_root1_F14 = IntConstraintFactory.arithm(root1_F6, "=", root1_F14);
		mandatoryroot1_F6_root1_F14.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F6_root1_F14);
		Constraint mandatoryroot1_F6_root1_F15 = IntConstraintFactory.arithm(root1_F6, "=", root1_F15);
		mandatoryroot1_F6_root1_F15.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F6_root1_F15);
		Constraint mandatoryroot1_F6_root1_F16 = IntConstraintFactory.arithm(root1_F6, "=", root1_F16);
		mandatoryroot1_F6_root1_F16.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F6_root1_F16);
		Constraint optionalroot1_F16_root1_F34 = IntConstraintFactory.arithm(root1_F34, "<=", root1_F16);
		optionalroot1_F16_root1_F34.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F16_root1_F34);
		Constraint mandatoryroot1_F6_root1_F17 = IntConstraintFactory.arithm(root1_F6, "=", root1_F17);
		mandatoryroot1_F6_root1_F17.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F6_root1_F17);
		Constraint mandatoryroot1_F6_root1_F18 = IntConstraintFactory.arithm(root1_F6, "=", root1_F18);
		mandatoryroot1_F6_root1_F18.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F6_root1_F18);
		Constraint optionalroot1_F2_root1_F7 = IntConstraintFactory.arithm(root1_F7, "<=", root1_F2);
		optionalroot1_F2_root1_F7.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F2_root1_F7);
		Constraint mandatoryroot1_F2_root1_F8 = IntConstraintFactory.arithm(root1_F2, "=", root1_F8);
		mandatoryroot1_F2_root1_F8.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F2_root1_F8);
		IntVar sumOrroot1_F2_6 = VariableFactory.enumerated("sumOrroot1_F2", 0, 3, solver); 
		BoolVar[] varsOrroot1_F2_6 = new BoolVar[3];
		varsOrroot1_F2_6[0] = root1_F9;
		varsOrroot1_F2_6[1] = root1_F10;
		varsOrroot1_F2_6[2] = root1_F11;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F2_6, sumOrroot1_F2_6));
		Constraint or1root1_F2_6 = IntConstraintFactory.arithm(sumOrroot1_F2_6, ">=", 1);
		or1root1_F2_6.setName(Utilities.OR_TC);
		
		Constraint or0root1_F2_6 = IntConstraintFactory.arithm(sumOrroot1_F2_6, "=", 0);
		or0root1_F2_6.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F2, or1root1_F2_6, or0root1_F2_6);
			
		Constraint mandatoryroot1_F9_root1_F79 = IntConstraintFactory.arithm(root1_F9, "=", root1_F79);
		mandatoryroot1_F9_root1_F79.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F9_root1_F79);
		
		//--------------------------------------------
		//Cross-Tree Constraints
		//--------------------------------------------
		Constraint excludesroot1_F66_root1_F66 = IntConstraintFactory.arithm(root1_F66, "+", root1_F43, "<=", 1);
		excludesroot1_F66_root1_F66.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot1_F66_root1_F66);
		Constraint requiresroot1_F55_root1_F28 = IntConstraintFactory.arithm(root1_F55, "<=", root1_F28);
		requiresroot1_F55_root1_F28.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot1_F55_root1_F28);
		Constraint requiresroot1_F42_root1_F30 = IntConstraintFactory.arithm(root1_F42, "<=", root1_F30);
		requiresroot1_F42_root1_F30.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot1_F42_root1_F30);
		Constraint excludesroot1_F57_root1_F57 = IntConstraintFactory.arithm(root1_F57, "+", root1_F42, "<=", 1);
		excludesroot1_F57_root1_F57.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot1_F57_root1_F57);
		Constraint excludesroot1_F20_root1_F20 = IntConstraintFactory.arithm(root1_F20, "+", root1_F17, "<=", 1);
		excludesroot1_F20_root1_F20.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot1_F20_root1_F20);
		Constraint requiresroot1_F20_root1_F22 = IntConstraintFactory.arithm(root1_F20, "<=", root1_F22);
		requiresroot1_F20_root1_F22.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot1_F20_root1_F22);
		Constraint excludesroot1_F68_root1_F68 = IntConstraintFactory.arithm(root1_F68, "+", root1_F4, "<=", 1);
		excludesroot1_F68_root1_F68.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot1_F68_root1_F68);
		Constraint requiresroot1_F19_root1_F21 = IntConstraintFactory.arithm(root1_F19, "<=", root1_F21);
		requiresroot1_F19_root1_F21.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot1_F19_root1_F21);
		
		//--------------------------------------------
		//Cross-Model Constraints
		//--------------------------------------------
		
		//--------------------------------------------
		//Solve
		//--------------------------------------------
		long start = System.currentTimeMillis();
		System.out.println("Started at: " + start);
		
		List<IntVar> varsAtribute0List = new ArrayList<IntVar>(featureAttrAtribute0.values());
		IntVar[] varsAtribute0 = new IntVar[featureAttrAtribute0.values().size()];
			
		for(int i = 0; i < varsAtribute0List.size(); i++) {
		varsAtribute0[i] = (IntVar) varsAtribute0List.get(i);
		}
		
		List<IntVar> varsAtribute1List = new ArrayList<IntVar>(featureAttrAtribute1.values());
		IntVar[] varsAtribute1 = new IntVar[featureAttrAtribute1.values().size()];
			
		for(int i = 0; i < varsAtribute1List.size(); i++) {
		varsAtribute1[i] = VariableFactory.minus(varsAtribute1List.get(i));
		}
		
		IntVar totalAtribute0 = VariableFactory.bounded("totalAtribute0", 0, 1000000, solver);
		solver.post(IntConstraintFactory.sum(varsAtribute0, totalAtribute0));
		IntVar totalAtribute1 = VariableFactory.bounded("totalAtribute1", -1000000, 0, solver);
		solver.post(IntConstraintFactory.sum(varsAtribute1, totalAtribute1));
		
		SMF.limitSolution(solver, 1000);
		//Chatterbox.showSolutions(solver);
		solver.findParetoFront(ResolutionPolicy.MINIMIZE, totalAtribute0, totalAtribute1);
		Chatterbox.printStatistics(solver);
		
		
		long end = System.currentTimeMillis();
		System.out.println("Ended at: " + end);
		System.out.println("Total time: " + (end - start));
	}
}