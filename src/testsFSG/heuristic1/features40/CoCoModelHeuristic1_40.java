
package testsFSG.heuristic1.features40;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import org.chocosolver.solver.ResolutionPolicy;
import org.chocosolver.solver.Solver;
import org.chocosolver.solver.constraints.Constraint;
import org.chocosolver.solver.constraints.IntConstraintFactory;
import org.chocosolver.solver.constraints.LogicalConstraintFactory;
import org.chocosolver.solver.search.loop.monitors.SMF;
import org.chocosolver.solver.search.loop.monitors.SearchMonitorFactory;
import org.chocosolver.solver.search.strategy.IntStrategyFactory;
import org.chocosolver.solver.search.strategy.selectors.values.IntDomainMin;
import org.chocosolver.solver.search.strategy.strategy.IntStrategy;
import org.chocosolver.solver.trace.Chatterbox;
import org.chocosolver.solver.variables.BoolVar;
import org.chocosolver.solver.variables.IntVar;
import org.chocosolver.solver.variables.Variable;
import org.chocosolver.solver.variables.VariableFactory;

import searchStrategies.FMVarSelectorMorePercInstVars;
import searchStrategies.Utilities;

public class CoCoModelHeuristic1_40 {
	public static void main(String[] args) {
		Solver solver = new Solver();
		
		//--------------------------------------------
		//Features
		//--------------------------------------------
		int contFeatures = 200;
			
		BoolVar root1_root = (BoolVar) VariableFactory.fixed("feature_root1_root", 1, solver);
		BoolVar root1_F1 = VariableFactory.bool("feature_root1_F1", solver);
		BoolVar root1_F2 = VariableFactory.bool("feature_root1_F2", solver);
		BoolVar root1_F3 = VariableFactory.bool("feature_root1_F3", solver);
		BoolVar root1_F10 = VariableFactory.bool("feature_root1_F10", solver);
		BoolVar root1_F13 = VariableFactory.bool("feature_root1_F13", solver);
		BoolVar root1_F14 = VariableFactory.bool("feature_root1_F14", solver);
		BoolVar root1_F15 = VariableFactory.bool("feature_root1_F15", solver);
		BoolVar root1_F11 = VariableFactory.bool("feature_root1_F11", solver);
		BoolVar root1_F25 = VariableFactory.bool("feature_root1_F25", solver);
		BoolVar root1_F26 = VariableFactory.bool("feature_root1_F26", solver);
		BoolVar root1_F27 = VariableFactory.bool("feature_root1_F27", solver);
		BoolVar root1_F28 = VariableFactory.bool("feature_root1_F28", solver);
		BoolVar root1_F29 = VariableFactory.bool("feature_root1_F29", solver);
		BoolVar root1_F30 = VariableFactory.bool("feature_root1_F30", solver);
		BoolVar root1_F35 = VariableFactory.bool("feature_root1_F35", solver);
		BoolVar root1_F36 = VariableFactory.bool("feature_root1_F36", solver);
		BoolVar root1_F37 = VariableFactory.bool("feature_root1_F37", solver);
		BoolVar root1_F38 = VariableFactory.bool("feature_root1_F38", solver);
		BoolVar root1_F39 = VariableFactory.bool("feature_root1_F39", solver);
		BoolVar root1_F31 = VariableFactory.bool("feature_root1_F31", solver);
		BoolVar root1_F32 = VariableFactory.bool("feature_root1_F32", solver);
		BoolVar root1_F33 = VariableFactory.bool("feature_root1_F33", solver);
		BoolVar root1_F34 = VariableFactory.bool("feature_root1_F34", solver);
		BoolVar root1_F12 = VariableFactory.bool("feature_root1_F12", solver);
		BoolVar root1_F16 = VariableFactory.bool("feature_root1_F16", solver);
		BoolVar root1_F21 = VariableFactory.bool("feature_root1_F21", solver);
		BoolVar root1_F22 = VariableFactory.bool("feature_root1_F22", solver);
		BoolVar root1_F23 = VariableFactory.bool("feature_root1_F23", solver);
		BoolVar root1_F17 = VariableFactory.bool("feature_root1_F17", solver);
		BoolVar root1_F18 = VariableFactory.bool("feature_root1_F18", solver);
		BoolVar root1_F19 = VariableFactory.bool("feature_root1_F19", solver);
		BoolVar root1_F20 = VariableFactory.bool("feature_root1_F20", solver);
		BoolVar root1_F4 = VariableFactory.bool("feature_root1_F4", solver);
		BoolVar root1_F5 = VariableFactory.bool("feature_root1_F5", solver);
		BoolVar root1_F24 = VariableFactory.bool("feature_root1_F24", solver);
		BoolVar root1_F6 = VariableFactory.bool("feature_root1_F6", solver);
		BoolVar root1_F7 = VariableFactory.bool("feature_root1_F7", solver);
		BoolVar root1_F8 = VariableFactory.bool("feature_root1_F8", solver);
		BoolVar root1_F9 = VariableFactory.bool("feature_root1_F9", solver);
		BoolVar root2_root = (BoolVar) VariableFactory.fixed("feature_root2_root", 1, solver);
		BoolVar root2_F1 = VariableFactory.bool("feature_root2_F1", solver);
		BoolVar root2_F3 = VariableFactory.bool("feature_root2_F3", solver);
		BoolVar root2_F4 = VariableFactory.bool("feature_root2_F4", solver);
		BoolVar root2_F14 = VariableFactory.bool("feature_root2_F14", solver);
		BoolVar root2_F15 = VariableFactory.bool("feature_root2_F15", solver);
		BoolVar root2_F19 = VariableFactory.bool("feature_root2_F19", solver);
		BoolVar root2_F16 = VariableFactory.bool("feature_root2_F16", solver);
		BoolVar root2_F17 = VariableFactory.bool("feature_root2_F17", solver);
		BoolVar root2_F18 = VariableFactory.bool("feature_root2_F18", solver);
		BoolVar root2_F5 = VariableFactory.bool("feature_root2_F5", solver);
		BoolVar root2_F12 = VariableFactory.bool("feature_root2_F12", solver);
		BoolVar root2_F13 = VariableFactory.bool("feature_root2_F13", solver);
		BoolVar root2_F6 = VariableFactory.bool("feature_root2_F6", solver);
		BoolVar root2_F7 = VariableFactory.bool("feature_root2_F7", solver);
		BoolVar root2_F8 = VariableFactory.bool("feature_root2_F8", solver);
		BoolVar root2_F9 = VariableFactory.bool("feature_root2_F9", solver);
		BoolVar root2_F20 = VariableFactory.bool("feature_root2_F20", solver);
		BoolVar root2_F21 = VariableFactory.bool("feature_root2_F21", solver);
		BoolVar root2_F22 = VariableFactory.bool("feature_root2_F22", solver);
		BoolVar root2_F23 = VariableFactory.bool("feature_root2_F23", solver);
		BoolVar root2_F24 = VariableFactory.bool("feature_root2_F24", solver);
		BoolVar root2_F25 = VariableFactory.bool("feature_root2_F25", solver);
		BoolVar root2_F26 = VariableFactory.bool("feature_root2_F26", solver);
		BoolVar root2_F27 = VariableFactory.bool("feature_root2_F27", solver);
		BoolVar root2_F30 = VariableFactory.bool("feature_root2_F30", solver);
		BoolVar root2_F31 = VariableFactory.bool("feature_root2_F31", solver);
		BoolVar root2_F32 = VariableFactory.bool("feature_root2_F32", solver);
		BoolVar root2_F33 = VariableFactory.bool("feature_root2_F33", solver);
		BoolVar root2_F34 = VariableFactory.bool("feature_root2_F34", solver);
		BoolVar root2_F35 = VariableFactory.bool("feature_root2_F35", solver);
		BoolVar root2_F36 = VariableFactory.bool("feature_root2_F36", solver);
		BoolVar root2_F37 = VariableFactory.bool("feature_root2_F37", solver);
		BoolVar root2_F38 = VariableFactory.bool("feature_root2_F38", solver);
		BoolVar root2_F39 = VariableFactory.bool("feature_root2_F39", solver);
		BoolVar root2_F28 = VariableFactory.bool("feature_root2_F28", solver);
		BoolVar root2_F29 = VariableFactory.bool("feature_root2_F29", solver);
		BoolVar root2_F10 = VariableFactory.bool("feature_root2_F10", solver);
		BoolVar root2_F11 = VariableFactory.bool("feature_root2_F11", solver);
		BoolVar root2_F2 = VariableFactory.bool("feature_root2_F2", solver);
		BoolVar root3_root = (BoolVar) VariableFactory.fixed("feature_root3_root", 1, solver);
		BoolVar root3_F1 = VariableFactory.bool("feature_root3_F1", solver);
		BoolVar root3_F32 = VariableFactory.bool("feature_root3_F32", solver);
		BoolVar root3_F33 = VariableFactory.bool("feature_root3_F33", solver);
		BoolVar root3_F34 = VariableFactory.bool("feature_root3_F34", solver);
		BoolVar root3_F35 = VariableFactory.bool("feature_root3_F35", solver);
		BoolVar root3_F36 = VariableFactory.bool("feature_root3_F36", solver);
		BoolVar root3_F37 = VariableFactory.bool("feature_root3_F37", solver);
		BoolVar root3_F38 = VariableFactory.bool("feature_root3_F38", solver);
		BoolVar root3_F39 = VariableFactory.bool("feature_root3_F39", solver);
		BoolVar root3_F2 = VariableFactory.bool("feature_root3_F2", solver);
		BoolVar root3_F3 = VariableFactory.bool("feature_root3_F3", solver);
		BoolVar root3_F4 = VariableFactory.bool("feature_root3_F4", solver);
		BoolVar root3_F11 = VariableFactory.bool("feature_root3_F11", solver);
		BoolVar root3_F12 = VariableFactory.bool("feature_root3_F12", solver);
		BoolVar root3_F13 = VariableFactory.bool("feature_root3_F13", solver);
		BoolVar root3_F14 = VariableFactory.bool("feature_root3_F14", solver);
		BoolVar root3_F15 = VariableFactory.bool("feature_root3_F15", solver);
		BoolVar root3_F16 = VariableFactory.bool("feature_root3_F16", solver);
		BoolVar root3_F17 = VariableFactory.bool("feature_root3_F17", solver);
		BoolVar root3_F5 = VariableFactory.bool("feature_root3_F5", solver);
		BoolVar root3_F6 = VariableFactory.bool("feature_root3_F6", solver);
		BoolVar root3_F7 = VariableFactory.bool("feature_root3_F7", solver);
		BoolVar root3_F8 = VariableFactory.bool("feature_root3_F8", solver);
		BoolVar root3_F9 = VariableFactory.bool("feature_root3_F9", solver);
		BoolVar root3_F10 = VariableFactory.bool("feature_root3_F10", solver);
		BoolVar root3_F18 = VariableFactory.bool("feature_root3_F18", solver);
		BoolVar root3_F19 = VariableFactory.bool("feature_root3_F19", solver);
		BoolVar root3_F20 = VariableFactory.bool("feature_root3_F20", solver);
		BoolVar root3_F27 = VariableFactory.bool("feature_root3_F27", solver);
		BoolVar root3_F28 = VariableFactory.bool("feature_root3_F28", solver);
		BoolVar root3_F29 = VariableFactory.bool("feature_root3_F29", solver);
		BoolVar root3_F30 = VariableFactory.bool("feature_root3_F30", solver);
		BoolVar root3_F31 = VariableFactory.bool("feature_root3_F31", solver);
		BoolVar root3_F21 = VariableFactory.bool("feature_root3_F21", solver);
		BoolVar root3_F22 = VariableFactory.bool("feature_root3_F22", solver);
		BoolVar root3_F23 = VariableFactory.bool("feature_root3_F23", solver);
		BoolVar root3_F24 = VariableFactory.bool("feature_root3_F24", solver);
		BoolVar root3_F25 = VariableFactory.bool("feature_root3_F25", solver);
		BoolVar root3_F26 = VariableFactory.bool("feature_root3_F26", solver);
		BoolVar root4_root = (BoolVar) VariableFactory.fixed("feature_root4_root", 1, solver);
		BoolVar root4_F1 = VariableFactory.bool("feature_root4_F1", solver);
		BoolVar root4_F3 = VariableFactory.bool("feature_root4_F3", solver);
		BoolVar root4_F4 = VariableFactory.bool("feature_root4_F4", solver);
		BoolVar root4_F5 = VariableFactory.bool("feature_root4_F5", solver);
		BoolVar root4_F6 = VariableFactory.bool("feature_root4_F6", solver);
		BoolVar root4_F7 = VariableFactory.bool("feature_root4_F7", solver);
		BoolVar root4_F8 = VariableFactory.bool("feature_root4_F8", solver);
		BoolVar root4_F9 = VariableFactory.bool("feature_root4_F9", solver);
		BoolVar root4_F10 = VariableFactory.bool("feature_root4_F10", solver);
		BoolVar root4_F11 = VariableFactory.bool("feature_root4_F11", solver);
		BoolVar root4_F2 = VariableFactory.bool("feature_root4_F2", solver);
		BoolVar root4_F12 = VariableFactory.bool("feature_root4_F12", solver);
		BoolVar root4_F13 = VariableFactory.bool("feature_root4_F13", solver);
		BoolVar root4_F27 = VariableFactory.bool("feature_root4_F27", solver);
		BoolVar root4_F14 = VariableFactory.bool("feature_root4_F14", solver);
		BoolVar root4_F15 = VariableFactory.bool("feature_root4_F15", solver);
		BoolVar root4_F16 = VariableFactory.bool("feature_root4_F16", solver);
		BoolVar root4_F31 = VariableFactory.bool("feature_root4_F31", solver);
		BoolVar root4_F32 = VariableFactory.bool("feature_root4_F32", solver);
		BoolVar root4_F33 = VariableFactory.bool("feature_root4_F33", solver);
		BoolVar root4_F34 = VariableFactory.bool("feature_root4_F34", solver);
		BoolVar root4_F35 = VariableFactory.bool("feature_root4_F35", solver);
		BoolVar root4_F36 = VariableFactory.bool("feature_root4_F36", solver);
		BoolVar root4_F37 = VariableFactory.bool("feature_root4_F37", solver);
		BoolVar root4_F39 = VariableFactory.bool("feature_root4_F39", solver);
		BoolVar root4_F17 = VariableFactory.bool("feature_root4_F17", solver);
		BoolVar root4_F18 = VariableFactory.bool("feature_root4_F18", solver);
		BoolVar root4_F28 = VariableFactory.bool("feature_root4_F28", solver);
		BoolVar root4_F19 = VariableFactory.bool("feature_root4_F19", solver);
		BoolVar root4_F20 = VariableFactory.bool("feature_root4_F20", solver);
		BoolVar root4_F21 = VariableFactory.bool("feature_root4_F21", solver);
		BoolVar root4_F38 = VariableFactory.bool("feature_root4_F38", solver);
		BoolVar root4_F22 = VariableFactory.bool("feature_root4_F22", solver);
		BoolVar root4_F23 = VariableFactory.bool("feature_root4_F23", solver);
		BoolVar root4_F24 = VariableFactory.bool("feature_root4_F24", solver);
		BoolVar root4_F25 = VariableFactory.bool("feature_root4_F25", solver);
		BoolVar root4_F26 = VariableFactory.bool("feature_root4_F26", solver);
		BoolVar root4_F29 = VariableFactory.bool("feature_root4_F29", solver);
		BoolVar root4_F30 = VariableFactory.bool("feature_root4_F30", solver);
		BoolVar root5_root = (BoolVar) VariableFactory.fixed("feature_root5_root", 1, solver);
		BoolVar root5_F1 = VariableFactory.bool("feature_root5_F1", solver);
		BoolVar root5_F2 = VariableFactory.bool("feature_root5_F2", solver);
		BoolVar root5_F3 = VariableFactory.bool("feature_root5_F3", solver);
		BoolVar root5_F4 = VariableFactory.bool("feature_root5_F4", solver);
		BoolVar root5_F32 = VariableFactory.bool("feature_root5_F32", solver);
		BoolVar root5_F33 = VariableFactory.bool("feature_root5_F33", solver);
		BoolVar root5_F34 = VariableFactory.bool("feature_root5_F34", solver);
		BoolVar root5_F5 = VariableFactory.bool("feature_root5_F5", solver);
		BoolVar root5_F6 = VariableFactory.bool("feature_root5_F6", solver);
		BoolVar root5_F7 = VariableFactory.bool("feature_root5_F7", solver);
		BoolVar root5_F8 = VariableFactory.bool("feature_root5_F8", solver);
		BoolVar root5_F9 = VariableFactory.bool("feature_root5_F9", solver);
		BoolVar root5_F35 = VariableFactory.bool("feature_root5_F35", solver);
		BoolVar root5_F36 = VariableFactory.bool("feature_root5_F36", solver);
		BoolVar root5_F37 = VariableFactory.bool("feature_root5_F37", solver);
		BoolVar root5_F10 = VariableFactory.bool("feature_root5_F10", solver);
		BoolVar root5_F11 = VariableFactory.bool("feature_root5_F11", solver);
		BoolVar root5_F12 = VariableFactory.bool("feature_root5_F12", solver);
		BoolVar root5_F26 = VariableFactory.bool("feature_root5_F26", solver);
		BoolVar root5_F13 = VariableFactory.bool("feature_root5_F13", solver);
		BoolVar root5_F24 = VariableFactory.bool("feature_root5_F24", solver);
		BoolVar root5_F25 = VariableFactory.bool("feature_root5_F25", solver);
		BoolVar root5_F14 = VariableFactory.bool("feature_root5_F14", solver);
		BoolVar root5_F15 = VariableFactory.bool("feature_root5_F15", solver);
		BoolVar root5_F16 = VariableFactory.bool("feature_root5_F16", solver);
		BoolVar root5_F17 = VariableFactory.bool("feature_root5_F17", solver);
		BoolVar root5_F18 = VariableFactory.bool("feature_root5_F18", solver);
		BoolVar root5_F19 = VariableFactory.bool("feature_root5_F19", solver);
		BoolVar root5_F20 = VariableFactory.bool("feature_root5_F20", solver);
		BoolVar root5_F21 = VariableFactory.bool("feature_root5_F21", solver);
		BoolVar root5_F27 = VariableFactory.bool("feature_root5_F27", solver);
		BoolVar root5_F28 = VariableFactory.bool("feature_root5_F28", solver);
		BoolVar root5_F29 = VariableFactory.bool("feature_root5_F29", solver);
		BoolVar root5_F30 = VariableFactory.bool("feature_root5_F30", solver);
		BoolVar root5_F31 = VariableFactory.bool("feature_root5_F31", solver);
		BoolVar root5_F39 = VariableFactory.bool("feature_root5_F39", solver);
		BoolVar root5_F22 = VariableFactory.bool("feature_root5_F22", solver);
		BoolVar root5_F38 = VariableFactory.bool("feature_root5_F38", solver);
		BoolVar root5_F23 = VariableFactory.bool("feature_root5_F23", solver);
		
		//--------------------------------------------
		//Feature Attributes
		//--------------------------------------------
		HashMap<String, IntVar> featureAttrAtribute1 = new HashMap<String, IntVar>();
		HashMap<String, IntVar> featureAttrAtribute0 = new HashMap<String, IntVar>();
		
		featureAttrAtribute1.put("root1_F1", VariableFactory.enumerated("root1_F1Atribute1", new int[]{0, 55}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F1, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F1"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F1, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F1"), "!=", 0));
		featureAttrAtribute0.put("root1_F1", VariableFactory.enumerated("root1_F1Atribute0", new int[]{0, 84}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F1, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F1"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F1, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F1"), "!=", 0));
		featureAttrAtribute1.put("root1_F2", VariableFactory.enumerated("root1_F2Atribute1", new int[]{0, 72}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F2, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F2"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F2, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F2"), "!=", 0));
		featureAttrAtribute0.put("root1_F2", VariableFactory.enumerated("root1_F2Atribute0", new int[]{0, 89}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F2, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F2"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F2, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F2"), "!=", 0));
		featureAttrAtribute1.put("root1_F13", VariableFactory.enumerated("root1_F13Atribute1", new int[]{0, 36}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F13, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F13"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F13, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F13"), "!=", 0));
		featureAttrAtribute0.put("root1_F13", VariableFactory.enumerated("root1_F13Atribute0", new int[]{0, 59}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F13, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F13"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F13, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F13"), "!=", 0));
		featureAttrAtribute1.put("root1_F14", VariableFactory.enumerated("root1_F14Atribute1", new int[]{0, 4}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F14, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F14"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F14, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F14"), "!=", 0));
		featureAttrAtribute0.put("root1_F14", VariableFactory.enumerated("root1_F14Atribute0", new int[]{0, 16}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F14, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F14"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F14, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F14"), "!=", 0));
		featureAttrAtribute1.put("root1_F15", VariableFactory.enumerated("root1_F15Atribute1", new int[]{0, 42}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F15, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F15"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F15, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F15"), "!=", 0));
		featureAttrAtribute0.put("root1_F15", VariableFactory.enumerated("root1_F15Atribute0", new int[]{0, 78}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F15, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F15"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F15, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F15"), "!=", 0));
		featureAttrAtribute1.put("root1_F25", VariableFactory.enumerated("root1_F25Atribute1", new int[]{0, 63}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F25, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F25"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F25, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F25"), "!=", 0));
		featureAttrAtribute0.put("root1_F25", VariableFactory.enumerated("root1_F25Atribute0", new int[]{0, 23}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F25, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F25"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F25, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F25"), "!=", 0));
		featureAttrAtribute1.put("root1_F26", VariableFactory.enumerated("root1_F26Atribute1", new int[]{0, 97}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F26, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F26"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F26, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F26"), "!=", 0));
		featureAttrAtribute0.put("root1_F26", VariableFactory.enumerated("root1_F26Atribute0", new int[]{0, 26}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F26, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F26"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F26, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F26"), "!=", 0));
		featureAttrAtribute1.put("root1_F27", VariableFactory.enumerated("root1_F27Atribute1", new int[]{0, 87}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F27, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F27"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F27, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F27"), "!=", 0));
		featureAttrAtribute0.put("root1_F27", VariableFactory.enumerated("root1_F27Atribute0", new int[]{0, 39}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F27, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F27"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F27, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F27"), "!=", 0));
		featureAttrAtribute1.put("root1_F28", VariableFactory.enumerated("root1_F28Atribute1", new int[]{0, 9}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F28, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F28"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F28, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F28"), "!=", 0));
		featureAttrAtribute0.put("root1_F28", VariableFactory.enumerated("root1_F28Atribute0", new int[]{0, 39}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F28, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F28"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F28, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F28"), "!=", 0));
		featureAttrAtribute1.put("root1_F29", VariableFactory.enumerated("root1_F29Atribute1", new int[]{0, 73}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F29, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F29"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F29, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F29"), "!=", 0));
		featureAttrAtribute0.put("root1_F29", VariableFactory.enumerated("root1_F29Atribute0", new int[]{0, 74}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F29, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F29"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F29, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F29"), "!=", 0));
		featureAttrAtribute1.put("root1_F35", VariableFactory.enumerated("root1_F35Atribute1", new int[]{0, 49}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F35, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F35"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F35, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F35"), "!=", 0));
		featureAttrAtribute0.put("root1_F35", VariableFactory.enumerated("root1_F35Atribute0", new int[]{0, 82}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F35, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F35"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F35, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F35"), "!=", 0));
		featureAttrAtribute1.put("root1_F36", VariableFactory.enumerated("root1_F36Atribute1", new int[]{0, 4}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F36, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F36"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F36, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F36"), "!=", 0));
		featureAttrAtribute0.put("root1_F36", VariableFactory.enumerated("root1_F36Atribute0", new int[]{0, 27}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F36, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F36"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F36, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F36"), "!=", 0));
		featureAttrAtribute1.put("root1_F37", VariableFactory.enumerated("root1_F37Atribute1", new int[]{0, 11}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F37, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F37"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F37, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F37"), "!=", 0));
		featureAttrAtribute0.put("root1_F37", VariableFactory.enumerated("root1_F37Atribute0", new int[]{0, 98}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F37, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F37"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F37, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F37"), "!=", 0));
		featureAttrAtribute1.put("root1_F38", VariableFactory.enumerated("root1_F38Atribute1", new int[]{0, 3}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F38, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F38"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F38, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F38"), "!=", 0));
		featureAttrAtribute0.put("root1_F38", VariableFactory.enumerated("root1_F38Atribute0", new int[]{0, 49}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F38, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F38"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F38, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F38"), "!=", 0));
		featureAttrAtribute1.put("root1_F39", VariableFactory.enumerated("root1_F39Atribute1", new int[]{0, 11}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F39, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F39"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F39, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F39"), "!=", 0));
		featureAttrAtribute0.put("root1_F39", VariableFactory.enumerated("root1_F39Atribute0", new int[]{0, 91}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F39, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F39"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F39, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F39"), "!=", 0));
		featureAttrAtribute1.put("root1_F32", VariableFactory.enumerated("root1_F32Atribute1", new int[]{0, 76}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F32, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F32"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F32, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F32"), "!=", 0));
		featureAttrAtribute0.put("root1_F32", VariableFactory.enumerated("root1_F32Atribute0", new int[]{0, 62}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F32, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F32"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F32, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F32"), "!=", 0));
		featureAttrAtribute1.put("root1_F33", VariableFactory.enumerated("root1_F33Atribute1", new int[]{0, 28}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F33, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F33"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F33, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F33"), "!=", 0));
		featureAttrAtribute0.put("root1_F33", VariableFactory.enumerated("root1_F33Atribute0", new int[]{0, 71}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F33, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F33"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F33, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F33"), "!=", 0));
		featureAttrAtribute1.put("root1_F34", VariableFactory.enumerated("root1_F34Atribute1", new int[]{0, 85}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F34, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F34"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F34, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F34"), "!=", 0));
		featureAttrAtribute0.put("root1_F34", VariableFactory.enumerated("root1_F34Atribute0", new int[]{0, 97}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F34, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F34"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F34, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F34"), "!=", 0));
		featureAttrAtribute1.put("root1_F21", VariableFactory.enumerated("root1_F21Atribute1", new int[]{0, 21}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F21, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F21"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F21, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F21"), "!=", 0));
		featureAttrAtribute0.put("root1_F21", VariableFactory.enumerated("root1_F21Atribute0", new int[]{0, 1}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F21, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F21"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F21, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F21"), "!=", 0));
		featureAttrAtribute1.put("root1_F22", VariableFactory.enumerated("root1_F22Atribute1", new int[]{0, 11}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F22, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F22"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F22, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F22"), "!=", 0));
		featureAttrAtribute0.put("root1_F22", VariableFactory.enumerated("root1_F22Atribute0", new int[]{0, 22}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F22, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F22"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F22, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F22"), "!=", 0));
		featureAttrAtribute1.put("root1_F23", VariableFactory.enumerated("root1_F23Atribute1", new int[]{0, 18}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F23, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F23"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F23, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F23"), "!=", 0));
		featureAttrAtribute0.put("root1_F23", VariableFactory.enumerated("root1_F23Atribute0", new int[]{0, 4}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F23, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F23"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F23, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F23"), "!=", 0));
		featureAttrAtribute1.put("root1_F17", VariableFactory.enumerated("root1_F17Atribute1", new int[]{0, 43}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F17, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F17"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F17, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F17"), "!=", 0));
		featureAttrAtribute0.put("root1_F17", VariableFactory.enumerated("root1_F17Atribute0", new int[]{0, 58}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F17, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F17"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F17, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F17"), "!=", 0));
		featureAttrAtribute1.put("root1_F18", VariableFactory.enumerated("root1_F18Atribute1", new int[]{0, 52}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F18, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F18"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F18, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F18"), "!=", 0));
		featureAttrAtribute0.put("root1_F18", VariableFactory.enumerated("root1_F18Atribute0", new int[]{0, 52}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F18, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F18"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F18, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F18"), "!=", 0));
		featureAttrAtribute1.put("root1_F19", VariableFactory.enumerated("root1_F19Atribute1", new int[]{0, 73}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F19, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F19"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F19, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F19"), "!=", 0));
		featureAttrAtribute0.put("root1_F19", VariableFactory.enumerated("root1_F19Atribute0", new int[]{0, 37}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F19, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F19"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F19, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F19"), "!=", 0));
		featureAttrAtribute1.put("root1_F20", VariableFactory.enumerated("root1_F20Atribute1", new int[]{0, 54}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F20, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F20"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F20, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F20"), "!=", 0));
		featureAttrAtribute0.put("root1_F20", VariableFactory.enumerated("root1_F20Atribute0", new int[]{0, 20}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F20, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F20"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F20, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F20"), "!=", 0));
		featureAttrAtribute1.put("root1_F4", VariableFactory.enumerated("root1_F4Atribute1", new int[]{0, 37}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F4, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F4"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F4, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F4"), "!=", 0));
		featureAttrAtribute0.put("root1_F4", VariableFactory.enumerated("root1_F4Atribute0", new int[]{0, 47}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F4, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F4"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F4, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F4"), "!=", 0));
		featureAttrAtribute1.put("root1_F24", VariableFactory.enumerated("root1_F24Atribute1", new int[]{0, 71}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F24, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F24"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F24, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F24"), "!=", 0));
		featureAttrAtribute0.put("root1_F24", VariableFactory.enumerated("root1_F24Atribute0", new int[]{0, 56}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F24, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F24"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F24, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F24"), "!=", 0));
		featureAttrAtribute1.put("root1_F6", VariableFactory.enumerated("root1_F6Atribute1", new int[]{0, 99}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F6, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F6"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F6, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F6"), "!=", 0));
		featureAttrAtribute0.put("root1_F6", VariableFactory.enumerated("root1_F6Atribute0", new int[]{0, 24}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F6, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F6"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F6, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F6"), "!=", 0));
		featureAttrAtribute1.put("root1_F7", VariableFactory.enumerated("root1_F7Atribute1", new int[]{0, 98}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F7, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F7"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F7, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F7"), "!=", 0));
		featureAttrAtribute0.put("root1_F7", VariableFactory.enumerated("root1_F7Atribute0", new int[]{0, 86}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F7, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F7"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F7, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F7"), "!=", 0));
		featureAttrAtribute1.put("root1_F8", VariableFactory.enumerated("root1_F8Atribute1", new int[]{0, 68}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F8, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F8"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F8, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F8"), "!=", 0));
		featureAttrAtribute0.put("root1_F8", VariableFactory.enumerated("root1_F8Atribute0", new int[]{0, 81}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F8, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F8"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F8, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F8"), "!=", 0));
		featureAttrAtribute1.put("root1_F9", VariableFactory.enumerated("root1_F9Atribute1", new int[]{0, 14}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F9, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F9"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F9, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F9"), "!=", 0));
		featureAttrAtribute0.put("root1_F9", VariableFactory.enumerated("root1_F9Atribute0", new int[]{0, 98}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F9, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F9"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F9, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F9"), "!=", 0));
		featureAttrAtribute1.put("root2_F3", VariableFactory.enumerated("root2_F3Atribute1", new int[]{0, 39}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F3, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F3"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F3, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F3"), "!=", 0));
		featureAttrAtribute0.put("root2_F3", VariableFactory.enumerated("root2_F3Atribute0", new int[]{0, 96}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F3, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F3"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F3, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F3"), "!=", 0));
		featureAttrAtribute1.put("root2_F14", VariableFactory.enumerated("root2_F14Atribute1", new int[]{0, 54}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F14, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F14"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F14, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F14"), "!=", 0));
		featureAttrAtribute0.put("root2_F14", VariableFactory.enumerated("root2_F14Atribute0", new int[]{0, 6}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F14, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F14"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F14, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F14"), "!=", 0));
		featureAttrAtribute1.put("root2_F19", VariableFactory.enumerated("root2_F19Atribute1", new int[]{0, 64}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F19, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F19"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F19, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F19"), "!=", 0));
		featureAttrAtribute0.put("root2_F19", VariableFactory.enumerated("root2_F19Atribute0", new int[]{0, 62}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F19, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F19"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F19, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F19"), "!=", 0));
		featureAttrAtribute1.put("root2_F16", VariableFactory.enumerated("root2_F16Atribute1", new int[]{0, 64}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F16, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F16"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F16, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F16"), "!=", 0));
		featureAttrAtribute0.put("root2_F16", VariableFactory.enumerated("root2_F16Atribute0", new int[]{0, 91}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F16, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F16"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F16, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F16"), "!=", 0));
		featureAttrAtribute1.put("root2_F17", VariableFactory.enumerated("root2_F17Atribute1", new int[]{0, 33}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F17, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F17"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F17, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F17"), "!=", 0));
		featureAttrAtribute0.put("root2_F17", VariableFactory.enumerated("root2_F17Atribute0", new int[]{0, 10}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F17, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F17"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F17, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F17"), "!=", 0));
		featureAttrAtribute1.put("root2_F18", VariableFactory.enumerated("root2_F18Atribute1", new int[]{0, 81}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F18, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F18"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F18, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F18"), "!=", 0));
		featureAttrAtribute0.put("root2_F18", VariableFactory.enumerated("root2_F18Atribute0", new int[]{0, 82}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F18, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F18"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F18, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F18"), "!=", 0));
		featureAttrAtribute1.put("root2_F12", VariableFactory.enumerated("root2_F12Atribute1", new int[]{0, 31}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F12, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F12"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F12, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F12"), "!=", 0));
		featureAttrAtribute0.put("root2_F12", VariableFactory.enumerated("root2_F12Atribute0", new int[]{0, 50}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F12, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F12"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F12, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F12"), "!=", 0));
		featureAttrAtribute1.put("root2_F13", VariableFactory.enumerated("root2_F13Atribute1", new int[]{0, 68}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F13, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F13"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F13, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F13"), "!=", 0));
		featureAttrAtribute0.put("root2_F13", VariableFactory.enumerated("root2_F13Atribute0", new int[]{0, 32}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F13, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F13"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F13, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F13"), "!=", 0));
		featureAttrAtribute1.put("root2_F6", VariableFactory.enumerated("root2_F6Atribute1", new int[]{0, 12}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F6, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F6"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F6, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F6"), "!=", 0));
		featureAttrAtribute0.put("root2_F6", VariableFactory.enumerated("root2_F6Atribute0", new int[]{0, 11}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F6, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F6"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F6, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F6"), "!=", 0));
		featureAttrAtribute1.put("root2_F7", VariableFactory.enumerated("root2_F7Atribute1", new int[]{0, 25}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F7, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F7"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F7, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F7"), "!=", 0));
		featureAttrAtribute0.put("root2_F7", VariableFactory.enumerated("root2_F7Atribute0", new int[]{0, 2}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F7, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F7"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F7, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F7"), "!=", 0));
		featureAttrAtribute1.put("root2_F8", VariableFactory.enumerated("root2_F8Atribute1", new int[]{0, 71}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F8, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F8"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F8, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F8"), "!=", 0));
		featureAttrAtribute0.put("root2_F8", VariableFactory.enumerated("root2_F8Atribute0", new int[]{0, 43}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F8, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F8"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F8, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F8"), "!=", 0));
		featureAttrAtribute1.put("root2_F20", VariableFactory.enumerated("root2_F20Atribute1", new int[]{0, 50}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F20, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F20"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F20, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F20"), "!=", 0));
		featureAttrAtribute0.put("root2_F20", VariableFactory.enumerated("root2_F20Atribute0", new int[]{0, 64}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F20, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F20"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F20, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F20"), "!=", 0));
		featureAttrAtribute1.put("root2_F21", VariableFactory.enumerated("root2_F21Atribute1", new int[]{0, 17}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F21, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F21"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F21, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F21"), "!=", 0));
		featureAttrAtribute0.put("root2_F21", VariableFactory.enumerated("root2_F21Atribute0", new int[]{0, 31}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F21, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F21"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F21, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F21"), "!=", 0));
		featureAttrAtribute1.put("root2_F22", VariableFactory.enumerated("root2_F22Atribute1", new int[]{0, 32}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F22, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F22"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F22, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F22"), "!=", 0));
		featureAttrAtribute0.put("root2_F22", VariableFactory.enumerated("root2_F22Atribute0", new int[]{0, 99}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F22, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F22"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F22, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F22"), "!=", 0));
		featureAttrAtribute1.put("root2_F23", VariableFactory.enumerated("root2_F23Atribute1", new int[]{0, 60}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F23, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F23"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F23, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F23"), "!=", 0));
		featureAttrAtribute0.put("root2_F23", VariableFactory.enumerated("root2_F23Atribute0", new int[]{0, 1}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F23, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F23"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F23, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F23"), "!=", 0));
		featureAttrAtribute1.put("root2_F24", VariableFactory.enumerated("root2_F24Atribute1", new int[]{0, 49}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F24, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F24"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F24, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F24"), "!=", 0));
		featureAttrAtribute0.put("root2_F24", VariableFactory.enumerated("root2_F24Atribute0", new int[]{0, 33}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F24, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F24"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F24, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F24"), "!=", 0));
		featureAttrAtribute1.put("root2_F25", VariableFactory.enumerated("root2_F25Atribute1", new int[]{0, 66}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F25, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F25"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F25, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F25"), "!=", 0));
		featureAttrAtribute0.put("root2_F25", VariableFactory.enumerated("root2_F25Atribute0", new int[]{0, 74}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F25, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F25"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F25, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F25"), "!=", 0));
		featureAttrAtribute1.put("root2_F26", VariableFactory.enumerated("root2_F26Atribute1", new int[]{0, 82}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F26, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F26"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F26, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F26"), "!=", 0));
		featureAttrAtribute0.put("root2_F26", VariableFactory.enumerated("root2_F26Atribute0", new int[]{0, 48}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F26, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F26"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F26, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F26"), "!=", 0));
		featureAttrAtribute1.put("root2_F30", VariableFactory.enumerated("root2_F30Atribute1", new int[]{0, 78}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F30, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F30"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F30, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F30"), "!=", 0));
		featureAttrAtribute0.put("root2_F30", VariableFactory.enumerated("root2_F30Atribute0", new int[]{0, 17}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F30, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F30"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F30, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F30"), "!=", 0));
		featureAttrAtribute1.put("root2_F31", VariableFactory.enumerated("root2_F31Atribute1", new int[]{0, 92}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F31, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F31"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F31, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F31"), "!=", 0));
		featureAttrAtribute0.put("root2_F31", VariableFactory.enumerated("root2_F31Atribute0", new int[]{0, 37}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F31, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F31"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F31, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F31"), "!=", 0));
		featureAttrAtribute1.put("root2_F32", VariableFactory.enumerated("root2_F32Atribute1", new int[]{0, 36}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F32, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F32"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F32, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F32"), "!=", 0));
		featureAttrAtribute0.put("root2_F32", VariableFactory.enumerated("root2_F32Atribute0", new int[]{0, 56}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F32, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F32"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F32, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F32"), "!=", 0));
		featureAttrAtribute1.put("root2_F33", VariableFactory.enumerated("root2_F33Atribute1", new int[]{0, 43}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F33, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F33"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F33, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F33"), "!=", 0));
		featureAttrAtribute0.put("root2_F33", VariableFactory.enumerated("root2_F33Atribute0", new int[]{0, 11}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F33, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F33"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F33, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F33"), "!=", 0));
		featureAttrAtribute1.put("root2_F34", VariableFactory.enumerated("root2_F34Atribute1", new int[]{0, 4}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F34, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F34"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F34, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F34"), "!=", 0));
		featureAttrAtribute0.put("root2_F34", VariableFactory.enumerated("root2_F34Atribute0", new int[]{0, 85}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F34, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F34"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F34, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F34"), "!=", 0));
		featureAttrAtribute1.put("root2_F35", VariableFactory.enumerated("root2_F35Atribute1", new int[]{0, 76}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F35, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F35"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F35, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F35"), "!=", 0));
		featureAttrAtribute0.put("root2_F35", VariableFactory.enumerated("root2_F35Atribute0", new int[]{0, 56}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F35, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F35"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F35, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F35"), "!=", 0));
		featureAttrAtribute1.put("root2_F36", VariableFactory.enumerated("root2_F36Atribute1", new int[]{0, 27}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F36, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F36"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F36, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F36"), "!=", 0));
		featureAttrAtribute0.put("root2_F36", VariableFactory.enumerated("root2_F36Atribute0", new int[]{0, 66}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F36, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F36"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F36, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F36"), "!=", 0));
		featureAttrAtribute1.put("root2_F37", VariableFactory.enumerated("root2_F37Atribute1", new int[]{0, 8}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F37, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F37"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F37, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F37"), "!=", 0));
		featureAttrAtribute0.put("root2_F37", VariableFactory.enumerated("root2_F37Atribute0", new int[]{0, 26}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F37, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F37"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F37, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F37"), "!=", 0));
		featureAttrAtribute1.put("root2_F38", VariableFactory.enumerated("root2_F38Atribute1", new int[]{0, 40}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F38, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F38"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F38, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F38"), "!=", 0));
		featureAttrAtribute0.put("root2_F38", VariableFactory.enumerated("root2_F38Atribute0", new int[]{0, 32}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F38, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F38"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F38, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F38"), "!=", 0));
		featureAttrAtribute1.put("root2_F39", VariableFactory.enumerated("root2_F39Atribute1", new int[]{0, 46}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F39, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F39"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F39, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F39"), "!=", 0));
		featureAttrAtribute0.put("root2_F39", VariableFactory.enumerated("root2_F39Atribute0", new int[]{0, 13}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F39, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F39"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F39, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F39"), "!=", 0));
		featureAttrAtribute1.put("root2_F28", VariableFactory.enumerated("root2_F28Atribute1", new int[]{0, 67}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F28, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F28"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F28, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F28"), "!=", 0));
		featureAttrAtribute0.put("root2_F28", VariableFactory.enumerated("root2_F28Atribute0", new int[]{0, 45}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F28, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F28"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F28, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F28"), "!=", 0));
		featureAttrAtribute1.put("root2_F29", VariableFactory.enumerated("root2_F29Atribute1", new int[]{0, 73}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F29, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F29"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F29, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F29"), "!=", 0));
		featureAttrAtribute0.put("root2_F29", VariableFactory.enumerated("root2_F29Atribute0", new int[]{0, 92}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F29, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F29"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F29, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F29"), "!=", 0));
		featureAttrAtribute1.put("root2_F10", VariableFactory.enumerated("root2_F10Atribute1", new int[]{0, 44}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F10, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F10"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F10, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F10"), "!=", 0));
		featureAttrAtribute0.put("root2_F10", VariableFactory.enumerated("root2_F10Atribute0", new int[]{0, 18}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F10, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F10"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F10, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F10"), "!=", 0));
		featureAttrAtribute1.put("root2_F11", VariableFactory.enumerated("root2_F11Atribute1", new int[]{0, 16}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F11, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F11"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F11, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F11"), "!=", 0));
		featureAttrAtribute0.put("root2_F11", VariableFactory.enumerated("root2_F11Atribute0", new int[]{0, 5}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F11, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F11"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F11, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F11"), "!=", 0));
		featureAttrAtribute1.put("root2_F2", VariableFactory.enumerated("root2_F2Atribute1", new int[]{0, 43}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F2, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F2"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F2, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F2"), "!=", 0));
		featureAttrAtribute0.put("root2_F2", VariableFactory.enumerated("root2_F2Atribute0", new int[]{0, 99}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F2, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F2"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F2, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F2"), "!=", 0));
		featureAttrAtribute1.put("root3_F32", VariableFactory.enumerated("root3_F32Atribute1", new int[]{0, 10}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F32, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F32"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F32, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F32"), "!=", 0));
		featureAttrAtribute0.put("root3_F32", VariableFactory.enumerated("root3_F32Atribute0", new int[]{0, 84}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F32, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F32"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F32, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F32"), "!=", 0));
		featureAttrAtribute1.put("root3_F33", VariableFactory.enumerated("root3_F33Atribute1", new int[]{0, 82}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F33, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F33"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F33, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F33"), "!=", 0));
		featureAttrAtribute0.put("root3_F33", VariableFactory.enumerated("root3_F33Atribute0", new int[]{0, 8}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F33, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F33"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F33, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F33"), "!=", 0));
		featureAttrAtribute1.put("root3_F34", VariableFactory.enumerated("root3_F34Atribute1", new int[]{0, 30}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F34, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F34"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F34, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F34"), "!=", 0));
		featureAttrAtribute0.put("root3_F34", VariableFactory.enumerated("root3_F34Atribute0", new int[]{0, 27}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F34, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F34"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F34, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F34"), "!=", 0));
		featureAttrAtribute1.put("root3_F35", VariableFactory.enumerated("root3_F35Atribute1", new int[]{0, 85}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F35, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F35"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F35, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F35"), "!=", 0));
		featureAttrAtribute0.put("root3_F35", VariableFactory.enumerated("root3_F35Atribute0", new int[]{0, 22}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F35, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F35"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F35, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F35"), "!=", 0));
		featureAttrAtribute1.put("root3_F36", VariableFactory.enumerated("root3_F36Atribute1", new int[]{0, 3}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F36, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F36"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F36, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F36"), "!=", 0));
		featureAttrAtribute0.put("root3_F36", VariableFactory.enumerated("root3_F36Atribute0", new int[]{0, 32}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F36, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F36"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F36, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F36"), "!=", 0));
		featureAttrAtribute1.put("root3_F37", VariableFactory.enumerated("root3_F37Atribute1", new int[]{0, 52}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F37, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F37"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F37, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F37"), "!=", 0));
		featureAttrAtribute0.put("root3_F37", VariableFactory.enumerated("root3_F37Atribute0", new int[]{0, 33}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F37, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F37"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F37, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F37"), "!=", 0));
		featureAttrAtribute1.put("root3_F38", VariableFactory.enumerated("root3_F38Atribute1", new int[]{0, 20}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F38, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F38"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F38, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F38"), "!=", 0));
		featureAttrAtribute0.put("root3_F38", VariableFactory.enumerated("root3_F38Atribute0", new int[]{0, 36}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F38, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F38"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F38, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F38"), "!=", 0));
		featureAttrAtribute1.put("root3_F39", VariableFactory.enumerated("root3_F39Atribute1", new int[]{0, 58}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F39, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F39"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F39, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F39"), "!=", 0));
		featureAttrAtribute0.put("root3_F39", VariableFactory.enumerated("root3_F39Atribute0", new int[]{0, 72}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F39, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F39"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F39, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F39"), "!=", 0));
		featureAttrAtribute1.put("root3_F2", VariableFactory.enumerated("root3_F2Atribute1", new int[]{0, 24}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F2, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F2"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F2, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F2"), "!=", 0));
		featureAttrAtribute0.put("root3_F2", VariableFactory.enumerated("root3_F2Atribute0", new int[]{0, 30}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F2, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F2"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F2, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F2"), "!=", 0));
		featureAttrAtribute1.put("root3_F3", VariableFactory.enumerated("root3_F3Atribute1", new int[]{0, 47}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F3, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F3"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F3, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F3"), "!=", 0));
		featureAttrAtribute0.put("root3_F3", VariableFactory.enumerated("root3_F3Atribute0", new int[]{0, 6}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F3, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F3"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F3, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F3"), "!=", 0));
		featureAttrAtribute1.put("root3_F11", VariableFactory.enumerated("root3_F11Atribute1", new int[]{0, 36}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F11, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F11"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F11, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F11"), "!=", 0));
		featureAttrAtribute0.put("root3_F11", VariableFactory.enumerated("root3_F11Atribute0", new int[]{0, 77}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F11, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F11"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F11, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F11"), "!=", 0));
		featureAttrAtribute1.put("root3_F12", VariableFactory.enumerated("root3_F12Atribute1", new int[]{0, 93}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F12, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F12"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F12, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F12"), "!=", 0));
		featureAttrAtribute0.put("root3_F12", VariableFactory.enumerated("root3_F12Atribute0", new int[]{0, 86}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F12, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F12"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F12, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F12"), "!=", 0));
		featureAttrAtribute1.put("root3_F13", VariableFactory.enumerated("root3_F13Atribute1", new int[]{0, 51}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F13, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F13"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F13, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F13"), "!=", 0));
		featureAttrAtribute0.put("root3_F13", VariableFactory.enumerated("root3_F13Atribute0", new int[]{0, 27}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F13, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F13"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F13, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F13"), "!=", 0));
		featureAttrAtribute1.put("root3_F14", VariableFactory.enumerated("root3_F14Atribute1", new int[]{0, 94}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F14, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F14"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F14, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F14"), "!=", 0));
		featureAttrAtribute0.put("root3_F14", VariableFactory.enumerated("root3_F14Atribute0", new int[]{0, 63}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F14, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F14"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F14, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F14"), "!=", 0));
		featureAttrAtribute1.put("root3_F15", VariableFactory.enumerated("root3_F15Atribute1", new int[]{0, 59}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F15, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F15"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F15, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F15"), "!=", 0));
		featureAttrAtribute0.put("root3_F15", VariableFactory.enumerated("root3_F15Atribute0", new int[]{0, 4}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F15, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F15"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F15, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F15"), "!=", 0));
		featureAttrAtribute1.put("root3_F16", VariableFactory.enumerated("root3_F16Atribute1", new int[]{0, 18}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F16, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F16"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F16, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F16"), "!=", 0));
		featureAttrAtribute0.put("root3_F16", VariableFactory.enumerated("root3_F16Atribute0", new int[]{0, 77}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F16, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F16"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F16, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F16"), "!=", 0));
		featureAttrAtribute1.put("root3_F17", VariableFactory.enumerated("root3_F17Atribute1", new int[]{0, 55}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F17, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F17"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F17, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F17"), "!=", 0));
		featureAttrAtribute0.put("root3_F17", VariableFactory.enumerated("root3_F17Atribute0", new int[]{0, 85}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F17, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F17"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F17, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F17"), "!=", 0));
		featureAttrAtribute1.put("root3_F5", VariableFactory.enumerated("root3_F5Atribute1", new int[]{0, 6}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F5, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F5"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F5, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F5"), "!=", 0));
		featureAttrAtribute0.put("root3_F5", VariableFactory.enumerated("root3_F5Atribute0", new int[]{0, 57}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F5, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F5"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F5, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F5"), "!=", 0));
		featureAttrAtribute1.put("root3_F6", VariableFactory.enumerated("root3_F6Atribute1", new int[]{0, 67}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F6, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F6"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F6, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F6"), "!=", 0));
		featureAttrAtribute0.put("root3_F6", VariableFactory.enumerated("root3_F6Atribute0", new int[]{0, 51}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F6, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F6"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F6, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F6"), "!=", 0));
		featureAttrAtribute1.put("root3_F7", VariableFactory.enumerated("root3_F7Atribute1", new int[]{0, 5}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F7, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F7"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F7, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F7"), "!=", 0));
		featureAttrAtribute0.put("root3_F7", VariableFactory.enumerated("root3_F7Atribute0", new int[]{0, 85}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F7, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F7"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F7, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F7"), "!=", 0));
		featureAttrAtribute1.put("root3_F8", VariableFactory.enumerated("root3_F8Atribute1", new int[]{0, 69}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F8, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F8"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F8, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F8"), "!=", 0));
		featureAttrAtribute0.put("root3_F8", VariableFactory.enumerated("root3_F8Atribute0", new int[]{0, 85}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F8, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F8"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F8, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F8"), "!=", 0));
		featureAttrAtribute1.put("root3_F9", VariableFactory.enumerated("root3_F9Atribute1", new int[]{0, 94}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F9, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F9"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F9, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F9"), "!=", 0));
		featureAttrAtribute0.put("root3_F9", VariableFactory.enumerated("root3_F9Atribute0", new int[]{0, 89}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F9, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F9"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F9, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F9"), "!=", 0));
		featureAttrAtribute1.put("root3_F18", VariableFactory.enumerated("root3_F18Atribute1", new int[]{0, 79}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F18, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F18"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F18, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F18"), "!=", 0));
		featureAttrAtribute0.put("root3_F18", VariableFactory.enumerated("root3_F18Atribute0", new int[]{0, 24}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F18, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F18"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F18, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F18"), "!=", 0));
		featureAttrAtribute1.put("root3_F19", VariableFactory.enumerated("root3_F19Atribute1", new int[]{0, 54}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F19, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F19"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F19, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F19"), "!=", 0));
		featureAttrAtribute0.put("root3_F19", VariableFactory.enumerated("root3_F19Atribute0", new int[]{0, 85}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F19, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F19"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F19, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F19"), "!=", 0));
		featureAttrAtribute1.put("root3_F27", VariableFactory.enumerated("root3_F27Atribute1", new int[]{0, 4}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F27, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F27"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F27, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F27"), "!=", 0));
		featureAttrAtribute0.put("root3_F27", VariableFactory.enumerated("root3_F27Atribute0", new int[]{0, 14}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F27, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F27"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F27, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F27"), "!=", 0));
		featureAttrAtribute1.put("root3_F28", VariableFactory.enumerated("root3_F28Atribute1", new int[]{0, 7}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F28, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F28"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F28, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F28"), "!=", 0));
		featureAttrAtribute0.put("root3_F28", VariableFactory.enumerated("root3_F28Atribute0", new int[]{0, 57}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F28, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F28"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F28, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F28"), "!=", 0));
		featureAttrAtribute1.put("root3_F29", VariableFactory.enumerated("root3_F29Atribute1", new int[]{0, 50}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F29, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F29"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F29, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F29"), "!=", 0));
		featureAttrAtribute0.put("root3_F29", VariableFactory.enumerated("root3_F29Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F29, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F29"), "=", 0));
		featureAttrAtribute1.put("root3_F30", VariableFactory.enumerated("root3_F30Atribute1", new int[]{0, 61}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F30, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F30"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F30, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F30"), "!=", 0));
		featureAttrAtribute0.put("root3_F30", VariableFactory.enumerated("root3_F30Atribute0", new int[]{0, 84}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F30, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F30"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F30, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F30"), "!=", 0));
		featureAttrAtribute1.put("root3_F31", VariableFactory.enumerated("root3_F31Atribute1", new int[]{0, 53}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F31, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F31"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F31, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F31"), "!=", 0));
		featureAttrAtribute0.put("root3_F31", VariableFactory.enumerated("root3_F31Atribute0", new int[]{0, 1}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F31, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F31"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F31, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F31"), "!=", 0));
		featureAttrAtribute1.put("root3_F21", VariableFactory.enumerated("root3_F21Atribute1", new int[]{0, 72}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F21, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F21"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F21, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F21"), "!=", 0));
		featureAttrAtribute0.put("root3_F21", VariableFactory.enumerated("root3_F21Atribute0", new int[]{0, 53}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F21, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F21"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F21, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F21"), "!=", 0));
		featureAttrAtribute1.put("root3_F22", VariableFactory.enumerated("root3_F22Atribute1", new int[]{0, 64}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F22, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F22"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F22, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F22"), "!=", 0));
		featureAttrAtribute0.put("root3_F22", VariableFactory.enumerated("root3_F22Atribute0", new int[]{0, 28}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F22, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F22"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F22, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F22"), "!=", 0));
		featureAttrAtribute1.put("root3_F23", VariableFactory.enumerated("root3_F23Atribute1", new int[]{0, 45}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F23, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F23"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F23, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F23"), "!=", 0));
		featureAttrAtribute0.put("root3_F23", VariableFactory.enumerated("root3_F23Atribute0", new int[]{0, 41}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F23, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F23"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F23, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F23"), "!=", 0));
		featureAttrAtribute1.put("root3_F24", VariableFactory.enumerated("root3_F24Atribute1", new int[]{0, 69}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F24, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F24"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F24, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F24"), "!=", 0));
		featureAttrAtribute0.put("root3_F24", VariableFactory.enumerated("root3_F24Atribute0", new int[]{0, 13}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F24, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F24"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F24, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F24"), "!=", 0));
		featureAttrAtribute1.put("root3_F25", VariableFactory.enumerated("root3_F25Atribute1", new int[]{0, 98}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F25, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F25"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F25, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F25"), "!=", 0));
		featureAttrAtribute0.put("root3_F25", VariableFactory.enumerated("root3_F25Atribute0", new int[]{0, 80}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F25, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F25"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F25, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F25"), "!=", 0));
		featureAttrAtribute1.put("root3_F26", VariableFactory.enumerated("root3_F26Atribute1", new int[]{0, 7}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F26, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F26"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F26, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F26"), "!=", 0));
		featureAttrAtribute0.put("root3_F26", VariableFactory.enumerated("root3_F26Atribute0", new int[]{0, 51}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F26, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F26"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F26, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F26"), "!=", 0));
		featureAttrAtribute1.put("root4_F3", VariableFactory.enumerated("root4_F3Atribute1", new int[]{0, 6}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F3, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F3"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F3, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F3"), "!=", 0));
		featureAttrAtribute0.put("root4_F3", VariableFactory.enumerated("root4_F3Atribute0", new int[]{0, 41}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F3, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F3"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F3, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F3"), "!=", 0));
		featureAttrAtribute1.put("root4_F5", VariableFactory.enumerated("root4_F5Atribute1", new int[]{0, 87}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F5, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F5"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F5, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F5"), "!=", 0));
		featureAttrAtribute0.put("root4_F5", VariableFactory.enumerated("root4_F5Atribute0", new int[]{0, 35}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F5, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F5"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F5, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F5"), "!=", 0));
		featureAttrAtribute1.put("root4_F6", VariableFactory.enumerated("root4_F6Atribute1", new int[]{0, 10}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F6, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F6"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F6, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F6"), "!=", 0));
		featureAttrAtribute0.put("root4_F6", VariableFactory.enumerated("root4_F6Atribute0", new int[]{0, 88}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F6, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F6"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F6, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F6"), "!=", 0));
		featureAttrAtribute1.put("root4_F7", VariableFactory.enumerated("root4_F7Atribute1", new int[]{0, 22}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F7, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F7"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F7, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F7"), "!=", 0));
		featureAttrAtribute0.put("root4_F7", VariableFactory.enumerated("root4_F7Atribute0", new int[]{0, 24}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F7, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F7"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F7, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F7"), "!=", 0));
		featureAttrAtribute1.put("root4_F8", VariableFactory.enumerated("root4_F8Atribute1", new int[]{0, 6}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F8, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F8"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F8, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F8"), "!=", 0));
		featureAttrAtribute0.put("root4_F8", VariableFactory.enumerated("root4_F8Atribute0", new int[]{0, 22}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F8, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F8"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F8, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F8"), "!=", 0));
		featureAttrAtribute1.put("root4_F9", VariableFactory.enumerated("root4_F9Atribute1", new int[]{0, 62}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F9, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F9"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F9, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F9"), "!=", 0));
		featureAttrAtribute0.put("root4_F9", VariableFactory.enumerated("root4_F9Atribute0", new int[]{0, 80}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F9, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F9"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F9, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F9"), "!=", 0));
		featureAttrAtribute1.put("root4_F10", VariableFactory.enumerated("root4_F10Atribute1", new int[]{0, 21}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F10, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F10"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F10, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F10"), "!=", 0));
		featureAttrAtribute0.put("root4_F10", VariableFactory.enumerated("root4_F10Atribute0", new int[]{0, 5}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F10, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F10"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F10, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F10"), "!=", 0));
		featureAttrAtribute1.put("root4_F11", VariableFactory.enumerated("root4_F11Atribute1", new int[]{0, 27}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F11, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F11"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F11, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F11"), "!=", 0));
		featureAttrAtribute0.put("root4_F11", VariableFactory.enumerated("root4_F11Atribute0", new int[]{0, 16}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F11, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F11"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F11, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F11"), "!=", 0));
		featureAttrAtribute1.put("root4_F12", VariableFactory.enumerated("root4_F12Atribute1", new int[]{0, 31}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F12, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F12"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F12, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F12"), "!=", 0));
		featureAttrAtribute0.put("root4_F12", VariableFactory.enumerated("root4_F12Atribute0", new int[]{0, 24}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F12, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F12"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F12, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F12"), "!=", 0));
		featureAttrAtribute1.put("root4_F27", VariableFactory.enumerated("root4_F27Atribute1", new int[]{0, 71}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F27, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F27"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F27, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F27"), "!=", 0));
		featureAttrAtribute0.put("root4_F27", VariableFactory.enumerated("root4_F27Atribute0", new int[]{0, 87}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F27, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F27"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F27, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F27"), "!=", 0));
		featureAttrAtribute1.put("root4_F14", VariableFactory.enumerated("root4_F14Atribute1", new int[]{0, 78}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F14, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F14"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F14, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F14"), "!=", 0));
		featureAttrAtribute0.put("root4_F14", VariableFactory.enumerated("root4_F14Atribute0", new int[]{0, 61}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F14, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F14"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F14, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F14"), "!=", 0));
		featureAttrAtribute1.put("root4_F15", VariableFactory.enumerated("root4_F15Atribute1", new int[]{0, 11}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F15, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F15"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F15, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F15"), "!=", 0));
		featureAttrAtribute0.put("root4_F15", VariableFactory.enumerated("root4_F15Atribute0", new int[]{0, 47}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F15, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F15"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F15, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F15"), "!=", 0));
		featureAttrAtribute1.put("root4_F31", VariableFactory.enumerated("root4_F31Atribute1", new int[]{0, 20}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F31, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F31"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F31, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F31"), "!=", 0));
		featureAttrAtribute0.put("root4_F31", VariableFactory.enumerated("root4_F31Atribute0", new int[]{0, 43}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F31, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F31"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F31, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F31"), "!=", 0));
		featureAttrAtribute1.put("root4_F32", VariableFactory.enumerated("root4_F32Atribute1", new int[]{0, 2}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F32, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F32"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F32, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F32"), "!=", 0));
		featureAttrAtribute0.put("root4_F32", VariableFactory.enumerated("root4_F32Atribute0", new int[]{0, 1}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F32, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F32"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F32, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F32"), "!=", 0));
		featureAttrAtribute1.put("root4_F33", VariableFactory.enumerated("root4_F33Atribute1", new int[]{0, 89}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F33, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F33"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F33, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F33"), "!=", 0));
		featureAttrAtribute0.put("root4_F33", VariableFactory.enumerated("root4_F33Atribute0", new int[]{0, 76}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F33, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F33"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F33, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F33"), "!=", 0));
		featureAttrAtribute1.put("root4_F34", VariableFactory.enumerated("root4_F34Atribute1", new int[]{0, 43}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F34, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F34"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F34, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F34"), "!=", 0));
		featureAttrAtribute0.put("root4_F34", VariableFactory.enumerated("root4_F34Atribute0", new int[]{0, 90}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F34, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F34"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F34, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F34"), "!=", 0));
		featureAttrAtribute1.put("root4_F35", VariableFactory.enumerated("root4_F35Atribute1", new int[]{0, 6}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F35, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F35"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F35, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F35"), "!=", 0));
		featureAttrAtribute0.put("root4_F35", VariableFactory.enumerated("root4_F35Atribute0", new int[]{0, 16}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F35, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F35"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F35, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F35"), "!=", 0));
		featureAttrAtribute1.put("root4_F36", VariableFactory.enumerated("root4_F36Atribute1", new int[]{0, 73}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F36, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F36"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F36, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F36"), "!=", 0));
		featureAttrAtribute0.put("root4_F36", VariableFactory.enumerated("root4_F36Atribute0", new int[]{0, 26}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F36, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F36"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F36, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F36"), "!=", 0));
		featureAttrAtribute1.put("root4_F39", VariableFactory.enumerated("root4_F39Atribute1", new int[]{0, 98}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F39, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F39"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F39, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F39"), "!=", 0));
		featureAttrAtribute0.put("root4_F39", VariableFactory.enumerated("root4_F39Atribute0", new int[]{0, 40}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F39, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F39"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F39, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F39"), "!=", 0));
		featureAttrAtribute1.put("root4_F28", VariableFactory.enumerated("root4_F28Atribute1", new int[]{0, 85}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F28, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F28"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F28, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F28"), "!=", 0));
		featureAttrAtribute0.put("root4_F28", VariableFactory.enumerated("root4_F28Atribute0", new int[]{0, 11}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F28, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F28"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F28, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F28"), "!=", 0));
		featureAttrAtribute1.put("root4_F19", VariableFactory.enumerated("root4_F19Atribute1", new int[]{0, 42}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F19, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F19"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F19, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F19"), "!=", 0));
		featureAttrAtribute0.put("root4_F19", VariableFactory.enumerated("root4_F19Atribute0", new int[]{0, 71}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F19, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F19"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F19, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F19"), "!=", 0));
		featureAttrAtribute1.put("root4_F20", VariableFactory.enumerated("root4_F20Atribute1", new int[]{0, 82}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F20, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F20"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F20, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F20"), "!=", 0));
		featureAttrAtribute0.put("root4_F20", VariableFactory.enumerated("root4_F20Atribute0", new int[]{0, 25}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F20, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F20"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F20, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F20"), "!=", 0));
		featureAttrAtribute1.put("root4_F38", VariableFactory.enumerated("root4_F38Atribute1", new int[]{0, 56}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F38, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F38"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F38, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F38"), "!=", 0));
		featureAttrAtribute0.put("root4_F38", VariableFactory.enumerated("root4_F38Atribute0", new int[]{0, 72}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F38, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F38"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F38, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F38"), "!=", 0));
		featureAttrAtribute1.put("root4_F22", VariableFactory.enumerated("root4_F22Atribute1", new int[]{0, 63}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F22, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F22"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F22, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F22"), "!=", 0));
		featureAttrAtribute0.put("root4_F22", VariableFactory.enumerated("root4_F22Atribute0", new int[]{0, 30}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F22, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F22"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F22, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F22"), "!=", 0));
		featureAttrAtribute1.put("root4_F23", VariableFactory.enumerated("root4_F23Atribute1", new int[]{0, 64}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F23, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F23"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F23, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F23"), "!=", 0));
		featureAttrAtribute0.put("root4_F23", VariableFactory.enumerated("root4_F23Atribute0", new int[]{0, 3}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F23, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F23"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F23, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F23"), "!=", 0));
		featureAttrAtribute1.put("root4_F24", VariableFactory.enumerated("root4_F24Atribute1", new int[]{0, 17}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F24, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F24"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F24, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F24"), "!=", 0));
		featureAttrAtribute0.put("root4_F24", VariableFactory.enumerated("root4_F24Atribute0", new int[]{0, 44}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F24, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F24"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F24, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F24"), "!=", 0));
		featureAttrAtribute1.put("root4_F25", VariableFactory.enumerated("root4_F25Atribute1", new int[]{0, 51}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F25, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F25"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F25, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F25"), "!=", 0));
		featureAttrAtribute0.put("root4_F25", VariableFactory.enumerated("root4_F25Atribute0", new int[]{0, 17}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F25, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F25"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F25, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F25"), "!=", 0));
		featureAttrAtribute1.put("root4_F29", VariableFactory.enumerated("root4_F29Atribute1", new int[]{0, 4}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F29, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F29"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F29, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F29"), "!=", 0));
		featureAttrAtribute0.put("root4_F29", VariableFactory.enumerated("root4_F29Atribute0", new int[]{0, 64}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F29, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F29"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F29, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F29"), "!=", 0));
		featureAttrAtribute1.put("root4_F30", VariableFactory.enumerated("root4_F30Atribute1", new int[]{0, 14}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F30, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F30"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F30, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F30"), "!=", 0));
		featureAttrAtribute0.put("root4_F30", VariableFactory.enumerated("root4_F30Atribute0", new int[]{0, 21}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F30, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F30"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F30, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F30"), "!=", 0));
		featureAttrAtribute1.put("root5_F1", VariableFactory.enumerated("root5_F1Atribute1", new int[]{0, 9}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F1, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F1"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F1, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F1"), "!=", 0));
		featureAttrAtribute0.put("root5_F1", VariableFactory.enumerated("root5_F1Atribute0", new int[]{0, 64}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F1, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F1"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F1, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F1"), "!=", 0));
		featureAttrAtribute1.put("root5_F32", VariableFactory.enumerated("root5_F32Atribute1", new int[]{0, 32}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F32, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F32"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F32, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F32"), "!=", 0));
		featureAttrAtribute0.put("root5_F32", VariableFactory.enumerated("root5_F32Atribute0", new int[]{0, 35}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F32, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F32"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F32, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F32"), "!=", 0));
		featureAttrAtribute1.put("root5_F33", VariableFactory.enumerated("root5_F33Atribute1", new int[]{0, 22}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F33, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F33"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F33, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F33"), "!=", 0));
		featureAttrAtribute0.put("root5_F33", VariableFactory.enumerated("root5_F33Atribute0", new int[]{0, 2}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F33, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F33"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F33, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F33"), "!=", 0));
		featureAttrAtribute1.put("root5_F34", VariableFactory.enumerated("root5_F34Atribute1", new int[]{0, 44}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F34, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F34"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F34, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F34"), "!=", 0));
		featureAttrAtribute0.put("root5_F34", VariableFactory.enumerated("root5_F34Atribute0", new int[]{0, 28}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F34, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F34"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F34, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F34"), "!=", 0));
		featureAttrAtribute1.put("root5_F5", VariableFactory.enumerated("root5_F5Atribute1", new int[]{0, 100}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F5, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F5"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F5, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F5"), "!=", 0));
		featureAttrAtribute0.put("root5_F5", VariableFactory.enumerated("root5_F5Atribute0", new int[]{0, 81}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F5, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F5"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F5, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F5"), "!=", 0));
		featureAttrAtribute1.put("root5_F7", VariableFactory.enumerated("root5_F7Atribute1", new int[]{0, 97}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F7, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F7"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F7, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F7"), "!=", 0));
		featureAttrAtribute0.put("root5_F7", VariableFactory.enumerated("root5_F7Atribute0", new int[]{0, 22}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F7, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F7"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F7, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F7"), "!=", 0));
		featureAttrAtribute1.put("root5_F8", VariableFactory.enumerated("root5_F8Atribute1", new int[]{0, 57}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F8, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F8"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F8, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F8"), "!=", 0));
		featureAttrAtribute0.put("root5_F8", VariableFactory.enumerated("root5_F8Atribute0", new int[]{0, 98}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F8, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F8"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F8, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F8"), "!=", 0));
		featureAttrAtribute1.put("root5_F35", VariableFactory.enumerated("root5_F35Atribute1", new int[]{0, 28}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F35, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F35"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F35, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F35"), "!=", 0));
		featureAttrAtribute0.put("root5_F35", VariableFactory.enumerated("root5_F35Atribute0", new int[]{0, 85}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F35, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F35"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F35, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F35"), "!=", 0));
		featureAttrAtribute1.put("root5_F36", VariableFactory.enumerated("root5_F36Atribute1", new int[]{0, 89}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F36, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F36"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F36, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F36"), "!=", 0));
		featureAttrAtribute0.put("root5_F36", VariableFactory.enumerated("root5_F36Atribute0", new int[]{0, 63}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F36, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F36"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F36, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F36"), "!=", 0));
		featureAttrAtribute1.put("root5_F37", VariableFactory.enumerated("root5_F37Atribute1", new int[]{0, 45}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F37, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F37"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F37, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F37"), "!=", 0));
		featureAttrAtribute0.put("root5_F37", VariableFactory.enumerated("root5_F37Atribute0", new int[]{0, 93}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F37, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F37"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F37, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F37"), "!=", 0));
		featureAttrAtribute1.put("root5_F10", VariableFactory.enumerated("root5_F10Atribute1", new int[]{0, 82}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F10, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F10"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F10, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F10"), "!=", 0));
		featureAttrAtribute0.put("root5_F10", VariableFactory.enumerated("root5_F10Atribute0", new int[]{0, 98}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F10, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F10"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F10, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F10"), "!=", 0));
		featureAttrAtribute1.put("root5_F11", VariableFactory.enumerated("root5_F11Atribute1", new int[]{0, 79}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F11, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F11"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F11, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F11"), "!=", 0));
		featureAttrAtribute0.put("root5_F11", VariableFactory.enumerated("root5_F11Atribute0", new int[]{0, 34}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F11, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F11"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F11, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F11"), "!=", 0));
		featureAttrAtribute1.put("root5_F26", VariableFactory.enumerated("root5_F26Atribute1", new int[]{0, 91}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F26, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F26"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F26, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F26"), "!=", 0));
		featureAttrAtribute0.put("root5_F26", VariableFactory.enumerated("root5_F26Atribute0", new int[]{0, 39}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F26, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F26"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F26, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F26"), "!=", 0));
		featureAttrAtribute1.put("root5_F24", VariableFactory.enumerated("root5_F24Atribute1", new int[]{0, 68}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F24, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F24"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F24, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F24"), "!=", 0));
		featureAttrAtribute0.put("root5_F24", VariableFactory.enumerated("root5_F24Atribute0", new int[]{0, 20}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F24, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F24"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F24, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F24"), "!=", 0));
		featureAttrAtribute1.put("root5_F25", VariableFactory.enumerated("root5_F25Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F25, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F25"), "=", 0));
		featureAttrAtribute0.put("root5_F25", VariableFactory.enumerated("root5_F25Atribute0", new int[]{0, 94}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F25, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F25"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F25, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F25"), "!=", 0));
		featureAttrAtribute1.put("root5_F14", VariableFactory.enumerated("root5_F14Atribute1", new int[]{0, 36}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F14, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F14"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F14, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F14"), "!=", 0));
		featureAttrAtribute0.put("root5_F14", VariableFactory.enumerated("root5_F14Atribute0", new int[]{0, 72}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F14, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F14"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F14, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F14"), "!=", 0));
		featureAttrAtribute1.put("root5_F16", VariableFactory.enumerated("root5_F16Atribute1", new int[]{0, 54}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F16, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F16"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F16, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F16"), "!=", 0));
		featureAttrAtribute0.put("root5_F16", VariableFactory.enumerated("root5_F16Atribute0", new int[]{0, 2}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F16, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F16"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F16, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F16"), "!=", 0));
		featureAttrAtribute1.put("root5_F17", VariableFactory.enumerated("root5_F17Atribute1", new int[]{0, 21}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F17, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F17"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F17, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F17"), "!=", 0));
		featureAttrAtribute0.put("root5_F17", VariableFactory.enumerated("root5_F17Atribute0", new int[]{0, 40}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F17, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F17"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F17, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F17"), "!=", 0));
		featureAttrAtribute1.put("root5_F18", VariableFactory.enumerated("root5_F18Atribute1", new int[]{0, 1}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F18, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F18"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F18, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F18"), "!=", 0));
		featureAttrAtribute0.put("root5_F18", VariableFactory.enumerated("root5_F18Atribute0", new int[]{0, 56}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F18, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F18"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F18, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F18"), "!=", 0));
		featureAttrAtribute1.put("root5_F19", VariableFactory.enumerated("root5_F19Atribute1", new int[]{0, 46}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F19, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F19"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F19, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F19"), "!=", 0));
		featureAttrAtribute0.put("root5_F19", VariableFactory.enumerated("root5_F19Atribute0", new int[]{0, 51}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F19, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F19"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F19, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F19"), "!=", 0));
		featureAttrAtribute1.put("root5_F20", VariableFactory.enumerated("root5_F20Atribute1", new int[]{0, 54}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F20, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F20"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F20, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F20"), "!=", 0));
		featureAttrAtribute0.put("root5_F20", VariableFactory.enumerated("root5_F20Atribute0", new int[]{0, 21}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F20, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F20"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F20, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F20"), "!=", 0));
		featureAttrAtribute1.put("root5_F27", VariableFactory.enumerated("root5_F27Atribute1", new int[]{0, 62}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F27, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F27"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F27, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F27"), "!=", 0));
		featureAttrAtribute0.put("root5_F27", VariableFactory.enumerated("root5_F27Atribute0", new int[]{0, 40}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F27, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F27"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F27, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F27"), "!=", 0));
		featureAttrAtribute1.put("root5_F28", VariableFactory.enumerated("root5_F28Atribute1", new int[]{0, 35}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F28, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F28"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F28, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F28"), "!=", 0));
		featureAttrAtribute0.put("root5_F28", VariableFactory.enumerated("root5_F28Atribute0", new int[]{0, 47}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F28, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F28"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F28, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F28"), "!=", 0));
		featureAttrAtribute1.put("root5_F29", VariableFactory.enumerated("root5_F29Atribute1", new int[]{0, 100}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F29, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F29"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F29, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F29"), "!=", 0));
		featureAttrAtribute0.put("root5_F29", VariableFactory.enumerated("root5_F29Atribute0", new int[]{0, 86}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F29, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F29"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F29, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F29"), "!=", 0));
		featureAttrAtribute1.put("root5_F30", VariableFactory.enumerated("root5_F30Atribute1", new int[]{0, 59}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F30, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F30"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F30, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F30"), "!=", 0));
		featureAttrAtribute0.put("root5_F30", VariableFactory.enumerated("root5_F30Atribute0", new int[]{0, 90}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F30, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F30"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F30, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F30"), "!=", 0));
		featureAttrAtribute1.put("root5_F39", VariableFactory.enumerated("root5_F39Atribute1", new int[]{0, 30}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F39, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F39"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F39, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F39"), "!=", 0));
		featureAttrAtribute0.put("root5_F39", VariableFactory.enumerated("root5_F39Atribute0", new int[]{0, 1}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F39, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F39"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F39, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F39"), "!=", 0));
		featureAttrAtribute1.put("root5_F38", VariableFactory.enumerated("root5_F38Atribute1", new int[]{0, 59}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F38, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F38"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F38, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F38"), "!=", 0));
		featureAttrAtribute0.put("root5_F38", VariableFactory.enumerated("root5_F38Atribute0", new int[]{0, 99}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F38, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F38"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F38, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F38"), "!=", 0));
		featureAttrAtribute1.put("root5_F23", VariableFactory.enumerated("root5_F23Atribute1", new int[]{0, 37}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F23, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F23"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F23, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root5_F23"), "!=", 0));
		featureAttrAtribute0.put("root5_F23", VariableFactory.enumerated("root5_F23Atribute0", new int[]{0, 45}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F23, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F23"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root5_F23, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root5_F23"), "!=", 0));
		
		//--------------------------------------------
		//Tree Constraints
		//--------------------------------------------
		Constraint optionalroot1_root_root1_F1 = IntConstraintFactory.arithm(root1_F1, "<=", root1_root);
		optionalroot1_root_root1_F1.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_root_root1_F1);
		Constraint optionalroot1_root_root1_F2 = IntConstraintFactory.arithm(root1_F2, "<=", root1_root);
		optionalroot1_root_root1_F2.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_root_root1_F2);
		Constraint optionalroot1_root_root1_F3 = IntConstraintFactory.arithm(root1_F3, "<=", root1_root);
		optionalroot1_root_root1_F3.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_root_root1_F3);
		Constraint mandatoryroot1_F3_root1_F10 = IntConstraintFactory.arithm(root1_F3, "=", root1_F10);
		mandatoryroot1_F3_root1_F10.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F3_root1_F10);
		Constraint optionalroot1_F10_root1_F13 = IntConstraintFactory.arithm(root1_F13, "<=", root1_F10);
		optionalroot1_F10_root1_F13.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F10_root1_F13);
		Constraint mandatoryroot1_F10_root1_F14 = IntConstraintFactory.arithm(root1_F10, "=", root1_F14);
		mandatoryroot1_F10_root1_F14.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F10_root1_F14);
		Constraint mandatoryroot1_F10_root1_F15 = IntConstraintFactory.arithm(root1_F10, "=", root1_F15);
		mandatoryroot1_F10_root1_F15.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F10_root1_F15);
		IntVar sumOrroot1_F3_1 = VariableFactory.enumerated("sumOrroot1_F3", 0, 2, solver); 
		BoolVar[] varsOrroot1_F3_1 = new BoolVar[2];
		varsOrroot1_F3_1[0] = root1_F11;
		varsOrroot1_F3_1[1] = root1_F12;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F3_1, sumOrroot1_F3_1));
		Constraint or1root1_F3_1 = IntConstraintFactory.arithm(sumOrroot1_F3_1, ">=", 1);
		or1root1_F3_1.setName(Utilities.OR_TC);
		
		Constraint or0root1_F3_1 = IntConstraintFactory.arithm(sumOrroot1_F3_1, "=", 0);
		or0root1_F3_1.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F3, or1root1_F3_1, or0root1_F3_1);
			
		Constraint mandatoryroot1_F11_root1_F25 = IntConstraintFactory.arithm(root1_F11, "=", root1_F25);
		mandatoryroot1_F11_root1_F25.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F11_root1_F25);
		Constraint optionalroot1_F11_root1_F26 = IntConstraintFactory.arithm(root1_F26, "<=", root1_F11);
		optionalroot1_F11_root1_F26.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F11_root1_F26);
		Constraint optionalroot1_F11_root1_F27 = IntConstraintFactory.arithm(root1_F27, "<=", root1_F11);
		optionalroot1_F11_root1_F27.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F11_root1_F27);
		Constraint mandatoryroot1_F11_root1_F28 = IntConstraintFactory.arithm(root1_F11, "=", root1_F28);
		mandatoryroot1_F11_root1_F28.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F11_root1_F28);
		IntVar sumOrroot1_F11_4 = VariableFactory.enumerated("sumOrroot1_F11", 0, 3, solver); 
		BoolVar[] varsOrroot1_F11_4 = new BoolVar[3];
		varsOrroot1_F11_4[0] = root1_F29;
		varsOrroot1_F11_4[1] = root1_F30;
		varsOrroot1_F11_4[2] = root1_F31;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F11_4, sumOrroot1_F11_4));
		Constraint or1root1_F11_4 = IntConstraintFactory.arithm(sumOrroot1_F11_4, ">=", 1);
		or1root1_F11_4.setName(Utilities.OR_TC);
		
		Constraint or0root1_F11_4 = IntConstraintFactory.arithm(sumOrroot1_F11_4, "=", 0);
		or0root1_F11_4.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F11, or1root1_F11_4, or0root1_F11_4);
			
		Constraint optionalroot1_F30_root1_F35 = IntConstraintFactory.arithm(root1_F35, "<=", root1_F30);
		optionalroot1_F30_root1_F35.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F30_root1_F35);
		Constraint optionalroot1_F30_root1_F36 = IntConstraintFactory.arithm(root1_F36, "<=", root1_F30);
		optionalroot1_F30_root1_F36.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F30_root1_F36);
		Constraint optionalroot1_F30_root1_F37 = IntConstraintFactory.arithm(root1_F37, "<=", root1_F30);
		optionalroot1_F30_root1_F37.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F30_root1_F37);
		IntVar sumOrroot1_F30_3 = VariableFactory.enumerated("sumOrroot1_F30", 0, 2, solver); 
		BoolVar[] varsOrroot1_F30_3 = new BoolVar[2];
		varsOrroot1_F30_3[0] = root1_F38;
		varsOrroot1_F30_3[1] = root1_F39;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F30_3, sumOrroot1_F30_3));
		Constraint or1root1_F30_3 = IntConstraintFactory.arithm(sumOrroot1_F30_3, ">=", 1);
		or1root1_F30_3.setName(Utilities.OR_TC);
		
		Constraint or0root1_F30_3 = IntConstraintFactory.arithm(sumOrroot1_F30_3, "=", 0);
		or0root1_F30_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F30, or1root1_F30_3, or0root1_F30_3);
			
		Constraint mandatoryroot1_F31_root1_F32 = IntConstraintFactory.arithm(root1_F31, "=", root1_F32);
		mandatoryroot1_F31_root1_F32.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F31_root1_F32);
		Constraint mandatoryroot1_F31_root1_F33 = IntConstraintFactory.arithm(root1_F31, "=", root1_F33);
		mandatoryroot1_F31_root1_F33.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F31_root1_F33);
		Constraint optionalroot1_F31_root1_F34 = IntConstraintFactory.arithm(root1_F34, "<=", root1_F31);
		optionalroot1_F31_root1_F34.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F31_root1_F34);
		Constraint optionalroot1_F12_root1_F16 = IntConstraintFactory.arithm(root1_F16, "<=", root1_F12);
		optionalroot1_F12_root1_F16.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F12_root1_F16);
		Constraint mandatoryroot1_F16_root1_F21 = IntConstraintFactory.arithm(root1_F16, "=", root1_F21);
		mandatoryroot1_F16_root1_F21.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F16_root1_F21);
		Constraint mandatoryroot1_F16_root1_F22 = IntConstraintFactory.arithm(root1_F16, "=", root1_F22);
		mandatoryroot1_F16_root1_F22.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F16_root1_F22);
		Constraint mandatoryroot1_F16_root1_F23 = IntConstraintFactory.arithm(root1_F16, "=", root1_F23);
		mandatoryroot1_F16_root1_F23.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F16_root1_F23);
		Constraint optionalroot1_F12_root1_F17 = IntConstraintFactory.arithm(root1_F17, "<=", root1_F12);
		optionalroot1_F12_root1_F17.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F12_root1_F17);
		Constraint mandatoryroot1_F12_root1_F18 = IntConstraintFactory.arithm(root1_F12, "=", root1_F18);
		mandatoryroot1_F12_root1_F18.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F12_root1_F18);
		IntVar sumOrroot1_F12_3 = VariableFactory.enumerated("sumOrroot1_F12", 0, 2, solver); 
		BoolVar[] varsOrroot1_F12_3 = new BoolVar[2];
		varsOrroot1_F12_3[0] = root1_F19;
		varsOrroot1_F12_3[1] = root1_F20;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F12_3, sumOrroot1_F12_3));
		Constraint or1root1_F12_3 = IntConstraintFactory.arithm(sumOrroot1_F12_3, ">=", 1);
		or1root1_F12_3.setName(Utilities.OR_TC);
		
		Constraint or0root1_F12_3 = IntConstraintFactory.arithm(sumOrroot1_F12_3, "=", 0);
		or0root1_F12_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F12, or1root1_F12_3, or0root1_F12_3);
			
		Constraint optionalroot1_root_root1_F4 = IntConstraintFactory.arithm(root1_F4, "<=", root1_root);
		optionalroot1_root_root1_F4.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_root_root1_F4);
		Constraint optionalroot1_root_root1_F5 = IntConstraintFactory.arithm(root1_F5, "<=", root1_root);
		optionalroot1_root_root1_F5.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_root_root1_F5);
		Constraint mandatoryroot1_F5_root1_F24 = IntConstraintFactory.arithm(root1_F5, "=", root1_F24);
		mandatoryroot1_F5_root1_F24.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F5_root1_F24);
		IntVar sumOrroot1_root_5 = VariableFactory.enumerated("sumOrroot1_root", 0, 4, solver); 
		BoolVar[] varsOrroot1_root_5 = new BoolVar[4];
		varsOrroot1_root_5[0] = root1_F6;
		varsOrroot1_root_5[1] = root1_F7;
		varsOrroot1_root_5[2] = root1_F8;
		varsOrroot1_root_5[3] = root1_F9;
		solver.post(IntConstraintFactory.sum(varsOrroot1_root_5, sumOrroot1_root_5));
		Constraint or1root1_root_5 = IntConstraintFactory.arithm(sumOrroot1_root_5, ">=", 1);
		or1root1_root_5.setName(Utilities.OR_TC);
		
		Constraint or0root1_root_5 = IntConstraintFactory.arithm(sumOrroot1_root_5, "=", 0);
		or0root1_root_5.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_root, or1root1_root_5, or0root1_root_5);
			
		Constraint optionalroot2_root_root2_F1 = IntConstraintFactory.arithm(root2_F1, "<=", root2_root);
		optionalroot2_root_root2_F1.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_root_root2_F1);
		Constraint mandatoryroot2_F1_root2_F3 = IntConstraintFactory.arithm(root2_F1, "=", root2_F3);
		mandatoryroot2_F1_root2_F3.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F1_root2_F3);
		Constraint mandatoryroot2_F1_root2_F4 = IntConstraintFactory.arithm(root2_F1, "=", root2_F4);
		mandatoryroot2_F1_root2_F4.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F1_root2_F4);
		Constraint mandatoryroot2_F4_root2_F14 = IntConstraintFactory.arithm(root2_F4, "=", root2_F14);
		mandatoryroot2_F4_root2_F14.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F4_root2_F14);
		Constraint mandatoryroot2_F4_root2_F15 = IntConstraintFactory.arithm(root2_F4, "=", root2_F15);
		mandatoryroot2_F4_root2_F15.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F4_root2_F15);
		Constraint mandatoryroot2_F15_root2_F19 = IntConstraintFactory.arithm(root2_F15, "=", root2_F19);
		mandatoryroot2_F15_root2_F19.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F15_root2_F19);
		Constraint optionalroot2_F4_root2_F16 = IntConstraintFactory.arithm(root2_F16, "<=", root2_F4);
		optionalroot2_F4_root2_F16.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F4_root2_F16);
		Constraint optionalroot2_F4_root2_F17 = IntConstraintFactory.arithm(root2_F17, "<=", root2_F4);
		optionalroot2_F4_root2_F17.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F4_root2_F17);
		Constraint mandatoryroot2_F4_root2_F18 = IntConstraintFactory.arithm(root2_F4, "=", root2_F18);
		mandatoryroot2_F4_root2_F18.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F4_root2_F18);
		IntVar sumOrroot2_F1_2 = VariableFactory.enumerated("sumOrroot2_F1", 0, 2, solver); 
		BoolVar[] varsOrroot2_F1_2 = new BoolVar[2];
		varsOrroot2_F1_2[0] = root2_F5;
		varsOrroot2_F1_2[1] = root2_F6;
		solver.post(IntConstraintFactory.sum(varsOrroot2_F1_2, sumOrroot2_F1_2));
		Constraint or1root2_F1_2 = IntConstraintFactory.arithm(sumOrroot2_F1_2, ">=", 1);
		or1root2_F1_2.setName(Utilities.OR_TC);
		
		Constraint or0root2_F1_2 = IntConstraintFactory.arithm(sumOrroot2_F1_2, "=", 0);
		or0root2_F1_2.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root2_F1, or1root2_F1_2, or0root2_F1_2);
			
		Constraint mandatoryroot2_F5_root2_F12 = IntConstraintFactory.arithm(root2_F5, "=", root2_F12);
		mandatoryroot2_F5_root2_F12.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F5_root2_F12);
		Constraint mandatoryroot2_F5_root2_F13 = IntConstraintFactory.arithm(root2_F5, "=", root2_F13);
		mandatoryroot2_F5_root2_F13.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F5_root2_F13);
		Constraint mandatoryroot2_F1_root2_F7 = IntConstraintFactory.arithm(root2_F1, "=", root2_F7);
		mandatoryroot2_F1_root2_F7.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F1_root2_F7);
		Constraint mandatoryroot2_F1_root2_F8 = IntConstraintFactory.arithm(root2_F1, "=", root2_F8);
		mandatoryroot2_F1_root2_F8.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F1_root2_F8);
		Constraint mandatoryroot2_F1_root2_F9 = IntConstraintFactory.arithm(root2_F1, "=", root2_F9);
		mandatoryroot2_F1_root2_F9.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F1_root2_F9);
		Constraint mandatoryroot2_F9_root2_F20 = IntConstraintFactory.arithm(root2_F9, "=", root2_F20);
		mandatoryroot2_F9_root2_F20.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F9_root2_F20);
		Constraint mandatoryroot2_F9_root2_F21 = IntConstraintFactory.arithm(root2_F9, "=", root2_F21);
		mandatoryroot2_F9_root2_F21.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F9_root2_F21);
		Constraint mandatoryroot2_F9_root2_F22 = IntConstraintFactory.arithm(root2_F9, "=", root2_F22);
		mandatoryroot2_F9_root2_F22.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F9_root2_F22);
		IntVar sumOrroot2_F9_3 = VariableFactory.enumerated("sumOrroot2_F9", 0, 2, solver); 
		BoolVar[] varsOrroot2_F9_3 = new BoolVar[2];
		varsOrroot2_F9_3[0] = root2_F23;
		varsOrroot2_F9_3[1] = root2_F24;
		solver.post(IntConstraintFactory.sum(varsOrroot2_F9_3, sumOrroot2_F9_3));
		Constraint or1root2_F9_3 = IntConstraintFactory.arithm(sumOrroot2_F9_3, ">=", 1);
		or1root2_F9_3.setName(Utilities.OR_TC);
		
		Constraint or0root2_F9_3 = IntConstraintFactory.arithm(sumOrroot2_F9_3, "=", 0);
		or0root2_F9_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root2_F9, or1root2_F9_3, or0root2_F9_3);
			
		IntVar sumOrroot2_F9_4 = VariableFactory.enumerated("sumOrroot2_F9", 0, 2, solver); 
		BoolVar[] varsOrroot2_F9_4 = new BoolVar[2];
		varsOrroot2_F9_4[0] = root2_F25;
		varsOrroot2_F9_4[1] = root2_F26;
		solver.post(IntConstraintFactory.sum(varsOrroot2_F9_4, sumOrroot2_F9_4));
		Constraint or1root2_F9_4 = IntConstraintFactory.arithm(sumOrroot2_F9_4, ">=", 1);
		or1root2_F9_4.setName(Utilities.OR_TC);
		
		Constraint or0root2_F9_4 = IntConstraintFactory.arithm(sumOrroot2_F9_4, "=", 0);
		or0root2_F9_4.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root2_F9, or1root2_F9_4, or0root2_F9_4);
			
		Constraint mandatoryroot2_F9_root2_F27 = IntConstraintFactory.arithm(root2_F9, "=", root2_F27);
		mandatoryroot2_F9_root2_F27.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F9_root2_F27);
		Constraint optionalroot2_F27_root2_F30 = IntConstraintFactory.arithm(root2_F30, "<=", root2_F27);
		optionalroot2_F27_root2_F30.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F27_root2_F30);
		Constraint mandatoryroot2_F27_root2_F31 = IntConstraintFactory.arithm(root2_F27, "=", root2_F31);
		mandatoryroot2_F27_root2_F31.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F27_root2_F31);
		IntVar sumOrroot2_F27_2 = VariableFactory.enumerated("sumOrroot2_F27", 0, 3, solver); 
		BoolVar[] varsOrroot2_F27_2 = new BoolVar[3];
		varsOrroot2_F27_2[0] = root2_F32;
		varsOrroot2_F27_2[1] = root2_F33;
		varsOrroot2_F27_2[2] = root2_F34;
		solver.post(IntConstraintFactory.sum(varsOrroot2_F27_2, sumOrroot2_F27_2));
		Constraint or1root2_F27_2 = IntConstraintFactory.arithm(sumOrroot2_F27_2, ">=", 1);
		or1root2_F27_2.setName(Utilities.OR_TC);
		
		Constraint or0root2_F27_2 = IntConstraintFactory.arithm(sumOrroot2_F27_2, "=", 0);
		or0root2_F27_2.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root2_F27, or1root2_F27_2, or0root2_F27_2);
			
		Constraint mandatoryroot2_F27_root2_F35 = IntConstraintFactory.arithm(root2_F27, "=", root2_F35);
		mandatoryroot2_F27_root2_F35.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F27_root2_F35);
		Constraint mandatoryroot2_F27_root2_F36 = IntConstraintFactory.arithm(root2_F27, "=", root2_F36);
		mandatoryroot2_F27_root2_F36.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F27_root2_F36);
		Constraint mandatoryroot2_F27_root2_F37 = IntConstraintFactory.arithm(root2_F27, "=", root2_F37);
		mandatoryroot2_F27_root2_F37.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F27_root2_F37);
		Constraint mandatoryroot2_F27_root2_F38 = IntConstraintFactory.arithm(root2_F27, "=", root2_F38);
		mandatoryroot2_F27_root2_F38.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F27_root2_F38);
		Constraint mandatoryroot2_F27_root2_F39 = IntConstraintFactory.arithm(root2_F27, "=", root2_F39);
		mandatoryroot2_F27_root2_F39.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F27_root2_F39);
		Constraint mandatoryroot2_F9_root2_F28 = IntConstraintFactory.arithm(root2_F9, "=", root2_F28);
		mandatoryroot2_F9_root2_F28.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F9_root2_F28);
		Constraint mandatoryroot2_F9_root2_F29 = IntConstraintFactory.arithm(root2_F9, "=", root2_F29);
		mandatoryroot2_F9_root2_F29.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F9_root2_F29);
		Constraint mandatoryroot2_F1_root2_F10 = IntConstraintFactory.arithm(root2_F1, "=", root2_F10);
		mandatoryroot2_F1_root2_F10.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F1_root2_F10);
		Constraint mandatoryroot2_F1_root2_F11 = IntConstraintFactory.arithm(root2_F1, "=", root2_F11);
		mandatoryroot2_F1_root2_F11.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F1_root2_F11);
		Constraint mandatoryroot2_root_root2_F2 = IntConstraintFactory.arithm(root2_root, "=", root2_F2);
		mandatoryroot2_root_root2_F2.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_root_root2_F2);
		Constraint optionalroot3_root_root3_F1 = IntConstraintFactory.arithm(root3_F1, "<=", root3_root);
		optionalroot3_root_root3_F1.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_root_root3_F1);
		Constraint mandatoryroot3_F1_root3_F32 = IntConstraintFactory.arithm(root3_F1, "=", root3_F32);
		mandatoryroot3_F1_root3_F32.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F1_root3_F32);
		IntVar sumOrroot3_F1_1 = VariableFactory.enumerated("sumOrroot3_F1", 0, 3, solver); 
		BoolVar[] varsOrroot3_F1_1 = new BoolVar[3];
		varsOrroot3_F1_1[0] = root3_F33;
		varsOrroot3_F1_1[1] = root3_F34;
		varsOrroot3_F1_1[2] = root3_F35;
		solver.post(IntConstraintFactory.sum(varsOrroot3_F1_1, sumOrroot3_F1_1));
		Constraint or1root3_F1_1 = IntConstraintFactory.arithm(sumOrroot3_F1_1, ">=", 1);
		or1root3_F1_1.setName(Utilities.OR_TC);
		
		Constraint or0root3_F1_1 = IntConstraintFactory.arithm(sumOrroot3_F1_1, "=", 0);
		or0root3_F1_1.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root3_F1, or1root3_F1_1, or0root3_F1_1);
			
		Constraint mandatoryroot3_F1_root3_F36 = IntConstraintFactory.arithm(root3_F1, "=", root3_F36);
		mandatoryroot3_F1_root3_F36.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F1_root3_F36);
		Constraint mandatoryroot3_F1_root3_F37 = IntConstraintFactory.arithm(root3_F1, "=", root3_F37);
		mandatoryroot3_F1_root3_F37.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F1_root3_F37);
		Constraint mandatoryroot3_F1_root3_F38 = IntConstraintFactory.arithm(root3_F1, "=", root3_F38);
		mandatoryroot3_F1_root3_F38.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F1_root3_F38);
		Constraint mandatoryroot3_F1_root3_F39 = IntConstraintFactory.arithm(root3_F1, "=", root3_F39);
		mandatoryroot3_F1_root3_F39.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F1_root3_F39);
		Constraint mandatoryroot3_root_root3_F2 = IntConstraintFactory.arithm(root3_root, "=", root3_F2);
		mandatoryroot3_root_root3_F2.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_root_root3_F2);
		Constraint optionalroot3_root_root3_F3 = IntConstraintFactory.arithm(root3_F3, "<=", root3_root);
		optionalroot3_root_root3_F3.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_root_root3_F3);
		IntVar sumOrroot3_root_3 = VariableFactory.enumerated("sumOrroot3_root", 0, 2, solver); 
		BoolVar[] varsOrroot3_root_3 = new BoolVar[2];
		varsOrroot3_root_3[0] = root3_F4;
		varsOrroot3_root_3[1] = root3_F5;
		solver.post(IntConstraintFactory.sum(varsOrroot3_root_3, sumOrroot3_root_3));
		Constraint or1root3_root_3 = IntConstraintFactory.arithm(sumOrroot3_root_3, ">=", 1);
		or1root3_root_3.setName(Utilities.OR_TC);
		
		Constraint or0root3_root_3 = IntConstraintFactory.arithm(sumOrroot3_root_3, "=", 0);
		or0root3_root_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root3_root, or1root3_root_3, or0root3_root_3);
			
		Constraint mandatoryroot3_F4_root3_F11 = IntConstraintFactory.arithm(root3_F4, "=", root3_F11);
		mandatoryroot3_F4_root3_F11.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F4_root3_F11);
		Constraint optionalroot3_F4_root3_F12 = IntConstraintFactory.arithm(root3_F12, "<=", root3_F4);
		optionalroot3_F4_root3_F12.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F4_root3_F12);
		Constraint optionalroot3_F4_root3_F13 = IntConstraintFactory.arithm(root3_F13, "<=", root3_F4);
		optionalroot3_F4_root3_F13.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F4_root3_F13);
		IntVar sumOrroot3_F4_3 = VariableFactory.enumerated("sumOrroot3_F4", 0, 2, solver); 
		BoolVar[] varsOrroot3_F4_3 = new BoolVar[2];
		varsOrroot3_F4_3[0] = root3_F14;
		varsOrroot3_F4_3[1] = root3_F15;
		solver.post(IntConstraintFactory.sum(varsOrroot3_F4_3, sumOrroot3_F4_3));
		Constraint or1root3_F4_3 = IntConstraintFactory.arithm(sumOrroot3_F4_3, ">=", 1);
		or1root3_F4_3.setName(Utilities.OR_TC);
		
		Constraint or0root3_F4_3 = IntConstraintFactory.arithm(sumOrroot3_F4_3, "=", 0);
		or0root3_F4_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root3_F4, or1root3_F4_3, or0root3_F4_3);
			
		IntVar sumOrroot3_F4_4 = VariableFactory.enumerated("sumOrroot3_F4", 0, 2, solver); 
		BoolVar[] varsOrroot3_F4_4 = new BoolVar[2];
		varsOrroot3_F4_4[0] = root3_F16;
		varsOrroot3_F4_4[1] = root3_F17;
		solver.post(IntConstraintFactory.sum(varsOrroot3_F4_4, sumOrroot3_F4_4));
		Constraint or1root3_F4_4 = IntConstraintFactory.arithm(sumOrroot3_F4_4, ">=", 1);
		or1root3_F4_4.setName(Utilities.OR_TC);
		
		Constraint or0root3_F4_4 = IntConstraintFactory.arithm(sumOrroot3_F4_4, "=", 0);
		or0root3_F4_4.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root3_F4, or1root3_F4_4, or0root3_F4_4);
			
		Constraint mandatoryroot3_root_root3_F6 = IntConstraintFactory.arithm(root3_root, "=", root3_F6);
		mandatoryroot3_root_root3_F6.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_root_root3_F6);
		Constraint mandatoryroot3_root_root3_F7 = IntConstraintFactory.arithm(root3_root, "=", root3_F7);
		mandatoryroot3_root_root3_F7.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_root_root3_F7);
		Constraint mandatoryroot3_root_root3_F8 = IntConstraintFactory.arithm(root3_root, "=", root3_F8);
		mandatoryroot3_root_root3_F8.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_root_root3_F8);
		Constraint mandatoryroot3_root_root3_F9 = IntConstraintFactory.arithm(root3_root, "=", root3_F9);
		mandatoryroot3_root_root3_F9.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_root_root3_F9);
		Constraint mandatoryroot3_root_root3_F10 = IntConstraintFactory.arithm(root3_root, "=", root3_F10);
		mandatoryroot3_root_root3_F10.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_root_root3_F10);
		Constraint optionalroot3_F10_root3_F18 = IntConstraintFactory.arithm(root3_F18, "<=", root3_F10);
		optionalroot3_F10_root3_F18.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F10_root3_F18);
		Constraint mandatoryroot3_F10_root3_F19 = IntConstraintFactory.arithm(root3_F10, "=", root3_F19);
		mandatoryroot3_F10_root3_F19.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F10_root3_F19);
		Constraint mandatoryroot3_F10_root3_F20 = IntConstraintFactory.arithm(root3_F10, "=", root3_F20);
		mandatoryroot3_F10_root3_F20.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F10_root3_F20);
		Constraint mandatoryroot3_F20_root3_F27 = IntConstraintFactory.arithm(root3_F20, "=", root3_F27);
		mandatoryroot3_F20_root3_F27.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F20_root3_F27);
		Constraint optionalroot3_F20_root3_F28 = IntConstraintFactory.arithm(root3_F28, "<=", root3_F20);
		optionalroot3_F20_root3_F28.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F20_root3_F28);
		Constraint mandatoryroot3_F20_root3_F29 = IntConstraintFactory.arithm(root3_F20, "=", root3_F29);
		mandatoryroot3_F20_root3_F29.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F20_root3_F29);
		Constraint mandatoryroot3_F20_root3_F30 = IntConstraintFactory.arithm(root3_F20, "=", root3_F30);
		mandatoryroot3_F20_root3_F30.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F20_root3_F30);
		Constraint mandatoryroot3_F20_root3_F31 = IntConstraintFactory.arithm(root3_F20, "=", root3_F31);
		mandatoryroot3_F20_root3_F31.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F20_root3_F31);
		Constraint optionalroot3_F10_root3_F21 = IntConstraintFactory.arithm(root3_F21, "<=", root3_F10);
		optionalroot3_F10_root3_F21.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F10_root3_F21);
		Constraint mandatoryroot3_F10_root3_F22 = IntConstraintFactory.arithm(root3_F10, "=", root3_F22);
		mandatoryroot3_F10_root3_F22.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F10_root3_F22);
		Constraint mandatoryroot3_F10_root3_F23 = IntConstraintFactory.arithm(root3_F10, "=", root3_F23);
		mandatoryroot3_F10_root3_F23.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F10_root3_F23);
		Constraint mandatoryroot3_F10_root3_F24 = IntConstraintFactory.arithm(root3_F10, "=", root3_F24);
		mandatoryroot3_F10_root3_F24.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F10_root3_F24);
		Constraint mandatoryroot3_F10_root3_F25 = IntConstraintFactory.arithm(root3_F10, "=", root3_F25);
		mandatoryroot3_F10_root3_F25.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F10_root3_F25);
		Constraint mandatoryroot3_F10_root3_F26 = IntConstraintFactory.arithm(root3_F10, "=", root3_F26);
		mandatoryroot3_F10_root3_F26.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F10_root3_F26);
		Constraint mandatoryroot4_root_root4_F1 = IntConstraintFactory.arithm(root4_root, "=", root4_F1);
		mandatoryroot4_root_root4_F1.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_root_root4_F1);
		Constraint optionalroot4_F1_root4_F3 = IntConstraintFactory.arithm(root4_F3, "<=", root4_F1);
		optionalroot4_F1_root4_F3.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F1_root4_F3);
		Constraint mandatoryroot4_F1_root4_F4 = IntConstraintFactory.arithm(root4_F1, "=", root4_F4);
		mandatoryroot4_F1_root4_F4.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F1_root4_F4);
		Constraint optionalroot4_F4_root4_F5 = IntConstraintFactory.arithm(root4_F5, "<=", root4_F4);
		optionalroot4_F4_root4_F5.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F4_root4_F5);
		Constraint optionalroot4_F4_root4_F6 = IntConstraintFactory.arithm(root4_F6, "<=", root4_F4);
		optionalroot4_F4_root4_F6.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F4_root4_F6);
		Constraint mandatoryroot4_F4_root4_F7 = IntConstraintFactory.arithm(root4_F4, "=", root4_F7);
		mandatoryroot4_F4_root4_F7.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F4_root4_F7);
		IntVar sumOrroot4_F4_3 = VariableFactory.enumerated("sumOrroot4_F4", 0, 2, solver); 
		BoolVar[] varsOrroot4_F4_3 = new BoolVar[2];
		varsOrroot4_F4_3[0] = root4_F8;
		varsOrroot4_F4_3[1] = root4_F9;
		solver.post(IntConstraintFactory.sum(varsOrroot4_F4_3, sumOrroot4_F4_3));
		Constraint or1root4_F4_3 = IntConstraintFactory.arithm(sumOrroot4_F4_3, ">=", 1);
		or1root4_F4_3.setName(Utilities.OR_TC);
		
		Constraint or0root4_F4_3 = IntConstraintFactory.arithm(sumOrroot4_F4_3, "=", 0);
		or0root4_F4_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root4_F4, or1root4_F4_3, or0root4_F4_3);
			
		IntVar sumOrroot4_F4_4 = VariableFactory.enumerated("sumOrroot4_F4", 0, 2, solver); 
		BoolVar[] varsOrroot4_F4_4 = new BoolVar[2];
		varsOrroot4_F4_4[0] = root4_F10;
		varsOrroot4_F4_4[1] = root4_F11;
		solver.post(IntConstraintFactory.sum(varsOrroot4_F4_4, sumOrroot4_F4_4));
		Constraint or1root4_F4_4 = IntConstraintFactory.arithm(sumOrroot4_F4_4, ">=", 1);
		or1root4_F4_4.setName(Utilities.OR_TC);
		
		Constraint or0root4_F4_4 = IntConstraintFactory.arithm(sumOrroot4_F4_4, "=", 0);
		or0root4_F4_4.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root4_F4, or1root4_F4_4, or0root4_F4_4);
			
		Constraint optionalroot4_root_root4_F2 = IntConstraintFactory.arithm(root4_F2, "<=", root4_root);
		optionalroot4_root_root4_F2.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_root_root4_F2);
		Constraint optionalroot4_F2_root4_F12 = IntConstraintFactory.arithm(root4_F12, "<=", root4_F2);
		optionalroot4_F2_root4_F12.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F2_root4_F12);
		Constraint optionalroot4_F2_root4_F13 = IntConstraintFactory.arithm(root4_F13, "<=", root4_F2);
		optionalroot4_F2_root4_F13.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F2_root4_F13);
		Constraint mandatoryroot4_F13_root4_F27 = IntConstraintFactory.arithm(root4_F13, "=", root4_F27);
		mandatoryroot4_F13_root4_F27.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F13_root4_F27);
		Constraint mandatoryroot4_F2_root4_F14 = IntConstraintFactory.arithm(root4_F2, "=", root4_F14);
		mandatoryroot4_F2_root4_F14.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F2_root4_F14);
		Constraint optionalroot4_F2_root4_F15 = IntConstraintFactory.arithm(root4_F15, "<=", root4_F2);
		optionalroot4_F2_root4_F15.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F2_root4_F15);
		Constraint mandatoryroot4_F2_root4_F16 = IntConstraintFactory.arithm(root4_F2, "=", root4_F16);
		mandatoryroot4_F2_root4_F16.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F2_root4_F16);
		Constraint optionalroot4_F16_root4_F31 = IntConstraintFactory.arithm(root4_F31, "<=", root4_F16);
		optionalroot4_F16_root4_F31.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F16_root4_F31);
		Constraint mandatoryroot4_F16_root4_F32 = IntConstraintFactory.arithm(root4_F16, "=", root4_F32);
		mandatoryroot4_F16_root4_F32.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F16_root4_F32);
		IntVar sumOrroot4_F16_2 = VariableFactory.enumerated("sumOrroot4_F16", 0, 3, solver); 
		BoolVar[] varsOrroot4_F16_2 = new BoolVar[3];
		varsOrroot4_F16_2[0] = root4_F33;
		varsOrroot4_F16_2[1] = root4_F34;
		varsOrroot4_F16_2[2] = root4_F35;
		solver.post(IntConstraintFactory.sum(varsOrroot4_F16_2, sumOrroot4_F16_2));
		Constraint or1root4_F16_2 = IntConstraintFactory.arithm(sumOrroot4_F16_2, ">=", 1);
		or1root4_F16_2.setName(Utilities.OR_TC);
		
		Constraint or0root4_F16_2 = IntConstraintFactory.arithm(sumOrroot4_F16_2, "=", 0);
		or0root4_F16_2.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root4_F16, or1root4_F16_2, or0root4_F16_2);
			
		Constraint mandatoryroot4_F16_root4_F36 = IntConstraintFactory.arithm(root4_F16, "=", root4_F36);
		mandatoryroot4_F16_root4_F36.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F16_root4_F36);
		Constraint mandatoryroot4_F16_root4_F37 = IntConstraintFactory.arithm(root4_F16, "=", root4_F37);
		mandatoryroot4_F16_root4_F37.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F16_root4_F37);
		Constraint optionalroot4_F37_root4_F39 = IntConstraintFactory.arithm(root4_F39, "<=", root4_F37);
		optionalroot4_F37_root4_F39.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F37_root4_F39);
		Constraint mandatoryroot4_F2_root4_F17 = IntConstraintFactory.arithm(root4_F2, "=", root4_F17);
		mandatoryroot4_F2_root4_F17.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F2_root4_F17);
		Constraint mandatoryroot4_F17_root4_F18 = IntConstraintFactory.arithm(root4_F17, "=", root4_F18);
		mandatoryroot4_F17_root4_F18.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F17_root4_F18);
		Constraint optionalroot4_F18_root4_F28 = IntConstraintFactory.arithm(root4_F28, "<=", root4_F18);
		optionalroot4_F18_root4_F28.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F18_root4_F28);
		Constraint mandatoryroot4_F17_root4_F19 = IntConstraintFactory.arithm(root4_F17, "=", root4_F19);
		mandatoryroot4_F17_root4_F19.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F17_root4_F19);
		Constraint optionalroot4_F17_root4_F20 = IntConstraintFactory.arithm(root4_F20, "<=", root4_F17);
		optionalroot4_F17_root4_F20.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F17_root4_F20);
		Constraint optionalroot4_F17_root4_F21 = IntConstraintFactory.arithm(root4_F21, "<=", root4_F17);
		optionalroot4_F17_root4_F21.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F17_root4_F21);
		Constraint mandatoryroot4_F21_root4_F38 = IntConstraintFactory.arithm(root4_F21, "=", root4_F38);
		mandatoryroot4_F21_root4_F38.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F21_root4_F38);
		Constraint optionalroot4_F17_root4_F22 = IntConstraintFactory.arithm(root4_F22, "<=", root4_F17);
		optionalroot4_F17_root4_F22.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F17_root4_F22);
		Constraint mandatoryroot4_F17_root4_F23 = IntConstraintFactory.arithm(root4_F17, "=", root4_F23);
		mandatoryroot4_F17_root4_F23.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F17_root4_F23);
		Constraint optionalroot4_F17_root4_F24 = IntConstraintFactory.arithm(root4_F24, "<=", root4_F17);
		optionalroot4_F17_root4_F24.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F17_root4_F24);
		IntVar sumOrroot4_F17_7 = VariableFactory.enumerated("sumOrroot4_F17", 0, 2, solver); 
		BoolVar[] varsOrroot4_F17_7 = new BoolVar[2];
		varsOrroot4_F17_7[0] = root4_F25;
		varsOrroot4_F17_7[1] = root4_F26;
		solver.post(IntConstraintFactory.sum(varsOrroot4_F17_7, sumOrroot4_F17_7));
		Constraint or1root4_F17_7 = IntConstraintFactory.arithm(sumOrroot4_F17_7, ">=", 1);
		or1root4_F17_7.setName(Utilities.OR_TC);
		
		Constraint or0root4_F17_7 = IntConstraintFactory.arithm(sumOrroot4_F17_7, "=", 0);
		or0root4_F17_7.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root4_F17, or1root4_F17_7, or0root4_F17_7);
			
		Constraint mandatoryroot4_F26_root4_F29 = IntConstraintFactory.arithm(root4_F26, "=", root4_F29);
		mandatoryroot4_F26_root4_F29.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F26_root4_F29);
		Constraint mandatoryroot4_F26_root4_F30 = IntConstraintFactory.arithm(root4_F26, "=", root4_F30);
		mandatoryroot4_F26_root4_F30.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F26_root4_F30);
		Constraint optionalroot5_root_root5_F1 = IntConstraintFactory.arithm(root5_F1, "<=", root5_root);
		optionalroot5_root_root5_F1.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_root_root5_F1);
		Constraint mandatoryroot5_root_root5_F2 = IntConstraintFactory.arithm(root5_root, "=", root5_F2);
		mandatoryroot5_root_root5_F2.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_root_root5_F2);
		Constraint optionalroot5_F2_root5_F3 = IntConstraintFactory.arithm(root5_F3, "<=", root5_F2);
		optionalroot5_F2_root5_F3.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_F2_root5_F3);
		IntVar sumOrroot5_F3_0 = VariableFactory.enumerated("sumOrroot5_F3", 0, 3, solver); 
		BoolVar[] varsOrroot5_F3_0 = new BoolVar[3];
		varsOrroot5_F3_0[0] = root5_F4;
		varsOrroot5_F3_0[1] = root5_F5;
		varsOrroot5_F3_0[2] = root5_F6;
		solver.post(IntConstraintFactory.sum(varsOrroot5_F3_0, sumOrroot5_F3_0));
		Constraint or1root5_F3_0 = IntConstraintFactory.arithm(sumOrroot5_F3_0, ">=", 1);
		or1root5_F3_0.setName(Utilities.OR_TC);
		
		Constraint or0root5_F3_0 = IntConstraintFactory.arithm(sumOrroot5_F3_0, "=", 0);
		or0root5_F3_0.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root5_F3, or1root5_F3_0, or0root5_F3_0);
			
		Constraint optionalroot5_F4_root5_F32 = IntConstraintFactory.arithm(root5_F32, "<=", root5_F4);
		optionalroot5_F4_root5_F32.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_F4_root5_F32);
		IntVar sumOrroot5_F4_1 = VariableFactory.enumerated("sumOrroot5_F4", 0, 2, solver); 
		BoolVar[] varsOrroot5_F4_1 = new BoolVar[2];
		varsOrroot5_F4_1[0] = root5_F33;
		varsOrroot5_F4_1[1] = root5_F34;
		solver.post(IntConstraintFactory.sum(varsOrroot5_F4_1, sumOrroot5_F4_1));
		Constraint or1root5_F4_1 = IntConstraintFactory.arithm(sumOrroot5_F4_1, ">=", 1);
		or1root5_F4_1.setName(Utilities.OR_TC);
		
		Constraint or0root5_F4_1 = IntConstraintFactory.arithm(sumOrroot5_F4_1, "=", 0);
		or0root5_F4_1.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root5_F4, or1root5_F4_1, or0root5_F4_1);
			
		Constraint mandatoryroot5_F6_root5_F7 = IntConstraintFactory.arithm(root5_F6, "=", root5_F7);
		mandatoryroot5_F6_root5_F7.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F6_root5_F7);
		Constraint mandatoryroot5_F6_root5_F8 = IntConstraintFactory.arithm(root5_F6, "=", root5_F8);
		mandatoryroot5_F6_root5_F8.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F6_root5_F8);
		Constraint optionalroot5_F6_root5_F9 = IntConstraintFactory.arithm(root5_F9, "<=", root5_F6);
		optionalroot5_F6_root5_F9.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_F6_root5_F9);
		Constraint mandatoryroot5_F9_root5_F35 = IntConstraintFactory.arithm(root5_F9, "=", root5_F35);
		mandatoryroot5_F9_root5_F35.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F9_root5_F35);
		Constraint mandatoryroot5_F9_root5_F36 = IntConstraintFactory.arithm(root5_F9, "=", root5_F36);
		mandatoryroot5_F9_root5_F36.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F9_root5_F36);
		Constraint mandatoryroot5_F9_root5_F37 = IntConstraintFactory.arithm(root5_F9, "=", root5_F37);
		mandatoryroot5_F9_root5_F37.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F9_root5_F37);
		Constraint optionalroot5_F6_root5_F10 = IntConstraintFactory.arithm(root5_F10, "<=", root5_F6);
		optionalroot5_F6_root5_F10.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_F6_root5_F10);
		Constraint mandatoryroot5_F6_root5_F11 = IntConstraintFactory.arithm(root5_F6, "=", root5_F11);
		mandatoryroot5_F6_root5_F11.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F6_root5_F11);
		Constraint optionalroot5_F6_root5_F12 = IntConstraintFactory.arithm(root5_F12, "<=", root5_F6);
		optionalroot5_F6_root5_F12.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_F6_root5_F12);
		Constraint mandatoryroot5_F12_root5_F26 = IntConstraintFactory.arithm(root5_F12, "=", root5_F26);
		mandatoryroot5_F12_root5_F26.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F12_root5_F26);
		Constraint mandatoryroot5_F6_root5_F13 = IntConstraintFactory.arithm(root5_F6, "=", root5_F13);
		mandatoryroot5_F6_root5_F13.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F6_root5_F13);
		Constraint optionalroot5_F13_root5_F24 = IntConstraintFactory.arithm(root5_F24, "<=", root5_F13);
		optionalroot5_F13_root5_F24.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_F13_root5_F24);
		Constraint optionalroot5_F13_root5_F25 = IntConstraintFactory.arithm(root5_F25, "<=", root5_F13);
		optionalroot5_F13_root5_F25.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_F13_root5_F25);
		Constraint mandatoryroot5_F6_root5_F14 = IntConstraintFactory.arithm(root5_F6, "=", root5_F14);
		mandatoryroot5_F6_root5_F14.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F6_root5_F14);
		Constraint mandatoryroot5_F6_root5_F15 = IntConstraintFactory.arithm(root5_F6, "=", root5_F15);
		mandatoryroot5_F6_root5_F15.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F6_root5_F15);
		Constraint optionalroot5_F15_root5_F16 = IntConstraintFactory.arithm(root5_F16, "<=", root5_F15);
		optionalroot5_F15_root5_F16.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_F15_root5_F16);
		Constraint mandatoryroot5_F15_root5_F17 = IntConstraintFactory.arithm(root5_F15, "=", root5_F17);
		mandatoryroot5_F15_root5_F17.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F15_root5_F17);
		Constraint optionalroot5_F15_root5_F18 = IntConstraintFactory.arithm(root5_F18, "<=", root5_F15);
		optionalroot5_F15_root5_F18.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_F15_root5_F18);
		Constraint optionalroot5_F15_root5_F19 = IntConstraintFactory.arithm(root5_F19, "<=", root5_F15);
		optionalroot5_F15_root5_F19.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_F15_root5_F19);
		Constraint optionalroot5_F15_root5_F20 = IntConstraintFactory.arithm(root5_F20, "<=", root5_F15);
		optionalroot5_F15_root5_F20.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_F15_root5_F20);
		Constraint mandatoryroot5_F15_root5_F21 = IntConstraintFactory.arithm(root5_F15, "=", root5_F21);
		mandatoryroot5_F15_root5_F21.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F15_root5_F21);
		Constraint mandatoryroot5_F21_root5_F27 = IntConstraintFactory.arithm(root5_F21, "=", root5_F27);
		mandatoryroot5_F21_root5_F27.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F21_root5_F27);
		Constraint mandatoryroot5_F21_root5_F28 = IntConstraintFactory.arithm(root5_F21, "=", root5_F28);
		mandatoryroot5_F21_root5_F28.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F21_root5_F28);
		IntVar sumOrroot5_F21_2 = VariableFactory.enumerated("sumOrroot5_F21", 0, 3, solver); 
		BoolVar[] varsOrroot5_F21_2 = new BoolVar[3];
		varsOrroot5_F21_2[0] = root5_F29;
		varsOrroot5_F21_2[1] = root5_F30;
		varsOrroot5_F21_2[2] = root5_F31;
		solver.post(IntConstraintFactory.sum(varsOrroot5_F21_2, sumOrroot5_F21_2));
		Constraint or1root5_F21_2 = IntConstraintFactory.arithm(sumOrroot5_F21_2, ">=", 1);
		or1root5_F21_2.setName(Utilities.OR_TC);
		
		Constraint or0root5_F21_2 = IntConstraintFactory.arithm(sumOrroot5_F21_2, "=", 0);
		or0root5_F21_2.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root5_F21, or1root5_F21_2, or0root5_F21_2);
			
		Constraint mandatoryroot5_F31_root5_F39 = IntConstraintFactory.arithm(root5_F31, "=", root5_F39);
		mandatoryroot5_F31_root5_F39.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F31_root5_F39);
		Constraint mandatoryroot5_F15_root5_F22 = IntConstraintFactory.arithm(root5_F15, "=", root5_F22);
		mandatoryroot5_F15_root5_F22.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F15_root5_F22);
		Constraint optionalroot5_F22_root5_F38 = IntConstraintFactory.arithm(root5_F38, "<=", root5_F22);
		optionalroot5_F22_root5_F38.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot5_F22_root5_F38);
		Constraint mandatoryroot5_F15_root5_F23 = IntConstraintFactory.arithm(root5_F15, "=", root5_F23);
		mandatoryroot5_F15_root5_F23.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot5_F15_root5_F23);
		
		//--------------------------------------------
		//Cross-Tree Constraints
		//--------------------------------------------
		Constraint requiresroot1_F32_root1_F24 = IntConstraintFactory.arithm(root1_F32, "<=", root1_F24);
		requiresroot1_F32_root1_F24.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot1_F32_root1_F24);
		Constraint excludesroot1_F5_root1_F5 = IntConstraintFactory.arithm(root1_F5, "+", root1_F7, "<=", 1);
		excludesroot1_F5_root1_F5.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot1_F5_root1_F5);
		Constraint excludesroot1_F37_root1_F37 = IntConstraintFactory.arithm(root1_F37, "+", root1_F8, "<=", 1);
		excludesroot1_F37_root1_F37.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot1_F37_root1_F37);
		Constraint excludesroot1_F10_root1_F10 = IntConstraintFactory.arithm(root1_F10, "+", root1_F4, "<=", 1);
		excludesroot1_F10_root1_F10.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot1_F10_root1_F10);
		Constraint requiresroot2_F14_root2_F7 = IntConstraintFactory.arithm(root2_F14, "<=", root2_F7);
		requiresroot2_F14_root2_F7.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot2_F14_root2_F7);
		Constraint excludesroot2_F13_root2_F13 = IntConstraintFactory.arithm(root2_F13, "+", root2_F19, "<=", 1);
		excludesroot2_F13_root2_F13.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot2_F13_root2_F13);
		Constraint excludesroot2_F25_root2_F25 = IntConstraintFactory.arithm(root2_F25, "+", root2_F12, "<=", 1);
		excludesroot2_F25_root2_F25.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot2_F25_root2_F25);
		Constraint requiresroot2_F38_root2_F30 = IntConstraintFactory.arithm(root2_F38, "<=", root2_F30);
		requiresroot2_F38_root2_F30.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot2_F38_root2_F30);
		Constraint requiresroot3_F27_root3_F8 = IntConstraintFactory.arithm(root3_F27, "<=", root3_F8);
		requiresroot3_F27_root3_F8.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot3_F27_root3_F8);
		Constraint requiresroot3_F3_root3_F2 = IntConstraintFactory.arithm(root3_F3, "<=", root3_F2);
		requiresroot3_F3_root3_F2.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot3_F3_root3_F2);
		Constraint excludesroot3_F9_root3_F9 = IntConstraintFactory.arithm(root3_F9, "+", root3_F33, "<=", 1);
		excludesroot3_F9_root3_F9.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot3_F9_root3_F9);
		Constraint requiresroot3_F21_root3_F15 = IntConstraintFactory.arithm(root3_F21, "<=", root3_F15);
		requiresroot3_F21_root3_F15.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot3_F21_root3_F15);
		Constraint excludesroot4_F8_root4_F8 = IntConstraintFactory.arithm(root4_F8, "+", root4_F7, "<=", 1);
		excludesroot4_F8_root4_F8.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot4_F8_root4_F8);
		Constraint requiresroot4_F6_root4_F37 = IntConstraintFactory.arithm(root4_F6, "<=", root4_F37);
		requiresroot4_F6_root4_F37.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot4_F6_root4_F37);
		Constraint excludesroot4_F20_root4_F20 = IntConstraintFactory.arithm(root4_F20, "+", root4_F22, "<=", 1);
		excludesroot4_F20_root4_F20.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot4_F20_root4_F20);
		Constraint excludesroot4_F8_root4_F32 = IntConstraintFactory.arithm(root4_F8, "+", root4_F32, "<=", 1);
		excludesroot4_F8_root4_F32.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot4_F8_root4_F32);
		Constraint requiresroot5_F34_root5_F31 = IntConstraintFactory.arithm(root5_F34, "<=", root5_F31);
		requiresroot5_F34_root5_F31.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot5_F34_root5_F31);
		Constraint excludesroot5_F5_root5_F5 = IntConstraintFactory.arithm(root5_F5, "+", root5_F16, "<=", 1);
		excludesroot5_F5_root5_F5.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot5_F5_root5_F5);
		Constraint excludesroot5_F35_root5_F35 = IntConstraintFactory.arithm(root5_F35, "+", root5_F26, "<=", 1);
		excludesroot5_F35_root5_F35.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot5_F35_root5_F35);
		Constraint excludesroot5_F21_root5_F21 = IntConstraintFactory.arithm(root5_F21, "+", root5_F14, "<=", 1);
		excludesroot5_F21_root5_F21.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot5_F21_root5_F21);
		
		//--------------------------------------------
		//Cross-Model Constraints
		//--------------------------------------------
		Constraint excludesroot5_F33_root5_F33 = IntConstraintFactory.arithm(root5_F33, "+", root4_F26, "<=", 1);
		excludesroot5_F33_root5_F33.setName(Utilities.EXCLUDES_CMC);
		solver.post(excludesroot5_F33_root5_F33);
		Constraint requiresroot5_F33_root1_F29 = IntConstraintFactory.arithm(root5_F33, "<=", root1_F29);
		requiresroot5_F33_root1_F29.setName(Utilities.REQUIRES_CMC);
		solver.post(requiresroot5_F33_root1_F29);
		Constraint excludesroot5_F29_root5_F29 = IntConstraintFactory.arithm(root5_F29, "+", root4_F19, "<=", 1);
		excludesroot5_F29_root5_F29.setName(Utilities.EXCLUDES_CMC);
		solver.post(excludesroot5_F29_root5_F29);
		Constraint excludesroot3_F23_root3_F23 = IntConstraintFactory.arithm(root3_F23, "+", root5_F30, "<=", 1);
		excludesroot3_F23_root3_F23.setName(Utilities.EXCLUDES_CMC);
		solver.post(excludesroot3_F23_root3_F23);
		Constraint excludesroot3_F1_root3_F1 = IntConstraintFactory.arithm(root3_F1, "+", root2_F38, "<=", 1);
		excludesroot3_F1_root3_F1.setName(Utilities.EXCLUDES_CMC);
		solver.post(excludesroot3_F1_root3_F1);
		Constraint excludesroot5_F7_root5_F7 = IntConstraintFactory.arithm(root5_F7, "+", root4_F27, "<=", 1);
		excludesroot5_F7_root5_F7.setName(Utilities.EXCLUDES_CMC);
		solver.post(excludesroot5_F7_root5_F7);
		Constraint requiresroot3_F7_root4_F9 = IntConstraintFactory.arithm(root3_F7, "<=", root4_F9);
		requiresroot3_F7_root4_F9.setName(Utilities.REQUIRES_CMC);
		solver.post(requiresroot3_F7_root4_F9);
		Constraint requiresroot1_F2_root4_F9 = IntConstraintFactory.arithm(root1_F2, "<=", root4_F9);
		requiresroot1_F2_root4_F9.setName(Utilities.REQUIRES_CMC);
		solver.post(requiresroot1_F2_root4_F9);
		Constraint excludesroot5_F13_root5_F13 = IntConstraintFactory.arithm(root5_F13, "+", root1_F35, "<=", 1);
		excludesroot5_F13_root5_F13.setName(Utilities.EXCLUDES_CMC);
		solver.post(excludesroot5_F13_root5_F13);
		Constraint requiresroot2_F39_root5_F7 = IntConstraintFactory.arithm(root2_F39, "<=", root5_F7);
		requiresroot2_F39_root5_F7.setName(Utilities.REQUIRES_CMC);
		solver.post(requiresroot2_F39_root5_F7);
		
		//--------------------------------------------
		//Solve
		//--------------------------------------------
		long start = System.currentTimeMillis();
		System.out.println("Started at: " + start);
		
		List<IntVar> varsAtribute0List = new ArrayList<IntVar>(featureAttrAtribute0.values());
		IntVar[] varsAtribute0 = new IntVar[featureAttrAtribute0.values().size()];
			
		for(int i = 0; i < varsAtribute0List.size(); i++) {
		varsAtribute0[i] = varsAtribute0List.get(i);
		}
		
		List<IntVar> varsAtribute1List = new ArrayList<IntVar>(featureAttrAtribute1.values());
		IntVar[] varsAtribute1 = new IntVar[featureAttrAtribute1.values().size()];
			
		for(int i = 0; i < varsAtribute1List.size(); i++) {
		varsAtribute1[i] = VariableFactory.minus(varsAtribute1List.get(i));
		}
		
		IntVar totalAtribute0 = VariableFactory.bounded("totalAtribute0", 0, 1000000, solver);
		solver.post(IntConstraintFactory.sum(varsAtribute0, totalAtribute0));
		IntVar totalAtribute1 = VariableFactory.bounded("totalAtribute1", -1000000, 0, solver);
		solver.post(IntConstraintFactory.sum(varsAtribute1, totalAtribute1));
		
		IntVar[] featureVars = getFeatureVars(solver, contFeatures);
		IntVar[] attributeVars = getAttributeVars(solver);
		IntVar[] totalVars = new IntVar[2];
		totalVars[0] = totalAtribute0;
		totalVars[1] = totalAtribute1;
		
		IntStrategy strategy1 = IntStrategyFactory.custom(new FMVarSelectorMorePercInstVars(), IntStrategyFactory.max_value_selector(), featureVars);
		IntStrategy strategy2 = IntStrategyFactory.custom(IntStrategyFactory.minDomainSize_var_selector(), new IntDomainMin(), attributeVars);
		IntStrategy strategy3 = IntStrategyFactory.custom(IntStrategyFactory.minDomainSize_var_selector(), new IntDomainMin(), totalVars);
		solver.set(IntStrategyFactory.sequencer(strategy1, IntStrategyFactory.domOverWDeg(featureVars, 1)), strategy2, strategy3);
		
		SearchMonitorFactory.limitSolution(solver, 1000);
		//Chatterbox.showSolutions(solver);
		solver.findParetoFront(ResolutionPolicy.MINIMIZE, totalAtribute0, totalAtribute1);
		Chatterbox.printStatistics(solver);
		
		
		long end = System.currentTimeMillis();
		System.out.println("Ended at: " + end);
		System.out.println("Total time: " + (end - start));
	}
	
	private static IntVar[] getFeatureVars(Solver solver, int contFeatures){
		IntVar[] featureVars = new IntVar[contFeatures];
		Variable[] varsSolver = solver.getVars();
		int index = 0;
		for(int i = 0; i < varsSolver.length; i++) {
			Variable current = varsSolver[i];
			if(current.getName().startsWith("feature_")) {
				featureVars[index] = (IntVar) current;
				index++;
			}
		}
		
		return featureVars;
	}
	
	private static IntVar[] getAttributeVars(Solver solver){
		IntVar[] attributeVars;
		List<IntVar> vars = new ArrayList<IntVar>();
		Variable[] varsSolver = solver.getVars();
		
		for(int i = 0; i < varsSolver.length; i++) {
			Variable current = varsSolver[i];
			if(current.getName().startsWith("root")) {
				vars.add((IntVar) current);
			}
		}
		
		attributeVars = vars.toArray(new IntVar[vars.size()]);
		return attributeVars;
	}
}